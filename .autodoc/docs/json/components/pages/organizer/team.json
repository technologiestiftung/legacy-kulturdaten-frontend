{
  "fileName": "team.tsx",
  "filePath": "components/pages/organizer/team.tsx",
  "url": "https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/organizer/team.tsx",
  "summary": "The code defines a React functional component called `OrganizerTeamPage` that renders a team management page for an organizer. The component imports various helper functions and components from other files in the project. \n\nThe `useEffect`, `useMemo`, and `useState` hooks are imported from the React library. The `useApiCall` hook is imported from the `api` module, which is a custom library for making API calls. The `Category`, `CategoryEntryPage`, and `useEntry` functions are imported from the `categories` module, which is a custom library for handling different types of entries in the project. The `Save` component, `StyledEntryFormContainer`, and `EntryFormWrapper` components are imported from the `EntryForm` module, which is a custom library for rendering forms for different types of entries. The `useEntryHeader` function is imported from the `helpers` module, which contains various helper functions for rendering entry headers. The `EntryFormHook` type is imported from the `form` module, which is a custom library for handling form submissions. The `EntryFormHead`, `FormGrid`, `FormItem`, and `FormItemWidth` components are imported from the `formComponents` module, which is a custom library for rendering form components. The `TeamList` component is imported from the `Team` module, which is a custom library for rendering team-related components. The `Organizer`, `OrganizerRole`, `OrganizerRolePending`, `OrganizerShow`, `OrganizerDelete`, and `OrganizerUpdate` types are imported from the `api/types/organizer` and `api/routes/organizer` modules, which are custom libraries for handling organizer-related API calls. The `Textarea` component is imported from the `textarea` module, which is a custom library for rendering text areas. The `ParsedUrlQuery` type is imported from the `querystring` module, which is a built-in Node.js module for parsing query strings. The `Role` and `User` types are imported from the `api/types` module, which is a custom library for defining API types. The `Info` and `InfoColor` components are imported from the `info` module, which is a custom library for rendering informational components. The `useConfirmExit` and `useUserIsOwner` hooks are imported from the `lib` module, which is a custom library for handling various utility functions.\n\nThe `maxInvites` constant is defined as the maximum number of invites that can be sent at once. The `regex` constant is defined as a regular expression for validating email addresses.\n\nThe `useTeamAddForm` function is defined as a custom hook that takes an object with `category` and `query` properties as arguments. The hook returns a JSX element that renders a form for adding team members to an organizer. The form contains a text area for entering email addresses, a button for submitting the form, and an informational component for displaying hints and error messages. The hook uses the `useState` hook to manage the state of the text area and the `usePseudoUID` hook to generate unique IDs for form elements. The hook uses the `useMemo` hook to compute the validity and array of email addresses from the text area input. The hook uses the `useApiCall` and `useEntry` hooks to make API calls for updating the organizer's team members and fetching the organizer's data.\n\nThe `useTeamForm` function is defined as a custom hook that takes an object with `category` and `query` properties as arguments. The hook returns an object with `renderedForm`, `pristine`, `valid`, `reset`, and `submit` properties. The `renderedForm` property is a JSX element that renders a form for managing an organizer's team members. The form contains a `TeamList` component for displaying the current team members and a button for submitting the form. The `pristine` property is a boolean value that indicates whether the form has been modified. The `valid` property is a boolean value that indicates whether the form is valid. The `reset` property is a function that resets the form to its initial state. The `submit` property is an async function that submits the form data to the server and updates the organizer's team members. The hook uses the `useState` hook to manage the state of the team members and the `useUserIsOwner` hook to check if the current user is the owner of the organizer. The hook uses the `useMemo` hook to compute the initial state of the team members and the `useEffect` hook to update the state of the team members when the organizer's data changes. The hook uses the `useApiCall` and `useEntry` hooks to make API calls for updating the organizer's team members and fetching the organizer's data.\n\nThe `OrganizerTeamPage` component is defined as a functional component that takes an object with `category` and `query` properties as arguments. The component renders a team management page for an organizer. The page contains a header, a form for adding team members, and a form for managing team members. The component uses the `useEntryHeader`, `useEntry`, `useSaveDate`, `useUserIsOwner`, and `useConfirmExit` hooks to render the header, fetch the organizer's data, format the save date, check if the current user is the owner of the organizer, and handle form submission confirmation. The component uses the `Save` component to render a save button for the form. The component uses the `StyledEntryFormContainer` and `EntryFormWrapper` components to wrap the forms. The component uses the `useTeamAddForm` and `useTeamForm` hooks to render the forms for adding and managing team members.",
  "questions": "1. What is the purpose of the `useTeamAddForm` function?\n- The `useTeamAddForm` function is used to render a form for adding team members to an organizer's team.\n\n2. What is the purpose of the `useTeamForm` function?\n- The `useTeamForm` function is used to render a form for managing an organizer's team, including adding, editing, and deleting team members.\n\n3. What is the purpose of the `OrganizerTeamPage` component?\n- The `OrganizerTeamPage` component is used to display the team management functionality for an organizer, including the `useTeamAddForm` and `useTeamForm` forms, as well as a save button and confirmation message for unsaved changes."
}