{
  "fileName": "list.tsx",
  "filePath": "components/pages/organizer/list.tsx",
  "url": "https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/organizer/list.tsx",
  "summary": "The `OrganizerListPage` component is a React functional component that renders a page displaying a list of organizers. It imports various utility functions and components from other files in the project, including `useRouter` and `useContext` from the `next/router` and `react` packages respectively. \n\nThe component uses the `useCategories` hook to retrieve the list of available categories, and the `useLocale` hook to determine the current locale. It also uses the `useBreakpointOrWider` hook to determine whether the current viewport width is at least the `mid` breakpoint. \n\nThe component then retrieves various parameters related to the organizer list from the `EntryListContext` context, including the current page, number of entries per page, sort key, order, filters, and last entry ID. It also uses the `useOrganizerId` hook to retrieve the ID of the currently selected organizer. \n\nThe component then uses the `useList` hook to retrieve the list of organizers based on the retrieved parameters. If the viewport width is at least the `mid` breakpoint and the list has at least one entry, the component uses the `router.replace` function to update the URL with the ID of the last entry in the list, as well as the ID of the currently selected organizer and a `sub` parameter indicating that the \"info\" tab should be displayed. \n\nFinally, the component renders an `AppWrapper` component that wraps an `OrganizerList` component. If the viewport width is less than the `mid` breakpoint, the `OrganizerList` component is rendered with the `expanded` prop set to `false`, indicating that only the first few entries should be displayed. Otherwise, an empty string is rendered. \n\nOverall, the `OrganizerListPage` component provides a way to display a list of organizers and navigate between them using the URL. It also provides responsive behavior to ensure that the list is displayed appropriately on different viewport sizes.",
  "questions": "1. What is the purpose of this code?\n   - This code defines a React functional component for rendering a page that displays a list of organizers, with options for filtering and sorting the list.\n\n2. What external libraries or APIs does this code use?\n   - This code imports several modules from the project's own codebase, as well as the `next/router` and `react` libraries. It also uses the `WindowService` module and the `OrganizerList` and `CategoryPage` types from the project's `lib` directory.\n\n3. What is the significance of the `listEvaluated` state variable?\n   - The `listEvaluated` state variable is used to determine whether the `useEffect` hook should execute. When `listEvaluated` is `false`, the component returns `null`, and when it is `true`, the component renders the `AppWrapper` and `OrganizerList` components. The `useEffect` hook updates `listEvaluated` to `true` when the `list` variable is defined and not `null`."
}