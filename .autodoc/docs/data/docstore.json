[["0",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Admin/AdminContext.tsx)\n\nThe code defines an AdminContextProvider component that provides an AdminContext to its children. The AdminContext contains information about whether the admin mode is active, the active organizer ID, and methods to set these values. The component also defines a hook called useAdminMode that returns the admin mode status, the active organizer ID, and methods to start and quit the admin mode.\n\nThe AdminContextProvider component uses the useUser and useLocale hooks to get the user's authentication status and the current locale. It also uses the useRouter hook to get the current route and push new routes when the admin mode is started or quit.\n\nThe setActiveOrganizerId method sets the active organizer ID and saves it in a cookie with a name specified in the publicRuntimeConfig object. If the organizer ID is undefined, the cookie is deleted. The useEffect hook is used to check if the cookie exists and the admin mode is not active, then it sets the admin mode to active and sets the active organizer ID from the cookie. It also pushes a new route to the dashboard with the organizer ID as a query parameter.\n\nThe useAdminMode hook returns the admin mode status, the active organizer ID, and methods to start and quit the admin mode. The start method sets the admin mode to active, sets the active organizer ID, and pushes a new route to the dashboard with the organizer ID as a query parameter. The quit method sets the admin mode to inactive, sets the active organizer ID to undefined, and pushes a new route to the admin page.\n\nThis code is used to manage the admin mode and the active organizer ID in the Kulturdaten frontend project. The AdminContextProvider component is used to wrap components that need access to the admin mode status and the active organizer ID. The useAdminMode hook is used to get the admin mode status and the active organizer ID and to start and quit the admin mode. The setActiveOrganizerId method is used to set the active organizer ID and save it in a cookie.\n## Questions: \n 1. What is the purpose of the `AdminContext` and how is it used?\n- The `AdminContext` is used to manage the state of the admin mode and the active organizer ID. It is created using `React.createContext` and is used to provide the state and functions to its children components using `AdminContext.Provider`.\n\n2. What is the purpose of the `useAdminMode` hook and what does it return?\n- The `useAdminMode` hook is used to access the state and functions provided by the `AdminContext`. It returns an object with the `adminModeActive` boolean, the `activeOrganizerId` string, and the `start` and `quit` functions to respectively start and quit the admin mode.\n\n3. What is the purpose of the `AdminContextProvider` component and what props does it take?\n- The `AdminContextProvider` component is used to wrap its children components and provide the `AdminContext` state and functions to them. It takes a single prop `children` which is a `ReactNode` representing the children components to be wrapped.","metadata":{"source":".autodoc/docs/markdown/components/Admin/AdminContext.md"}}],["1",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/AppTokenList/index.tsx)\n\nThe code defines a React component called `AppTokenList` that renders a list of API tokens. The component takes two props: `tokens`, an array of API tokens, and `onRemove`, a function that removes a token when called with the token ID. \n\nThe component uses Emotion to style its elements. It defines several styled components, including `StyledAppTokenList`, `StyledAppTokenListItem`, `StyledAppTokenListItemToken`, `StyledAppTokenListItemTokenLabel`, `StyledAppTokenListItemTokenContent`, `StyledAppTokenListItemTokenContentInner`, `StyledAppTokenListItemTokenRemove`, `StyledAppTokenListItemDetails`, `StyledAppTokenListItemDetailsItem`, `StyledAppTokenListItemDetailsLabel`, and `StyledAppTokenListItemDetailsContent`. These styled components define the layout and styling of the token list and its elements.\n\nThe `AppTokenList` component maps over the `tokens` array and renders a `StyledAppTokenListItem` for each token. Each `StyledAppTokenListItem` contains a `StyledAppTokenListItemToken` and a `StyledAppTokenListItemDetails`. The `StyledAppTokenListItemToken` displays the token value, a remove button, and the token title. The `StyledAppTokenListItemDetails` displays the token name, description, and URL.\n\nWhen the remove button is clicked, the `onRemove` function is called with the token ID. Before removing the token, the component displays a confirmation dialog using the `useConfirmScreen` hook. The confirmation dialog displays a message asking the user to confirm the removal of the token.\n\nOverall, this component is used to display a list of API tokens and allow the user to remove them. It is likely used in a larger settings or account management page where users can manage their API tokens.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines the styling and functionality for a component called `AppTokenList`, which displays a list of API tokens and allows the user to remove them.\n\n2. What external libraries or dependencies does this code use?\n- This code uses the `@emotion/styled` library for styling, as well as several components and utilities from the project's own codebase (`Button`, `useT`, `useConfirmScreen`, `mq`, `Breakpoint`).\n\n3. What props does the `AppTokenList` component accept?\n- The `AppTokenList` component accepts an array of `tokens` (each with `name`, `description`, `url`, `token`, and `id` properties) and a function `onRemove` that takes a `tokenId` and returns a `Promise<void>`.","metadata":{"source":".autodoc/docs/markdown/components/AppTokenList/index.md"}}],["2",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/ComponentLoader/index.tsx)\n\nThe code above defines a React functional component called `ComponentLoader`. This component is responsible for rendering a loading spinner with a text message indicating that the application is currently loading. \n\nThe loading spinner is defined in the `StyledLoadingScreenWobbler` component, which is imported from the `../Loading/LoadingScreen` module. This component is styled using the `StyledLoader` and `StyledLoaderInner` styled components, which define the layout and positioning of the spinner and text message. \n\nThe `StyledLoader` component defines the outer container for the loading spinner and sets its width, height, padding, background color, and border radius. The `StyledLoaderInner` component defines the inner container for the spinner and text message and sets its position, width, height, and alignment properties. The `StyledLoaderInnerText` component sets the font size, line height, position, and color of the text message. \n\nThe `useT` hook is imported from the `../../lib/i18n` module and is used to translate the text message into the user's preferred language. The translated text is passed to the `StyledLoaderInnerText` component as a prop. \n\nThis component can be used throughout the application to indicate that a particular component or page is currently loading. It provides a consistent and visually appealing loading experience for the user. \n\nExample usage:\n\n```\nimport { ComponentLoader } from './ComponentLoader';\n\nconst MyComponent: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // simulate loading data\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <ComponentLoader />\n      ) : (\n        <div>Loaded content goes here</div>\n      )}\n    </>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React component called `ComponentLoader` that displays a loading screen with a wobbler animation and a loading text.\n\n2. What is the role of the `useT` hook?\n   - The `useT` hook is used to access the translation function provided by the `i18n` library, which is used to translate the loading text displayed by the component.\n\n3. What is the purpose of the `StyledLoader` and `StyledLoaderInner` components?\n   - The `StyledLoader` component defines the outer container of the loading screen, while the `StyledLoaderInner` component defines the inner container that holds the wobbler animation and loading text.","metadata":{"source":".autodoc/docs/markdown/components/ComponentLoader/index.md"}}],["3",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Confirm/ConfirmContext.tsx)\n\nThe code defines a React context provider for a confirmation dialog screen. The context provider is used to manage the state of the confirmation dialog screen and make it available to child components that need to display the dialog.\n\nThe `ConfirmContext` type defines the shape of the context object, which has a single property called `confirmScreen`. The `confirmScreen` property is an object that contains several state variables and functions that are used to manage the confirmation dialog screen. These include `render`, `visible`, `confirmButtonText`, `onConfirm`, `title`, `message`, and `condition`. Each of these variables has a corresponding setter function that can be used to update its value.\n\nThe `ConfirmContextProvider` component is a React functional component that takes a `children` prop and returns a `ConfirmContext.Provider` component. The `ConfirmContext.Provider` component wraps the `children` prop and makes the `confirmScreen` object available to all child components that consume the context.\n\nThe `ConfirmContextProvider` component also defines several state variables using the `useState` hook. These variables are used to manage the state of the confirmation dialog screen. The `useRouter` hook is used to get access to the Next.js router object, which is used to listen for route changes and close the confirmation dialog screen when the user navigates away from the current page.\n\nThe `useKeyboard` hook is used to listen for the `Escape` key and close the confirmation dialog screen when the user presses the key. The `useEffect` hook is used to register and unregister the `handleRouteChange` function as a listener for the `routeChangeStart` event.\n\nThe `ConfirmContextProvider` component returns the `ConfirmContext.Provider` component, which wraps the `children` prop and renders the `ConfirmScreen` component if the `render` state variable is `true`. The `ConfirmScreen` component is responsible for rendering the confirmation dialog screen and handling user input.\n\nOverall, this code provides a way to manage the state of a confirmation dialog screen in a React application and make it available to child components that need to display the dialog. It also provides functionality for closing the dialog screen when the user navigates away from the current page or presses the `Escape` key.\n## Questions: \n 1. What is the purpose of the `ConfirmContext` and what does it contain?\n- The `ConfirmContext` is a React context that contains a `confirmScreen` object with various properties and methods related to displaying a confirmation screen.\n2. What is the purpose of the `ConfirmContextProvider` component?\n- The `ConfirmContextProvider` component is a wrapper component that provides the `ConfirmContext` to its children components via the `React.createContext` API.\n3. What is the purpose of the `useKeyboard` and `useEffect` hooks in this code?\n- The `useKeyboard` hook listens for a specific keyboard event and performs an action when it occurs, while the `useEffect` hook sets up and cleans up an event listener for a specific router event.","metadata":{"source":".autodoc/docs/markdown/components/Confirm/ConfirmContext.md"}}],["4",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Confirm/ConfirmScreen.tsx)\n\nThe code defines a React component called `ConfirmScreen` that renders a modal dialog box with a confirmation message and two buttons: one to confirm the action and another to cancel it. The component takes several props, including `title`, `message`, `visible`, `onConfirm`, `onCancel`, `confirmButtonText`, and `condition`. \n\nThe `visible` prop determines whether the modal is displayed or not. The `title` prop is used to set the title of the modal. The `message` prop is used to set the message displayed in the modal. The `onConfirm` prop is a callback function that is called when the user clicks the confirm button. The `onCancel` prop is a callback function that is called when the user clicks the cancel button. The `confirmButtonText` prop is used to set the text of the confirm button. The `condition` prop is an optional object that defines a condition that must be met before the user can confirm the action. \n\nThe `ConfirmScreen` component is styled using the `styled-components` library. The modal is positioned fixed at the top left of the screen and has a dark overlay to dim the background. The content of the modal is centered and has a white background. The title of the modal is displayed in a yellow bar at the top of the modal, along with an icon. The message is displayed below the title. If a condition is defined, an input field is displayed below the message that the user must fill in correctly before the confirm button is enabled. The confirm and cancel buttons are displayed at the bottom of the modal. \n\nThe `useConfirmScreen` hook is also defined in this file. It returns a function that takes several props and sets the state of the `ConfirmScreen` component accordingly. This hook is used to display the confirmation modal throughout the application. \n\nOverall, this code provides a reusable and customizable confirmation modal that can be used to confirm actions throughout the application.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `ConfirmScreen` and a hook called `useConfirmScreen` that can be used to display a confirmation dialog with a message, title, and optional condition input.\n\n2. What are the dependencies of this code?\n- This code imports several dependencies including `styled` and `css` from `@emotion`, various React hooks such as `useCallback` and `useState`, and other components and utilities from within the project.\n\n3. What props can be passed to the `ConfirmScreen` component?\n- The `ConfirmScreen` component accepts several props including `title`, `visible`, `onConfirm`, `onCancel`, `message`, `confirmButtonText`, and `condition`. These props are used to customize the content and behavior of the confirmation dialog.","metadata":{"source":".autodoc/docs/markdown/components/Confirm/ConfirmScreen.md"}}],["5",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Contacts/index.tsx)\n\nThe code defines a React component called `Contacts` that renders a list of contact information. The component takes in an array of `Contact` objects and a callback function `onChange` as props. The `Contact` type is defined elsewhere in the codebase and contains information about a contact, such as their name, phone number, and email address.\n\nThe component renders each `Contact` object as a row in a table-like layout. Each row contains input fields for the contact's name, phone number, and email address, as well as a button to remove the contact from the list. The name input field is rendered for each language specified in the `contentLanguages` array, which is defined in a separate file. The language-specific names are stored in the `translations` property of the `Contact` object.\n\nThe `onChange` callback is called whenever the user modifies any of the input fields. The callback is passed an updated array of `Contact` objects that reflects the changes made by the user. The `Contacts` component is responsible for rendering the updated list of contacts.\n\nThe code uses Emotion, a CSS-in-JS library, to define the styles for the component. The styles define the layout and appearance of the table-like structure, including the borders, padding, and font sizes. The styles also define the appearance of the input fields and the remove button.\n\nOverall, the `Contacts` component provides a reusable way to display and edit a list of contact information. It can be used in various parts of the application where contact information needs to be collected or displayed.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `Contacts` that renders a list of contacts with editable fields for name, phone, and email, as well as the ability to add and remove contacts.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several libraries and modules, including `@emotion/styled`, `@emotion/react`, and `../../lib/api/types/contact`. It also imports various components from the project's own codebase, such as `Button`, `Input`, and `mq`.\n\n3. What is the role of the `onChange` prop passed to the `Contacts` component?\n- The `onChange` prop is a callback function that is called whenever the user makes a change to the list of contacts. It receives the updated list of contacts as an argument and is responsible for updating the state of the parent component that renders the `Contacts` component.","metadata":{"source":".autodoc/docs/markdown/components/Contacts/index.md"}}],["6",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Dasboard/DasboardGrid.tsx)\n\nThe code above is a styled component that defines the layout of the dashboard grid in the kulturdaten-frontend project. The purpose of this code is to provide a responsive grid layout for the dashboard that adapts to different screen sizes. \n\nThe `DashboardGrid` component is created using the `styled` function from the `@emotion/styled` library. It takes in a `div` element and applies CSS styles to it. The `contentGrid` and `mq` functions are imported from the `../globals/Constants` file and the `Breakpoint` enum is imported from the `../../lib/WindowService` file.\n\nThe `contentGrid` function is a helper function that returns a CSS grid layout with a single column. The `mq` function is a media query helper function that takes in a breakpoint and returns a CSS media query string. The `Breakpoint` enum defines the different screen sizes that the media queries will target.\n\nThe `DashboardGrid` component sets the `row-gap` property to `3.75rem` for small screens. It then uses the `mq` function to apply different `row-gap` values for medium, wide, and ultra screen sizes. This allows the grid layout to adjust its spacing between rows based on the screen size.\n\nThis component can be used in the larger project by importing it into other components that need to display a dashboard grid. For example, a `Dashboard` component could use the `DashboardGrid` component to define its layout. \n\nHere is an example of how the `DashboardGrid` component could be used in a `Dashboard` component:\n\n```\nimport React from 'react';\nimport { DashboardGrid } from './DashboardGrid';\n\nconst Dashboard = () => {\n  return (\n    <DashboardGrid>\n      {/* Dashboard content goes here */}\n    </DashboardGrid>\n  );\n};\n\nexport default Dashboard;\n```\n\nOverall, the `DashboardGrid` component provides a flexible and responsive grid layout for the dashboard in the kulturdaten-frontend project.\n## Questions: \n 1. What is the purpose of the `contentGrid` function and `mq` function imported from other files?\n   - The `contentGrid` function and `mq` function are imported from other files to provide styling constants and media query functionality to the `DashboardGrid` component.\n2. What is the significance of the `row-gap` property being set to different values at different breakpoints?\n   - The `row-gap` property sets the vertical spacing between rows in the `DashboardGrid` component. By setting different values at different breakpoints, the spacing can be adjusted to optimize the layout for different screen sizes.\n3. What is the purpose of the `DashboardGrid` component in the overall project?\n   - Without more context, it is unclear what the `DashboardGrid` component is used for in the project. However, based on its name and the fact that it uses a grid layout, it is possible that it is used to display a dashboard or other data visualization in the frontend of the application.","metadata":{"source":".autodoc/docs/markdown/components/Dasboard/DasboardGrid.md"}}],["7",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Dasboard/DashboardLinkList.tsx)\n\nThe code defines a set of styled components and React functional components that are used to render a list of links in a dashboard view. The `DashboardLinkList` component takes in an array of `StandardLink` objects, which have a `title` and `href` property, and renders them as a list of clickable links. The `DashboardLinkList` component also takes in an optional `title` and `text` property, which are used to display a title and description for the list.\n\nThe `DashboardLinkListLink` component is used to render individual links in the list. It takes in a `StandardLink` object and renders it as either an internal or external link, depending on the `type` property of the object. If the `type` is `internal`, the link is rendered as an `InternalDashboardLinkListLink` component, which wraps a `Link` component from the `next/link` library. If the `type` is `external`, the link is rendered as a regular `a` tag with the `href` property set to the link's URL.\n\nThe `InternalDashboardLinkListLink` component is used to render internal links. It takes in a `StandardLinkInternal` object and renders it as a clickable link that navigates to the specified URL using the `Link` component from the `next/link` library. The link is styled using the `StyledDashboardLinkListLink` component, which applies a set of CSS styles to the link.\n\nThe CSS styles for the components are defined using the `styled` function from the `@emotion/styled` library. The styles define the font size, line height, color, and layout of the link list and its components. The styles also define a hover effect for the links, which displays a gray background when the link is hovered over.\n\nOverall, this code provides a reusable set of components for rendering a list of links in a dashboard view. The components can be customized using CSS styles and can be used in other parts of the project where a list of links needs to be displayed.\n## Questions: \n 1. What is the purpose of the `DashboardLinkList` component?\n- The `DashboardLinkList` component is used to display a list of links with different types (internal or external) and styles.\n\n2. What is the role of the `DashboardLinkListLink` component?\n- The `DashboardLinkListLink` component is responsible for rendering a single link within the `DashboardLinkList` component, based on its type (internal or external).\n\n3. What is the purpose of the `useT` hook?\n- The `useT` hook is used to access the translation function provided by the i18n library, which is used to translate text in the application.","metadata":{"source":".autodoc/docs/markdown/components/Dasboard/DashboardLinkList.md"}}],["8",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Dasboard/DashboardRow.tsx)\n\nThe code above defines a React component called `DashboardRow` that is used to display a row of content on a dashboard. The component is styled using the `styled` function from the `@emotion/styled` library, which allows for the creation of CSS-in-JS styles. The `Breakpoint` enum and `mq` function are imported from the `WindowService` and `Constants` modules, respectively, to define media queries for responsive design.\n\nThe `StyledDashboardRow` component is a styled `div` element that uses CSS grid to display its children in a column layout. It spans the entire width of its parent container and has a vertical gap of 2.25rem between its children. The `StyledDashboardRowTitle` component is a styled `h2` element that is used to display a title for the row. It has a font size of `var(--font-size-600)`, a line height of `var(--line-height-600)`, and a font weight of 700.\n\nThe `StyledDashboardRowContent` component is a styled `div` element that also uses CSS grid to display its children. It has a single column layout and a vertical gap of 2.25rem between its children. However, when the screen width is at least `Breakpoint.mid` (defined as 768px), it switches to a 12-column layout with a horizontal gap of 1.5rem between its children.\n\nThe `DashboardRow` component is a functional component that takes in three props: `children`, `title`, and `id`. The `children` prop is used to render the content of the row, while the `title` prop is used to render the title of the row. If the `title` prop is provided, a `StyledDashboardRowTitle` component is rendered with the `id` prop as its `id` attribute. The `children` prop is rendered within a `StyledDashboardRowContent` component.\n\nOverall, this code defines a reusable component that can be used to display rows of content on a dashboard. It provides a consistent layout and styling for the rows, and allows for customization of the row title and content. The responsive design ensures that the rows are displayed in a readable and aesthetically pleasing way on screens of different sizes. An example usage of this component might look like:\n\n```\n<DashboardRow title=\"My Dashboard Row\" id=\"my-row\">\n  <p>This is some content for my dashboard row.</p>\n  <p>It can contain any React components or HTML elements.</p>\n</DashboardRow>\n```\n## Questions: \n 1. What is the purpose of the `DashboardRow` component?\n- The `DashboardRow` component is a React functional component that renders a styled grid layout with a title and content.\n\n2. What is the significance of the `mq` function and `Breakpoint` enum?\n- The `mq` function is used to apply CSS media queries based on the current breakpoint defined in the `Breakpoint` enum, which is an object that maps breakpoint names to pixel values.\n\n3. What is the role of the `DashboardRowProps` interface?\n- The `DashboardRowProps` interface defines the props that can be passed to the `DashboardRow` component, including `children`, `title`, and `id`.","metadata":{"source":".autodoc/docs/markdown/components/Dasboard/DashboardRow.md"}}],["9",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Dasboard/DashboardTile.tsx)\n\nThe code defines a React component called `DashboardTile` that renders a tile used in a dashboard. The tile can have a title, content, and an optional digit. It can also be disabled, have a \"done\" state, and a link. The component is styled using the `styled` function from the `@emotion/styled` library and the `css` function from the `@emotion/react` library.\n\nThe `DashboardTile` component is composed of several sub-components, each with its own styling. The main component is `StyledDashboardTile`, which defines the box-shadow, border-radius, and grid-column properties of the tile. It also has two optional props: `disabled` and `isDone`, which are used to disable the tile and show a \"done\" state, respectively.\n\nThe `StyledDashboardTileContainer` component is used to contain the tile's content and digit. It has a flex layout and a mask-image property that creates a gradient effect. The `StyledDashboardTileDone` component is used to show the \"done\" state of the tile. It has a black background, white text, and a checkmark icon. The `StyledDashboardTileDoneCheck` and `StyledDashboardTileDoneText` components are used to style the checkmark icon and the text, respectively.\n\nThe `StyledDashboardTileDigit` component is used to display the digit on the tile. It has a fixed size, a grey background, and a bold font. The `StyledDashboardTileContainerChildren` component is used to contain the tile's content. It has a flex layout and a white background. The `StyledDashboardTileTitle` component is used to display the tile's title. It has a bold font, a padding, and a background color that depends on the tile's variant. The `StyledDashboardTileContent` component is used to contain the tile's content. It has a flex layout and a white background.\n\nThe `DashboardTileText` and `DashboardTileTextP` components are used to style the text content of the tile. They have a font size, a line height, and a padding.\n\nThe `DashboardTile` component takes several props: `title`, `children`, `link`, `gridColumn`, `digit`, `disabled`, `variant`, and `done`. The `title` prop is used to set the tile's title. The `children` prop is used to set the tile's content. The `link` prop is used to add a link to the tile. The `gridColumn` prop is used to set the tile's grid column. The `digit` prop is used to set the tile's digit. The `disabled` prop is used to disable the tile. The `variant` prop is used to set the tile's variant. The `done` prop is used to show the \"done\" state of the tile.\n\nOverall, the `DashboardTile` component is a reusable component that can be used to create tiles for a dashboard. It provides a flexible and customizable way to display information and actions in a dashboard.\n## Questions: \n 1. What is the purpose of the `DashboardTile` component?\n- The `DashboardTile` component is used to render a tile on a dashboard with a title, content, and optional digit, link, and done state.\n\n2. What is the significance of the `DashboardTileVariant` enum?\n- The `DashboardTileVariant` enum is used to specify the variant of the `DashboardTile` component, which can be either \"default\" or \"hint\". The \"hint\" variant has a yellow background color.\n\n3. What is the purpose of the `StyledDashboardTileDone` and `StyledDashboardTileDoneCheck` components?\n- The `StyledDashboardTileDone` and `StyledDashboardTileDoneCheck` components are used to render a checkmark and text overlay on a `DashboardTile` when it is in a \"done\" state.","metadata":{"source":".autodoc/docs/markdown/components/Dasboard/DashboardTile.md"}}],["10",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Dasboard/DashboardTileLink.tsx)\n\nThis code defines three React components that are used to render different types of links/buttons in the dashboard of the Kulturdaten-frontend project. \n\nThe first component is `StyledDashboardTileLink`, which is a styled anchor tag that renders a link with an arrow icon on the right side. It takes an optional `disabled` prop that, when set to true, disables the link and reduces its opacity. The component also applies some responsive styles based on the screen size, such as increasing the font size and icon size on larger screens.\n\nThe second component is `InternalDashboardTileLink`, which is a wrapper around `StyledDashboardTileLink` that adds support for internal links using the `next/link` library. It takes the same props as `StyledDashboardTileLink`, plus a `title` prop that is used as the link's title attribute. The component uses the `useT` hook from the `i18n` library to translate the link icon's alt text.\n\nThe third component is `DashboardTileLink`, which is a higher-level component that decides whether to render an internal or external link based on the `type` prop. If `type` is set to `internal`, it renders an `InternalDashboardTileLink` component with the same props. If `type` is set to `external`, it renders a modified version of `StyledDashboardTileLink` that opens the link in a new tab and uses a different icon. If `type` is set to anything else, it throws an error.\n\nFinally, there is `DashboardTileButton`, which is a variant of `StyledDashboardTileLink` that renders a button instead of a link. It takes a `title` prop for the button text and an `onClick` prop for the click handler. It also takes an optional `disabled` prop that works the same way as in `StyledDashboardTileLink`.\n\nThese components are used throughout the Kulturdaten-frontend project to render links and buttons in the dashboard. By using these components, developers can ensure consistent styling and behavior across the entire application. For example, a developer might use `DashboardTileLink` to render a link to an external website, or `DashboardTileButton` to render a button that adds a new item to a list.\n## Questions: \n 1. What is the purpose of the `DashboardTileLink` and `DashboardTileButton` components?\n- The `DashboardTileLink` component is used to render links within a dashboard tile, while the `DashboardTileButton` component is used to render buttons within a dashboard tile.\n2. What is the significance of the `StandardLinkType` enum?\n- The `StandardLinkType` enum is used to specify whether a link is internal or external, and is used to determine which type of link component to render.\n3. What is the purpose of the `useT` hook?\n- The `useT` hook is used to access the translation function provided by the i18n library, allowing for localized text to be displayed in the component.","metadata":{"source":".autodoc/docs/markdown/components/Dasboard/DashboardTileLink.md"}}],["11",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Dasboard/index.tsx)\n\nThe code above defines two styled components and two React components that are used in the Kulturdaten Frontend project. The purpose of this code is to provide consistent styling for the dashboard greeting and wrapper components across different screen sizes.\n\nThe first styled component, `StyledDashboardGreeting`, is a container for the dashboard greeting text. It is a flex container with a column direction and a row gap of 0.75rem. It also has different padding values depending on the screen size, which are defined using the `mq` function from the `Constants` module. The `mq` function takes a breakpoint value and returns a CSS media query string that targets screens larger than that breakpoint. The `Breakpoint` enum defines the different breakpoint values used in the project.\n\nThe second styled component, `StyledDashboardGreetingHeadline`, is a styled `h1` element that defines the styling for the dashboard greeting headline text. It has a font size, line height, and font weight that are defined using CSS variables.\n\nThe third styled component, `StyledDashboardGreetingSubline`, is a styled `p` element that defines the styling for the dashboard greeting subline text. It has a font size, line height, and font weight that are also defined using CSS variables.\n\nThe first React component, `DashboardGreeting`, is a functional component that takes two props: `children` and `subline`. The `children` prop is used as the text for the dashboard greeting headline, while the `subline` prop is used as the text for the dashboard greeting subline. If the `subline` prop is not provided, the `StyledDashboardGreetingSubline` component is not rendered.\n\nThe second React component, `DashboardWrapper`, is a styled `div` element that provides consistent padding for the dashboard content. Like the `StyledDashboardGreeting` component, it has different padding values depending on the screen size.\n\nOverall, this code provides a reusable and responsive styling solution for the dashboard greeting and wrapper components in the Kulturdaten Frontend project. It allows for consistent styling across different screen sizes and provides a clear separation of concerns between the styling and functionality of these components.\n## Questions: \n 1. What is the purpose of the `DashboardGreeting` component?\n   - The `DashboardGreeting` component is used to render a greeting message on a dashboard page, with an optional subline.\n\n2. What is the purpose of the `DashboardWrapper` component?\n   - The `DashboardWrapper` component is used to wrap the content of a dashboard page and provide padding at the bottom, with different amounts of padding based on the screen size.\n\n3. What is the purpose of the `mq` function and `Breakpoint` enum?\n   - The `mq` function is used to apply CSS styles based on the screen size, using the `Breakpoint` enum to define the different screen sizes.","metadata":{"source":".autodoc/docs/markdown/components/Dasboard/index.md"}}],["12",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DateCreate/story.tsx)\n\nThis code defines a Storybook story for the `DateCreate` component and exports it as a default export. The `DateCreate` component is imported from the current directory's `index.ts` file, and the `Language` enum is imported from the `config/locale` directory. \n\nThe `StoryWrapper` constant is defined using the `styled` function from the `@emotion/styled` package. It sets some CSS styles for a div element that wraps the `DateCreate` component in the story. The `DateCreateDefaultStory` constant is defined as a function that returns a JSX element. It renders the `DateCreate` component with some props, including an `onSubmit` function that does nothing and an object that maps language codes to offer titles. \n\nThe purpose of this code is to provide a visual representation of the `DateCreate` component in Storybook, a tool for developing and testing UI components in isolation. The `DateCreate` component is likely a form for creating a new date or event, and the `DateCreateDefaultStory` function renders it with some default props to show how it looks and behaves. Developers can use this story to test the component's functionality and appearance without having to navigate to the actual page where it is used in the larger project. \n\nHere is an example of how the `DateCreate` component might be used in the larger project:\n\n```jsx\nimport { useState } from 'react';\nimport { DateCreate } from './components';\n\nfunction CreateDatePage() {\n  const [formData, setFormData] = useState({});\n\n  function handleSubmit() {\n    // send formData to server\n  }\n\n  return (\n    <div>\n      <h1>Create a New Date</h1>\n      <DateCreate onSubmit={handleSubmit} offerTitles={{ de: 'Angebot', en: 'Offer' }} />\n    </div>\n  );\n}\n```\n\nIn this example, the `CreateDatePage` component renders the `DateCreate` component with an `onSubmit` function that sends the form data to the server when the user submits the form. The `offerTitles` prop is passed as an object that maps the German and English language codes to the corresponding offer titles.\n## Questions: \n 1. What is the purpose of the `DateCreate` component?\n- The `DateCreate` component is imported from the `.` file and is used in the `DateCreateDefaultStory` story.\n\n2. What is the purpose of the `StoryWrapper` styled component?\n- The `StoryWrapper` styled component is used to wrap the `DateCreate` component in the `DateCreateDefaultStory` story and apply some styling to it.\n\n3. What is the purpose of the `offerTitles` prop passed to the `DateCreate` component?\n- The `offerTitles` prop is an object that contains the titles of the offer in different languages and is used to display the title of the offer in the appropriate language.","metadata":{"source":".autodoc/docs/markdown/components/DateCreate/story.md"}}],["13",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DateList/DateListRow.tsx)\n\nThe code above defines a React component called `DateListRow` that renders a row in a table of dates. The component takes several props, including `from`, `to`, `title`, `status`, `body`, `checked`, `onChange`, `editable`, and `disabled`. \n\nThe `DateListRow` component renders a table row (`<tr>`) with several cells (`<td>`) that display information about a date. The first cell contains a checkbox that allows the user to select the date. The second cell displays the start date of the event, and the third cell displays the end date of the event (if it exists). The fourth cell displays the title of the event. The fifth cell displays a status flag that indicates whether the event is confirmed, tentative, or cancelled. The sixth cell contains a button that toggles the display of additional information about the event.\n\nThe `DateListRow` component uses several styled components to define the appearance of the table cells. The `StyledDateListRowCell` component defines the appearance of each cell, including its width and background color. The `StyledDateListRow` component defines the appearance of the entire row, including its display style and border. The `StyledDateListItemCheckbox`, `StyledDateListItemText`, `StyledDateListItemStatus`, `StyledDateListItemExpand`, and `StyledDateListItemBody` components define the appearance of the checkbox, text, status flag, expand button, and collapsible content, respectively.\n\nThe `DateListRow` component uses several utility functions and hooks to format dates, generate unique IDs, and manage the state of the collapsible content. The `useDate` hook formats dates using the `DateFormat.dayDateTime` format. The `usePseudoUID` hook generates a unique ID for the checkbox. The `useCollapsable` hook manages the state of the collapsible content and returns a rendered version of the content that can be displayed or hidden based on the state of the expand button.\n\nOverall, the `DateListRow` component provides a reusable way to display information about dates in a table format. It allows users to select dates, view basic information about events, and toggle the display of additional information about events. The component can be used in conjunction with other components in the `kulturdaten-frontend` project to build more complex user interfaces for managing cultural events.\n## Questions: \n 1. What is the purpose of the `DateListRow` component?\n- The `DateListRow` component is used to render a row in a table that displays information about a date, including its start and end times, title, and status.\n\n2. What is the purpose of the `useCollapsable` hook?\n- The `useCollapsable` hook is used to create a collapsible section of content that can be expanded or collapsed by the user, and returns the necessary state and functions to manage the collapsible behavior.\n\n3. What is the purpose of the `DateStatusFlag` component?\n- The `DateStatusFlag` component is used to display a visual indicator of the status of a date, such as whether it is cancelled, postponed, or sold out. It can also be made editable or disabled depending on the props passed to it.","metadata":{"source":".autodoc/docs/markdown/components/DateList/DateListRow.md"}}],["14",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DateList/DateStatusFlag.tsx)\n\nThe code defines a React component called `DateStatusFlag` that displays a status flag for an event date. The component takes in three props: `status`, `disabled`, and `editable`. The `status` prop is an enum value from the `OfferDateStatus` type, which is imported from another file. The `disabled` prop is a boolean that determines whether the flag should be displayed as disabled. The `editable` prop is also a boolean that determines whether the flag should be displayed as editable.\n\nThe component uses the `useT` hook from the `i18n` module to translate the status value into a localized string. The translation is done using a mapping function called `OfferDateStatusToL10nMap`, which takes in the `editable` prop and returns an object that maps each `OfferDateStatus` value to a string key. The `OfferDateStatusToL10nMap` function is defined using a TypeScript type that ensures that the returned object has the correct keys and values.\n\nThe component is styled using the `styled` function from the `@emotion/styled` module. The `StyledDateStatusFlag` component is defined as a styled `div` element that takes in the `status` and `disabled` props and sets the background color and other styles based on the `status` prop.\n\nThe `DateStatusFlag` component returns the `StyledDateStatusFlag` component with the `status` and `disabled` props passed in. The localized status string is displayed inside a `p` element inside the `StyledDateStatusFlag` component.\n\nThis component can be used in the larger project to display the status of an event date in a visually appealing way. The `DateStatusFlag` component can be used in conjunction with other components to build a larger UI for displaying event information. The `OfferDateStatus` enum can also be used in other parts of the project to represent the status of an event date.\n## Questions: \n 1. What is the purpose of the `DateStatusFlag` component?\n   - The `DateStatusFlag` component is used to display the status of an offer date.\n2. What is the `OfferDateStatusToL10nMap` function and what does it do?\n   - The `OfferDateStatusToL10nMap` function is a mapping function that maps each `OfferDateStatus` to a corresponding localized string based on whether the date is editable or not.\n3. What is the purpose of the `StyledDateStatusFlag` component and what does it style?\n   - The `StyledDateStatusFlag` component is a styled component that styles the flag element that displays the status of the offer date. It styles the font size, line height, padding, border radius, and background color of the flag based on the status and whether it is disabled or not.","metadata":{"source":".autodoc/docs/markdown/components/DateList/DateStatusFlag.md"}}],["15",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DateList/index.tsx)\n\nThe code defines a React component called `DateList` that renders a table of dates. The component takes in several props, including an array of dates, a boolean indicating whether the dates are editable, and functions to handle changes to the dates and to delete dates. \n\nThe component renders a table with a header row and a body containing one row for each date. The header row contains column titles for the date fields, including \"From\", \"To\", \"Title\", and \"Status\". The body rows contain the date information, including the start and end dates, the title of the event, and the status of the date. \n\nThe component also includes a checkbox for each date that allows the user to select multiple dates for deletion. The component also includes sorting functionality for the \"From\" and \"To\" columns, which can be activated by clicking on the column header. \n\nThe `useDateList` hook is also defined, which returns the `DateList` component along with functions to get and set the currently checked date IDs. \n\nOverall, this component is used to display and manage a list of dates for events in the larger project.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file contains the implementation of a React component called `DateList` which renders a list of dates with various details and options for editing and deleting.\n\n2. What are the dependencies of this code file?\n- This code file imports several modules from external libraries such as `@emotion/styled`, `react`, and `react-feather`, as well as several modules from other files within the same project.\n\n3. What are some of the props that can be passed to the `DateList` component?\n- Some of the props that can be passed to the `DateList` component include `dates` (an array of date objects to be rendered), `editable` (a boolean indicating whether the list is editable or not), `onChange` (a function to be called when a date is changed), `checkedDateIds` and `setCheckedDateIds` (an array of IDs of checked dates and a function to set the checked IDs, respectively), `offerTitles` (an object containing localized titles for offers), `onDelete` (a function to be called when a date is deleted), and `fromSort` and `endSort` (objects containing information about sorting options for the \"from\" and \"to\" dates, respectively).","metadata":{"source":".autodoc/docs/markdown/components/DateList/index.md"}}],["16",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DateList/story.tsx)\n\nThis code defines a React component that renders a list of dates for a cultural event. The component is designed to be used in the larger project for displaying event information to users. \n\nThe component imports the `useDateList` hook from a file located in the same directory. This hook takes an array of `OfferDate` objects and an object containing translations for the offer titles as arguments. The `OfferDate` objects represent individual dates for the event and contain information such as the start and end times, status, and ticket URL. The translations object maps language codes to offer titles in that language. \n\nThe component then renders the `renderedDateList` property returned by the `useDateList` hook. This property is a React element that displays the list of dates in a formatted manner. \n\nThe component also defines a `StoryWrapper` and `StoryContainer` styled components for use in the Storybook documentation tool. The `EmbeddedStory` component uses the `useDateList` hook to generate the `renderedDateList` property and renders it within the `StoryContainer`. \n\nFinally, the component exports a `DateListDefaultStory` story for use in Storybook. This story renders the `EmbeddedStory` component. \n\nOverall, this code defines a reusable React component for displaying a list of dates for a cultural event. It uses the `useDateList` hook to generate the list and provides a Storybook story for documentation purposes.\n## Questions: \n 1. What is the purpose of the `useDateList` hook being imported?\n- The `useDateList` hook is being imported to be used in the `EmbeddedStory` component to render a list of dates.\n\n2. What is the purpose of the `dummyDates` array?\n- The `dummyDates` array is a sample data set used to test the `useDateList` hook and render a list of dates.\n\n3. What is the purpose of the `DateListDefaultStory` export?\n- The `DateListDefaultStory` export is a Storybook story that renders the `EmbeddedStory` component, which in turn renders a list of dates using the `useDateList` hook.","metadata":{"source":".autodoc/docs/markdown/components/DateList/story.md"}}],["17",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DateRecurrence/index.tsx)\n\nThe code defines a React component called `DateRecurrence` that provides a UI for selecting a recurring date pattern. The component takes several props, including `startDate` and `latestDate` which are used to set the minimum and maximum dates that can be selected, and `recurrence` which is a string representation of the selected recurrence pattern. The component uses the `useState`, `useMemo`, and `useEffect` hooks from React to manage its state and lifecycle.\n\nThe `DateRecurrence` component renders a form with several input fields that allow the user to select the frequency, interval, weekdays, and end date of the recurrence pattern. The component uses the `RRule` and `Frequency` classes from the `rrule` library to generate and parse recurrence rules. The `DayPicker` and `Input` components are used to provide UI for selecting weekdays and dates, respectively.\n\nThe `useDateRecurrence` hook is also defined in the code, which returns an object containing the `renderedDateRecurrence` component and an `initViaRecurrenceString` function. The `initViaRecurrenceString` function takes a recurrence string as input and initializes the state of the `DateRecurrence` component based on the parsed recurrence rule.\n\nOverall, this code provides a reusable UI component for selecting recurring date patterns, which can be used in other parts of the `kulturdaten-frontend` project. The `useDateRecurrence` hook also provides a convenient way to initialize the component state based on a recurrence string.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `DateRecurrence` and a hook called `useDateRecurrence` that can be used to render and manage a UI for setting up recurring dates.\n\n2. What external libraries does this code use?\n- This code uses several external libraries including `react`, `rrule`, `emotion`, `date-fns`, and a custom `uid` library.\n\n3. What props does the `DateRecurrence` component accept?\n- The `DateRecurrence` component accepts several props including `recurrence`, `onChange`, `startDate`, `latestDate`, `frequency`, `setFrequency`, `interval`, `setInterval`, `weekdays`, `setWeekdays`, `rule`, and `setRule`. These props are used to set and manage the state of the recurring date UI.","metadata":{"source":".autodoc/docs/markdown/components/DateRecurrence/index.md"}}],["18",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DayPicker/index.tsx)\n\nThe code defines a `DayPicker` component that allows users to select days of the week. The component is built using `styled-components` and `emotion`. It takes in several props, including `value`, `onChange`, `mode`, `min`, and `label`. \n\nThe `DayPicker` component renders a `StyledDayPicker` component, which is a styled `div` that displays the days of the week. Each day is represented by a `StyledDayPickerDay` component, which is a styled `div` that contains a checkbox input and the name of the day. The `StyledDayPickerDay` component is rendered by the `DayPickerDay` component, which takes in several props, including `index`, `long`, `short`, `state`, and `changeHandler`. \n\nThe `DayPicker` component also renders an error message if the user has not selected the minimum number of days required. The minimum number of days is specified by the `min` prop.\n\nThe `DayPicker` component uses the `useT` hook to translate the names of the days of the week. The `useBreakpointOrWider` hook is used to determine whether to display the full name or the abbreviated name of the day of the week. \n\nOverall, the `DayPicker` component is a reusable component that can be used in various parts of the project to allow users to select days of the week. It is flexible and customizable, allowing developers to specify the minimum number of days required and the label for the component.\n## Questions: \n 1. What is the purpose of the `DayPicker` component?\n- The `DayPicker` component is used to allow users to select one or more days of the week.\n\n2. What is the significance of the `valid` prop in the `StyledDayPicker` component?\n- The `valid` prop is used to determine whether the selected days meet a minimum requirement (specified by the `min` prop) and applies a red error border if the requirement is not met.\n\n3. What is the purpose of the `useBreakpointOrWider` hook?\n- The `useBreakpointOrWider` hook is used to determine whether the current screen size is at least the specified breakpoint or wider, and returns a boolean value. It is used in the `DayPickerDay` component to conditionally render a tooltip based on screen size.","metadata":{"source":".autodoc/docs/markdown/components/DayPicker/index.md"}}],["19",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DayPicker/story.tsx)\n\nThis code is a part of the kulturdaten-frontend project and it is responsible for rendering a DayPicker component. The DayPicker component is a calendar-like interface that allows users to select a date or a range of dates. \n\nThe code imports the necessary dependencies such as styled-components, Storybook, and the DayPicker component. It then defines a Storybook story for the DayPicker component. Storybook is a tool that allows developers to build and test UI components in isolation. The StoryWrapper component is defined using styled-components and it is used to wrap the DayPicker component. The EmbeddedComponent is a functional component that renders the StoryWrapper and the DayPicker component. It also uses the useState hook to manage the state of the selected date(s). \n\nThe DayPickerDefaultStory is a Storybook story that renders the EmbeddedComponent. This story can be used to test the DayPicker component and its functionality in isolation. \n\nOverall, this code is a small part of a larger project that is responsible for rendering a DayPicker component using Storybook. The DayPicker component can be used in various parts of the project where date selection is required. The Storybook story can be used to test the component in isolation and ensure that it is working as expected.\n## Questions: \n 1. What is the purpose of the `DayPicker` component?\n   - The `DayPicker` component is being imported from a file and used in the `EmbeddedComponent` function to display a date picker UI element.\n2. What is the significance of the `min` prop being passed to the `DayPicker` component?\n   - The `min` prop is being used to set a minimum selectable date in the `DayPicker` component.\n3. What is the purpose of the `StoryWrapper` styled component?\n   - The `StoryWrapper` styled component is being used to apply CSS styles to a container element that wraps around the `DayPicker` component in the `EmbeddedComponent` function.","metadata":{"source":".autodoc/docs/markdown/components/DayPicker/story.md"}}],["20",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Download/DownloadContext.tsx)\n\nThe code defines a React context and provider for managing downloads in the Kulturdaten Frontend project. The context provides access to an array of downloads, as well as methods for adding, updating, and removing downloads. \n\nThe downloads are represented as objects with an ID, file name, progress, and optional fadeOut and error properties. The reducer function handles the state updates for the downloads array based on actions dispatched to it. The actions are defined as an enum with values for adding, updating, and removing downloads. \n\nThe DownloadContextProvider component is the context provider that wraps its children with the DownloadContext. It uses the useReducer hook to manage the downloads state and the useState hook to keep track of the next available ID for new downloads. The provider value includes the downloads array, as well as the add, update, remove, and getNewId methods. \n\nThe DownloadToastWrapper and DownloadToast components are not defined in this file, but are imported from other files in the project. The DownloadToastWrapper component is a simple wrapper that positions the DownloadToast components on the screen. The DownloadToast component is a visual representation of a download, displaying the file name, progress, and any errors. \n\nOverall, this code provides a centralized way to manage downloads in the Kulturdaten Frontend project. Other components can access the downloads array and methods through the DownloadContext, and the DownloadToast components provide a visual representation of the downloads in progress.\n## Questions: \n 1. What is the purpose of the `DownloadsContext` and how is it used?\n- The `DownloadsContext` is a React context that provides state and functions related to downloads. It is used to manage and display download information and progress throughout the application.\n\n2. What is the purpose of the `downloadsReducer` function?\n- The `downloadsReducer` function is a reducer that handles state updates for the `DownloadsContext`. It takes in an action and updates the state accordingly based on the action type.\n\n3. What is the purpose of the `DownloadContextProvider` component?\n- The `DownloadContextProvider` component is a provider that wraps around the children components and provides the `DownloadsContext` to them. It also initializes the state for downloads and provides functions to add, update, and remove downloads.","metadata":{"source":".autodoc/docs/markdown/components/Download/DownloadContext.md"}}],["21",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Download/index.tsx)\n\nThe code defines a React component called `DownloadToast` that renders a toast notification for a file download. The toast notification is displayed at the bottom of the screen and includes a progress bar, an icon, and text indicating the status of the download. The component takes in several props, including the name of the file being downloaded, the progress of the download, and an optional error message.\n\nThe `DownloadToast` component is styled using the `styled` function from the `@emotion/styled` library and the `css` function from the `@emotion/react` library. The styles define the position, size, and appearance of the toast notification, as well as the animation that is used to fade the notification in and out.\n\nThe `DownloadToast` component also uses the `useEffect` and `useState` hooks from React to manage the animation state of the toast notification. When the `fadeOut` prop is set to `true`, the component sets the animation status to \"paused\" and then uses a `setTimeout` function to set the animation status to \"fadeOut\" after a short delay. This causes the toast notification to fade out of view.\n\nThe `DownloadToast` component is used in other parts of the `kulturdaten-frontend` project to display notifications when files are downloaded. For example, the component is used in the `DownloadButton` component to display a toast notification when a user clicks the download button. The `DownloadToast` component can also be used in other parts of the project to display notifications for other types of events.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines the styling and functionality for a download toast component that displays a progress bar and status updates for a file download.\n\n2. What is the significance of the `ToastAnimationStatus` enum?\n- The `ToastAnimationStatus` enum defines the possible animation states for the download toast component, including fade in, paused, and fade out.\n\n3. What is the role of the `useEffect` hook in the `DownloadToast` component?\n- The `useEffect` hook is used to update the animation status of the download toast component when the `fadeOut` prop changes, triggering a fade out animation before the component is removed from the DOM.","metadata":{"source":".autodoc/docs/markdown/components/Download/index.md"}}],["22",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DropZone/index.tsx)\n\nThe code defines a React component called `DropZone` that renders a drop zone for files. The component is styled using the `@emotion/styled` and `@emotion/react` libraries. The drop zone is a label element that is styled to look like a box with a dashed border. When a file is dragged over the drop zone, the border changes to a solid color and the box shadow changes to indicate whether the file is valid or not. If the file is valid, the box shadow is green, otherwise it is red. \n\nThe component accepts several props, including `label`, `onDrop`, `acceptedFileTypes`, `isUploading`, `progress`, `success`, `disabled`, `disabledMessage`, `max`, and `maxFileSizeInKb`. The `label` prop is the text that appears inside the drop zone. The `onDrop` prop is a callback function that is called when a file is dropped onto the drop zone. The `acceptedFileTypes` prop is an array of objects that specify the MIME types and human-readable names of the file types that are allowed to be dropped onto the zone. The `isUploading` prop is a boolean that indicates whether a file is currently being uploaded. The `progress` prop is a number between 0 and 1 that indicates the progress of the upload. The `success` prop is an object that contains a count of the number of files that have been successfully uploaded. The `disabled` prop is a boolean that indicates whether the drop zone is disabled. The `disabledMessage` prop is the text that appears inside the drop zone when it is disabled. The `max` prop is the maximum number of files that can be dropped onto the zone. The `maxFileSizeInKb` prop is the maximum file size in kilobytes that is allowed to be dropped onto the zone.\n\nThe component uses several state variables to keep track of the state of the drop zone. The `isDropOver` state variable is a boolean that indicates whether a file is currently being dragged over the drop zone. The `isValidFiles` state variable is a boolean that indicates whether the file being dragged over the drop zone is valid. The `fileSizeValid` state variable is a boolean that indicates whether the file size is valid. The `dropFileSize` state variable is a number that indicates the size of the file being dropped onto the zone. \n\nThe component also uses several hooks, including `useCallback`, `useEffect`, `useMemo`, `useRef`, and `useState`. The `useCallback` hook is used to memoize the `wrappedOnDrop` function, which is called when a file is dropped onto the zone. The `useEffect` hook is used to add an event listener to the file input element that is used to select files to upload. The `useMemo` hook is used to memoize the `pending` state variable, which is a boolean that indicates whether a file is currently being uploaded and the progress is 1. The `useRef` hook is used to create a reference to the file input element. The `useState` hook is used to create state variables for `isDropOver`, `isValidFiles`, `fileSizeValid`, and `dropFileSize`.\n\nOverall, the `DropZone` component provides a user-friendly way to upload files to the application. It allows users to drag and drop files onto the drop zone and provides feedback on whether the file is valid or not. It also provides information on the file types and file size restrictions.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `DropZone` that renders a drop zone for file uploads with various features such as file type and size restrictions, progress tracking, and success messages.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several functions and components from external libraries such as `@emotion/react`, `@emotion/styled`, and `react`.\n- This code also imports a custom hook called `useT` from a file located at `../../lib/i18n`.\n\n3. What props can be passed to the `DropZone` component and what do they do?\n- The `DropZone` component accepts several props such as `label`, `onDrop`, `acceptedFileTypes`, `isUploading`, `progress`, `success`, `disabled`, `disabledMessage`, `max`, and `maxFileSizeInKb`.\n- These props control various aspects of the drop zone such as the label text, file type and size restrictions, progress tracking, and success messages.","metadata":{"source":".autodoc/docs/markdown/components/DropZone/index.md"}}],["23",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DropZone/story.tsx)\n\nThe code above is a storybook story for the `DropZone` component of the `kulturdaten-frontend` project. Storybook is a tool for developing UI components in isolation and documenting them. The `DropZone` component is a UI element that allows users to drag and drop files onto it for uploading. \n\nThe `import` statements at the beginning of the code import the necessary dependencies for the story, including the `Story` component from `@storybook/react`, the `styled` function from `@emotion/styled`, the `DropZone` component from the current directory (`.`), and the `useState` hook from `react`.\n\nThe `title` property of the `export default` object sets the title of the story in the Storybook UI.\n\nThe `StoryWrapper` constant is a styled `div` element that adds padding to the story.\n\nThe `DropZoneDefaultStory` constant is a storybook story that renders the `DropZone` component with default props. It uses the `useState` hook to set the `files` state to an empty array. The `DropZone` component is then rendered with an `onDrop` prop that sets the `files` state to the dropped files, a `label` prop that sets the text displayed in the `DropZone`, and an `acceptedFileTypes` prop that sets the accepted file types for the `DropZone`.\n\nThis story can be used to test and document the `DropZone` component in isolation, without having to navigate to the larger project. It allows developers to see how the component behaves with different props and file types, and can be used as a reference for implementing the `DropZone` component in other parts of the project.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a story for a Drop Zone component and sets up a default story with a label and accepted file types.\n\n2. What dependencies are being used in this code?\n   This code imports the Story component from '@storybook/react', the styled component from '@emotion/styled', the DropZone component from '.', and the useState hook from 'react'.\n\n3. What props are being passed to the DropZone component?\n   The DropZone component is being passed an onDrop function to handle dropped files, a label string to display above the drop zone, and an array of accepted file types with a single object containing a mimeType of 'image/svg+xml' and a name of 'SVG'.","metadata":{"source":".autodoc/docs/markdown/components/DropZone/story.md"}}],["24",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/DropdownMenu/index.tsx)\n\nThe code defines a reusable `DropdownMenu` component that can be used to create dropdown menus with customizable buttons and content. The component is built using styled components and the emotion library.\n\nThe `DropdownMenu` component takes in several props, including `children` (the content of the dropdown menu), `icon` (the icon to display on the button), `text` (the text to display on the button), `form` (the shape of the button), `stretch` (whether the button should stretch to fill its container), `buttonColor` (the color of the button), `buttonSize` (the size of the button), `direction` (the direction in which the dropdown menu should open), and `menuWidth` (the width of the dropdown menu).\n\nThe `DropdownMenu` component renders a button that, when clicked, displays the dropdown menu. The button is styled using the `StyledDropdownMenuButton` component, which takes in several props to customize its appearance. The button's text and icon are also styled using the `StyledDropdownMenuButtonText` and `StyledDropdownMenuButtonIcon` components, respectively.\n\nThe dropdown menu itself is rendered using the `StyledDropdownMenuDropdown` component, which takes in several props to customize its appearance and behavior. The content of the dropdown menu is rendered using the `StyledDropdownMenuDropdownContent` component.\n\nThe `DropdownMenu` component also includes several utility enums (`DropdownMenuButtonColor`, `DropdownMenuForm`, `DropdownMenuDirection`, and `DropdownMenuButtonSize`) and a `DropdownMenuText` styled component that can be used to style the text content of the dropdown menu.\n\nOverall, the `DropdownMenu` component provides a flexible and customizable way to create dropdown menus in a React application.\n## Questions: \n 1. What is the purpose of the `DropdownMenu` component?\n- The `DropdownMenu` component is a reusable dropdown menu component that takes in various props to customize its appearance and behavior.\n\n2. What is the purpose of the `clickHandler` function?\n- The `clickHandler` function is responsible for toggling the visibility of the dropdown menu and animating its appearance and disappearance.\n\n3. What is the purpose of the `StyledDropdownMenuDropdown` component?\n- The `StyledDropdownMenuDropdown` component is the dropdown menu content that appears when the menu button is clicked. It is positioned absolutely and has a transition animation for opacity and transform.","metadata":{"source":".autodoc/docs/markdown/components/DropdownMenu/index.md"}}],["25",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryForm/EntryFormHead.tsx)\n\nThe code defines a React component called `EntryFormHead` that renders a header for a form. The header consists of a title, an optional tooltip, and an optional expander button. The component takes several props, including `title`, `tooltip`, `id`, `valid`, `expander`, `size`, and `addPadding`.\n\nThe `StyledEntryFormHead` component is a styled wrapper for the header that sets its display, border, background, position, and padding. It also sets the color and focus styles. The `addPadding` prop adds extra padding to the header, while the `isExpander` prop indicates whether the header has an expander button.\n\nThe `StyledEntryFormHeadTitle` component is a styled wrapper for the header title that sets its font size, line height, font weight, margin, position, and display. It also sets the scroll margin top. The `size` prop determines the size of the title.\n\nThe `StyledEntryFormHeadChevron` component is a styled wrapper for the expander button that sets its flex grow, display, justify content, align items, width, height, and transition. It also sets the transform based on the `isExpanded` prop.\n\nThe `StyledEntryFormHeadBorder` component is a styled wrapper for the header border that sets its position, width, left, bottom, and border.\n\nThe `StyledEntryFormHeadAlert` component is a styled wrapper for the alert symbol that sets its position, margin, width, and height.\n\nThe `StyledTooltip` component is a styled wrapper for the tooltip that sets its margin left.\n\nThe `EntryFormHead` component takes the `title`, `tooltip`, `id`, `valid`, `expander`, `size`, and `addPadding` props. The `title` prop is the header title. The `tooltip` prop is an optional tooltip that can be a string or a React node. The `id` prop is an optional ID for the header. The `valid` prop indicates whether the header is valid. The `expander` prop is an optional object that contains an `onClick` function and an `isExpanded` boolean. The `size` prop determines the size of the header title. The `addPadding` prop adds extra padding to the header.\n\nThe `useT` hook is used to get the translation function. The `useMemo` hook is used to memoize the `isExpander` prop.\n\nThe `ariaLabel` variable is used to set the aria label for the expander button.\n\nThe `getRef` function is used to get the reference for the header title. It returns a reference object based on the `id` prop.\n\nThe `EntryFormHead` component renders the `StyledEntryFormHead` component with the appropriate props. It conditionally renders the `StyledEntryFormHeadAlert` component if the `valid` prop is false. It renders the `StyledEntryFormHeadBorder` component and the `StyledEntryFormHeadTitle` component with the appropriate props. It conditionally renders the `StyledTooltip` component if the `tooltip` prop is defined. It renders the `StyledEntryFormHeadChevron` component if the `expander` prop is defined.\n## Questions: \n 1. What is the purpose of the `EntryFormHead` component?\n- The `EntryFormHead` component is used to render a header for a form entry, with an optional tooltip and expandable section.\n\n2. What is the purpose of the `getRef` function?\n- The `getRef` function returns a reference to a DOM element based on the `id` prop passed to the `EntryFormHead` component. It is used to set the focus on the correct element when the user navigates the form using the keyboard.\n\n3. What is the purpose of the `StyledEntryFormHeadAlert` component?\n- The `StyledEntryFormHeadAlert` component is used to render an alert symbol next to the form header if the `valid` prop passed to the `EntryFormHead` component is `false`.","metadata":{"source":".autodoc/docs/markdown/components/EntryForm/EntryFormHead.md"}}],["26",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryForm/Save.tsx)\n\nThe code defines a React component called `Save` that renders a sticky bar at the top of the screen with a save button and a message indicating the status of the save operation. The component takes several props, including an `onClick` function to be called when the save button is clicked, a `date` string to display the date of the last save, an `active` boolean to indicate whether the save button should be enabled, a `valid` boolean to indicate whether the data being saved is valid, and a `hint` boolean to indicate whether the message should be displayed as a hint.\n\nThe `Save` component uses several styled components from the `@emotion/styled` library to define the layout and appearance of the save bar, button, and message. The `mq` and `contentGrid` functions from the `../globals/Constants` module are used to define responsive styles based on the screen size.\n\nThe `Save` component also uses the `useEffect` and `useState` hooks from React to manage the state of the save button. When the save button is clicked, the `onClick` function is called and the `saving` state is set to `true`. If the `active` prop is `true`, a timer is started to wait for 1.5 seconds before setting the `timeThresholdReached` state to `true`. If the `active` prop becomes `false` before the timer expires, the `saving` and `timeThresholdReached` states are reset to `false`.\n\nOverall, the `Save` component provides a reusable way to display a save button and message with customizable behavior based on the state of the data being saved. It can be used in conjunction with other components in the `kulturdaten-frontend` project to provide a complete user interface for editing and saving data.\n## Questions: \n 1. What is the purpose of the `Save` component?\n- The `Save` component is used to display a save button with a message indicating the status of the save operation.\n\n2. What is the significance of the `saving` state variable?\n- The `saving` state variable is used to indicate whether a save operation is currently in progress.\n\n3. What is the purpose of the `useBreakpointOrWider` hook?\n- The `useBreakpointOrWider` hook is used to determine whether the current viewport width is at least the specified breakpoint or wider.","metadata":{"source":".autodoc/docs/markdown/components/EntryForm/Save.md"}}],["27",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryForm/wrappers.tsx)\n\nThe code above defines several styled components that are used in the Kulturdaten Frontend project. \n\nThe `EntryFormWrapper` component is a styled `div` that takes two optional props: `fullWidth` and `reducedVerticalPadding`. It sets the padding and grid layout for the form wrapper, and adjusts the padding and grid layout for larger screens if `Breakpoint.mid` is reached. If `fullWidth` is true, the component does not apply any additional styles. \n\nThe `RequiredInfoText` component is a styled `p` that takes an optional `wrapped` prop. It sets the grid layout and padding for the required info text in the form. If `wrapped` is true, the component does not apply any additional styles. \n\nThe `StyledRequiredInfoText` component is a functional component that renders the `RequiredInfoText` component with the `wrapped` prop set to the value of the `wrapped` prop passed to it. It also uses the `useT` hook from the `i18n` library to translate the text content of the component. \n\nThe `EntryFormContainer` component is a styled `div` that takes two optional props: `fullWidth` and `noPadding`. It sets the width and padding for the form container, and adjusts the grid layout for larger screens if `Breakpoint.mid` is reached. If `fullWidth` is true, the component adjusts the grid layout for even larger screens. \n\nThe `EntryFormContainerColumns` component is a styled `div` that sets the grid layout for the form container columns. It sets the number of columns and the column and row gaps, and adjusts the row gap for larger screens if `Breakpoint.mid` is reached. \n\nThe `StyledEntryFormContainer` component is a functional component that renders the `EntryFormContainer` component with the `noPadding` and `fullWidth` props set to the values of the `noPadding` and `fullWidth` props passed to it. It also wraps the children of the component in a `fieldset` element with a `tabIndex` of 0. \n\nThese components are used throughout the Kulturdaten Frontend project to style and layout form elements. The `StyledRequiredInfoText` component is used to display the required info text for form fields, and the `StyledEntryFormContainer` component is used to wrap form fields in a container with consistent padding and layout.\n## Questions: \n 1. What is the purpose of the `EntryFormWrapper` component?\n- The `EntryFormWrapper` component is used to style a form wrapper with padding and grid layout, and can be customized with props for full width and reduced vertical padding.\n\n2. What is the difference between `RequiredInfoText` and `StyledRequiredInfoText` components?\n- `RequiredInfoText` is a styled component for a paragraph element with conditional padding and grid layout, while `StyledRequiredInfoText` is a functional component that renders `RequiredInfoText` with a translated text prop.\n\n3. What is the purpose of the `StyledEntryFormContainer` component?\n- The `StyledEntryFormContainer` component is used to wrap form fields with a fieldset element and apply padding and grid layout, and can be customized with props for no padding and full width.","metadata":{"source":".autodoc/docs/markdown/components/EntryForm/wrappers.md"}}],["28",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryHeader/index.tsx)\n\nThe code defines a React component called `EntryHeader` that renders a header section for a page. The header consists of a title, subtitle, menu, and tabs. The component is styled using the `styled` function from the `@emotion/styled` package and the `css` function from the `@emotion/react` package.\n\nThe `EntryHeader` component takes several props:\n\n- `title`: a string representing the title of the page\n- `subTitle`: an optional string representing the subtitle of the page\n- `backButton`: an optional React element representing a back button\n- `menu`: an optional React element representing a menu\n- `tabs`: an optional React element representing tabs\n- `wideLayout`: an optional boolean indicating whether the layout should be wide\n- `minimalVariant`: an optional boolean indicating whether the header should be in a minimal variant\n\nThe `EntryHeader` component renders a `div` element with the class `StyledEntryHeader`. This element contains two child elements: a `div` element with the class `StyledEntryHeaderHead` and a `div` element with the class `StyledEntryHeaderTabsSlot`.\n\nThe `StyledEntryHeaderHead` element contains two child elements: a `div` element with the class `StyledEntryHeaderTitleWrapper` and a `div` element with the class `StyledEntryHeaderMenu`. The `StyledEntryHeaderTitleWrapper` element contains two child elements: an `h1` element with the class `StyledEntryHeaderTitle` and an optional `h2` element with the class `StyledEntryHeaderSubTitle`. The `StyledEntryHeaderMenu` element contains the `menu` prop.\n\nThe `StyledEntryHeaderTabsSlot` element contains a `div` element with the class `StyledEntryHeaderTabsSlotContainer`, which contains the `tabs` prop.\n\nThe styles for the `EntryHeader` component are defined using CSS-in-JS with the `styled` function. The styles include grid layout, font sizes, line heights, padding, and margin. The styles also use media queries to adjust the layout for different screen sizes.\n\nOverall, the `EntryHeader` component provides a flexible and customizable header section for a page, with support for a title, subtitle, menu, and tabs. It can be used in conjunction with other components in the `kulturdaten-frontend` project to build a complete web application.\n## Questions: \n 1. What is the purpose of the `EntryHeader` component?\n- The `EntryHeader` component is used to render a header section for an entry in the application, including a title, subtitle, menu, and tabs.\n\n2. What is the purpose of the `StyledEntryHeaderTabsSlotContainer` component?\n- The `StyledEntryHeaderTabsSlotContainer` component is used to render a container for the tabs section of the header, with different layouts depending on the screen size and the `wideLayout` prop.\n\n3. What is the purpose of the `mainContentRef` variable?\n- The `mainContentRef` variable is used as a reference to the main content section of the application, which is used to set the focus on the content when the header is scrolled out of view.","metadata":{"source":".autodoc/docs/markdown/components/EntryHeader/index.md"}}],["29",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryHeader/story.tsx)\n\nThe code defines a Storybook story for the EntryHeader component, which is used in the Kulturdaten Frontend project. The EntryHeader component is a reusable UI component that displays a header for an entry in the Kulturdaten database. The header includes a title, a back button, a dropdown menu, and a set of tabs.\n\nThe code imports the EntryHeader component, as well as several other components and utilities from the project's codebase. These include the Button, DropdownMenu, and Tabs components, as well as the useT hook for internationalization.\n\nThe code defines a testTabLinks array, which contains an array of objects representing the links for the tabs in the header. Each object has a title, href, and isActive property. The isActive property is used to indicate which tab is currently active.\n\nThe code defines a Storybook story called EntryHeaderDefaultStory, which renders an instance of the EntryHeader component with some sample props. The props include a back button, a dropdown menu, a title, and a set of tabs. The back button is a Button component with an ArrowLeft icon and the text \"zurück\". The dropdown menu is a DropdownMenu component with three Button components inside. The title is a string, and the tabs are rendered using the Tabs component with the testTabLinks array as its links prop.\n\nThe purpose of this code is to provide a visual representation of the EntryHeader component in Storybook, which allows developers to see how the component looks and behaves in different scenarios. By defining a Storybook story for the component, developers can easily test and iterate on the component's design and functionality without having to navigate to the actual application. The testTabLinks array and other sample props are used to demonstrate the different ways in which the component can be configured and customized.\n## Questions: \n 1. What is the purpose of the `EntryHeader` component?\n   - The `EntryHeader` component is used to display a header for an entry in the application, including a title, back button, dropdown menu, and tabs.\n\n2. What is the purpose of the `DropdownMenu` component?\n   - The `DropdownMenu` component is used to display a dropdown menu with a button that can be clicked to reveal a list of actions, such as exporting data or deleting an entry.\n\n3. What is the purpose of the `Tabs` component?\n   - The `Tabs` component is used to display a set of tabs with links that can be clicked to switch between different sections or views within the application.","metadata":{"source":".autodoc/docs/markdown/components/EntryHeader/story.md"}}],["30",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryList/EntryCard.tsx)\n\nThe code defines a reusable React component called `EntryCard` that renders a card-like UI element for displaying information about an entry. The component takes several props, including `title`, `status`, `createdDate`, `updatedDate`, `meta`, `menuExpanded`, `href`, `active`, `onClick`, `image`, and `forbidden`. \n\nThe `EntryCard` component is composed of several styled components, including `StyledEntryCardLink`, `StyledEntryCard`, `StyledEntryCardTop`, `StyledEntryCardTopLeft`, `StyledEntryCardTitle`, `StyledEntryCardMeta`, `StyledEntryCardImage`, `StyledEntryCardBottom`, `StyledEntryCardDates`, and `StyledEntryCardStatus`. These styled components define the visual appearance of the card and its various parts, such as the title, metadata, image, and status flag.\n\nThe `EntryCard` component also uses two other reusable components, `StatusFlag` and `EntryCardTypesSubjects`, to display the status and type/subject information of the entry, respectively.\n\nThe `EntryCard` component conditionally renders some of its parts based on the values of its props. For example, if an `image` prop is provided, the `StyledEntryCardImage` component is rendered to display the image. If an `href` prop is provided, the `EntryCard` component wraps itself in a `Link` component from the `next/link` library to make the card clickable and navigable.\n\nOverall, the `EntryCard` component is a flexible and reusable UI element that can be used throughout the project to display information about various types of entries. It can be customized by passing in different props to control its appearance and behavior.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines the styles and components for an entry card used in a frontend project for displaying information about cultural events.\n\n2. What are the props accepted by the EntryCard component?\n- The EntryCard component accepts props such as title, status, createdDate, updatedDate, meta, menuExpanded, href, active, onClick, image, and forbidden.\n\n3. What is the purpose of the EntryCardTypesSubjects component?\n- The EntryCardTypesSubjects component is used to display the types and subjects associated with an entry card, and accepts props for types and subjects as arrays of strings.","metadata":{"source":".autodoc/docs/markdown/components/EntryList/EntryCard.md"}}],["31",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryList/EntryListContext.tsx)\n\nThe code defines a set of React contexts and a reducer function that are used to manage filters, sorting, and pagination for lists of entries in the Kulturdaten-frontend project. \n\nThe `FiltersActions` enum defines three possible actions that can be dispatched to the reducer: `init`, `set`, and `reset`. The `FiltersState` type is an object that maps filter keys to filter values, and the `FiltersAction` type is an object that contains a `type` property indicating the action type, a `listName` property indicating the name of the list being filtered, and a `payload` property that contains additional data depending on the action type. \n\nThe `filtersReducer` function is a standard Redux-style reducer that handles the three possible actions. The `init` action initializes the filter state for a given list, the `set` action updates a specific filter value for a given list, and the `reset` action clears all filter values for all lists. \n\nThe `EntryListView` enum defines two possible views for displaying lists of entries: `table` and `cards`. The `EntryListContext` and `AdminListContext` contexts are created using the `React.createContext` function and provide a set of methods for managing pagination, sorting, filtering, and other state related to lists of entries. \n\nThe `EntryListContextProvider` component is a higher-order component that wraps its children in an `EntryListContext` or `AdminListContext` context provider, depending on the `Context` prop. It uses the `useState` hook to manage state for pagination, sorting, filtering, and other list-related state, and provides this state to its children via the context provider. \n\nOverall, this code provides a flexible and reusable way to manage state related to lists of entries in the Kulturdaten-frontend project. It allows components to easily manage pagination, sorting, and filtering without having to manage this state themselves.\n## Questions: \n 1. What is the purpose of the `filtersReducer` function?\n- The `filtersReducer` function is a reducer that takes in a state object and an action object, and returns a new state object based on the action type.\n\n2. What is the difference between `EntryListContext` and `AdminListContext`?\n- `EntryListContext` and `AdminListContext` are two separate contexts that provide the same set of functions for managing entry lists, but they are used in different parts of the application.\n\n3. What is the purpose of the `EntryListContextProvider` component?\n- The `EntryListContextProvider` component is a provider that wraps its children with an `EntryListContext` or `AdminListContext`, and provides the necessary state and functions for managing entry lists to its children through the context.","metadata":{"source":".autodoc/docs/markdown/components/EntryList/EntryListContext.md"}}],["32",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryList/EntryListFiltersBox.tsx)\n\nThe code defines a set of styled React components for displaying and managing filters in the Kulturdaten-frontend project. The main component is `EntryListFiltersBox`, which takes in several props including `expanded`, `children`, `activeFiltersCount`, `isCollapsed`, `setIsCollapsed`, and `noPadding`. \n\nThe `StyledFilters` component is a container for the filters and is styled to display the filters in a column or row depending on whether `expanded` is true or false. The `StyledFiltersBox` component is a container for each individual filter box and is styled to display a border and padding. The `StyledFiltersBoxTitle` component is a container for the title of each filter box and is styled to display a border, font weight, font size, line height, and padding. The `StyledFiltersBoxTitleButton` component is a button that toggles the visibility of the filter box and is styled to display a border, padding, font size, line height, font weight, and cursor. The `StyledFiltersBoxChildren` component is a container for the children of each filter box and is styled to display a border and flex direction.\n\nThe `EntryListFiltersBox` component is the main component that renders the filter boxes. It takes in the `expanded` prop, which determines whether the filter boxes are displayed in a column or row. It also takes in the `children` prop, which is an array of filter components. The `activeFiltersCount` prop is used to display the number of active filters. The `isCollapsed` prop is used to determine whether the filter box is collapsed or expanded. The `setIsCollapsed` prop is a function that sets the value of `isCollapsed`. The `noPadding` prop is used to determine whether the filter box has padding.\n\nThe `useCollapsable` hook is used to toggle the visibility of the filter box when the `StyledFiltersBoxTitleButton` is clicked. It takes in the `renderedChildren`, `isCollapsed`, and `setIsCollapsed` props and returns the `renderedCollapsable` component.\n\nOverall, this code provides a set of reusable styled components for displaying and managing filters in the Kulturdaten-frontend project. The `EntryListFiltersBox` component can be used to render filter boxes with customizable props, and the `useCollapsable` hook can be used to toggle the visibility of the filter boxes.\n## Questions: \n 1. What is the purpose of the `EntryListFiltersBox` component?\n- The `EntryListFiltersBox` component is a filter box that can be expanded or collapsed, and it contains child components that are rendered conditionally based on its state.\n\n2. What is the role of the `useCollapsable` hook?\n- The `useCollapsable` hook is used to manage the state of the collapsible child components within the `EntryListFiltersBox` component, and it returns the rendered child components along with a function to toggle the collapsed state.\n\n3. What is the purpose of the `mq` function and the `Breakpoint` enum?\n- The `mq` function is used to define media queries for responsive design, and the `Breakpoint` enum contains the breakpoint values for different screen sizes. These are used to adjust the styling of the `EntryListFiltersBox` component based on the screen size.","metadata":{"source":".autodoc/docs/markdown/components/EntryList/EntryListFiltersBox.md"}}],["33",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryList/EntryListHead.tsx)\n\nThe code defines a React component called `EntryListHead` that renders a header for a list of entries. The header consists of a title, an optional menu, an optional action button, and an optional list of actions. The header can also be expanded or collapsed using a button.\n\nThe component uses Emotion to define its styles. It imports the `css` and `styled` functions from Emotion, as well as two icons from the `react-feather` library. It also imports two utility functions from the project's `lib` directory: `useT` for internationalization and `useBreakpointOrWider` for responsive design.\n\nThe component's styles are defined using Emotion's `styled` function. The component is divided into several sub-components, each with its own set of styles. The top-level component is called `StyledEntryListHead` and has a white background. The `StyledEntryListHeadTitleRow` component contains the title and other elements on the right side of the header. The `StyledEntryListHeadTitle` component contains the title text and has an optional padding. The `StyledEntryListHeadActionButton` component contains the action button and has different styles depending on whether the header is expanded or not. The `StyledExpandableButton` component contains the expand/collapse button.\n\nThe `EntryListHead` component takes several props:\n\n- `title`: the title text to display\n- `actionButton`: an optional React node to display as the action button\n- `actions`: an optional array of React elements to display as actions\n- `expanded`: a boolean indicating whether the header is expanded or not\n- `setExpanded`: an optional function to call when the expand/collapse button is clicked\n- `expandable`: a boolean indicating whether the header can be expanded or not\n- `noPadding`: a boolean indicating whether the title should have no padding\n- `menu`: an optional React element to display as a menu\n\nThe component uses the `useBreakpointOrWider` hook to determine whether the screen width is at least `Breakpoint.mid`. If it is, the expand/collapse button is displayed.\n\nThe component renders the header using the defined sub-components and the provided props. If the header is expanded, it displays the action button and the list of actions. If it is collapsed, it only displays the action button. If the header is expandable, it displays the expand/collapse button. When the button is clicked, it calls the `setExpanded` function if provided.\n\nOverall, this component provides a flexible and responsive header for a list of entries, with optional actions and expand/collapse functionality. It can be used in various parts of the project where such a header is needed.\n## Questions: \n 1. What is the purpose of the `EntryListHead` component?\n- The `EntryListHead` component is a React functional component that renders a header for a list of entries, with optional expand/collapse functionality, action buttons, and a menu.\n\n2. What is the role of the `useT` hook?\n- The `useT` hook is used to access the translation function provided by the i18n library, which allows for localization of the component's text content.\n\n3. What is the purpose of the `mq` function?\n- The `mq` function is a utility function that generates media query styles based on the provided breakpoint value, which is defined in the `WindowService` module. It is used to apply responsive styles to the `StyledEntryListHeadTitleRow` component based on the screen width.","metadata":{"source":".autodoc/docs/markdown/components/EntryList/EntryListHead.md"}}],["34",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryList/EntryListPagination.tsx)\n\nThe code defines a React component called `EntryListPagination` that renders a pagination control for a list of entries. The component takes several props including the current page number, the last page number, the number of entries per page, the total number of entries, and functions to handle navigation to the next, previous, or specific page. \n\nThe component renders a `StyledEntryListPagination` container with two child elements: `StyledEntryListPaginationInteractive` and `StyledEntryListPaginationSelect`. The former contains the navigation buttons and the latter contains a `Select` component that allows the user to jump to a specific page. The `StyledEntryListPagination` container has an optional `noHorizontalPadding` prop that removes horizontal padding if set to `true`.\n\nThe `Select` component is rendered only if `totalEntries` and `entriesPerPage` are truthy. It generates a list of options based on the total number of entries and the number of entries per page. Each option represents a page number and displays the current page number and the last page number using the `useT` hook for translation.\n\nThe navigation buttons are `Button` components from the `../button` module. The \"previous\" button is disabled if the current page is the first page. The \"next\" button is disabled if the current page is the last page. Both buttons have an icon and text label that can be translated using the `useT` hook.\n\nThe component is used in other parts of the `kulturdaten-frontend` project to provide pagination controls for lists of entries. It can be customized by passing different props to change the behavior or appearance of the pagination control. For example, setting `expanded` to `true` will display the `Select` component by default instead of hiding it behind a button.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `EntryListPagination` that renders a pagination UI element for a list of entries.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several modules from external libraries, including `@emotion/styled`, `@emotion/react`, and `react`.\n\n3. What props does the `EntryListPagination` component accept?\n- The `EntryListPagination` component accepts several props, including `currentPage`, `lastPage`, `entriesPerPage`, `totalEntries`, `nextPage`, `previousPage`, `goToPage`, `expanded`, and `noHorizontalPadding`. These props are used to customize the behavior and appearance of the pagination UI element.","metadata":{"source":".autodoc/docs/markdown/components/EntryList/EntryListPagination.md"}}],["35",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryList/index.tsx)\n\nThe code above defines styled components and an interface for an entry list used in the kulturdaten-frontend project. The `styled` import is from the `@emotion/styled` library, which allows for the creation of styled components using CSS-in-JS syntax. \n\nThe `EntryListPlaceholder` component is a simple div with a font size and line height defined. This component is likely used as a placeholder or loading indicator for the entry list component. \n\nThe `StyledEntryListBody` component is a styled `ul` element with a white background and bottom padding. This component is likely used as the main container for the entry list items. \n\nThe `EntryListProps` interface defines the props for the entry list component. It takes in a `title` prop as a string, a `useList` function that returns an object with `data` and `meta` properties, and an `expanded` boolean prop. The `useList` function takes in a query object with `page` and `size` properties and returns an object with an array of `EntryType` objects and metadata about the list. \n\nOverall, this code defines the basic structure and styling for an entry list component and provides an interface for passing in data and metadata to populate the list. This component can be used throughout the kulturdaten-frontend project to display various types of entries, such as events or locations. \n\nExample usage of the `EntryListProps` interface:\n\n```\nimport { EntryListProps } from './EntryList';\n\ninterface EventEntry {\n  id: number;\n  name: string;\n  date: string;\n  location: string;\n}\n\nconst EventList: React.FC<EntryListProps<EventEntry>> = ({ title, useList, expanded }) => {\n  const { data, meta } = useList({ page: '1', size: '10' });\n\n  return (\n    <>\n      <h2>{title}</h2>\n      <StyledEntryListBody>\n        {data.map((event) => (\n          <li key={event.id}>\n            <h3>{event.name}</h3>\n            <p>{event.date}</p>\n            <p>{event.location}</p>\n          </li>\n        ))}\n      </StyledEntryListBody>\n    </>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of the `EntryListPlaceholder` and `StyledEntryListBody` components?\n   - `EntryListPlaceholder` is a styled div used as a placeholder for an entry list. `StyledEntryListBody` is a styled unordered list used as the body of an entry list.\n2. What is the `EntryListProps` interface used for?\n   - `EntryListProps` is an interface used to define the props for an entry list component. It includes a `title` prop, a function `useList` that returns data for the list, and an `expanded` prop to determine if the list should be expanded or not.\n3. What are the types of data returned by the `useList` function?\n   - The `useList` function returns an object with two properties: `data`, which is an array of `EntryType` objects, and `meta`, which includes information about the language and pagination of the data.","metadata":{"source":".autodoc/docs/markdown/components/EntryList/index.md"}}],["36",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/EntryPicker/index.tsx)\n\nThe `EntryPicker` component is a reusable UI component that provides a dropdown list of entries for a specific category. It is used in the `kulturdaten-frontend` project to allow users to select an entry from a list of organizers, locations, or offers. \n\nThe component takes in several props, including `chooseText`, `editText`, `overlayTitle`, `value`, `list`, `categoryName`, `onChange`, `remove`, `showHint`, and `variant`. \n\nWhen the user clicks on the `StyledEntryPickerSlot` button, a dropdown list of entries is displayed in an overlay. The `list` prop is a React element that contains the list of entries to be displayed. When the user selects an entry from the list, the `onChange` function is called with the selected entry's ID as an argument. \n\nThe `EntryPicker` component also displays the currently selected entry, if there is one. If there is no selected entry, the `chooseText` prop is displayed. If there is a selected entry, the `editText` prop is displayed, along with the selected entry's name and address (if applicable). \n\nIf the `remove` prop is provided, a \"Remove\" button is displayed that calls the `onRemove` function when clicked. \n\nThe `EntryPicker` component uses several other components from the `kulturdaten-frontend` project, including `Button`, `OverlayContainer`, `OverlayTitleBar`, and `EntryListContextProvider`. \n\nOverall, the `EntryPicker` component provides a flexible and reusable way to display a dropdown list of entries for a specific category and allows users to select and edit entries as needed.\n## Questions: \n 1. What is the purpose of the `EntryPicker` component?\n- The `EntryPicker` component is used to select an entry from a list of entries and display its information.\n\n2. What are the props that can be passed to the `EntryPicker` component?\n- The props that can be passed to the `EntryPicker` component include `chooseText`, `editText`, `overlayTitle`, `value`, `list`, `categoryName`, `onChange`, `remove`, `showHint`, and `variant`.\n\n3. What is the role of the `useOverlay` hook in the `EntryPicker` component?\n- The `useOverlay` hook is used to display a list of entries in an overlay when the user clicks on the `StyledEntryPickerSlot` element.","metadata":{"source":".autodoc/docs/markdown/components/EntryPicker/index.md"}}],["37",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Error/index.tsx)\n\nThe code above is a styled component that exports a div element with a class name of `StyledError`. The component takes an optional boolean prop called `inFormList`. If `inFormList` is true, the component applies additional styling to the div element.\n\nThe purpose of this component is to provide consistent styling for error messages throughout the project. By using a styled component, developers can easily apply this styling to any error message in the project by simply importing and using the `StyledError` component.\n\nHere is an example of how the `StyledError` component can be used:\n\n```\nimport { StyledError } from './path/to/StyledError';\n\nfunction MyForm() {\n  const [error, setError] = useState('');\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (/* some validation fails */) {\n      setError('Invalid input');\n    } else {\n      // submit form\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input type=\"text\" />\n      </label>\n      <StyledError>{error}</StyledError>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\nIn the example above, the `StyledError` component is used to display an error message if the form validation fails. The `error` state is set to the error message, and the `StyledError` component is rendered with the `error` message as its child.\n\nOverall, this code provides a reusable and consistent way to style error messages in the project.\n## Questions: \n 1. What is the purpose of the `inFormList` prop in the `StyledError` component?\n   - The `inFormList` prop is used to conditionally apply additional padding to the bottom and left of the `StyledError` component if it is rendered within a form list.\n\n2. What is the significance of the `css` function imported from `@emotion/react`?\n   - The `css` function allows for the creation of dynamic CSS styles within the `StyledError` component based on the value of the `inFormList` prop.\n\n3. What is the purpose of the `flex-basis` property in the `StyledError` component?\n   - The `flex-basis` property sets the initial size of the `StyledError` component when it is rendered within a flex container.","metadata":{"source":".autodoc/docs/markdown/components/Error/index.md"}}],["38",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/FormList/FormListConditional.tsx)\n\nThe code defines a React component called `FormListConditional` that renders a conditional list of items. The component takes in several props including a `label` string, a `checked` boolean, an `onChange` function, `children` as React nodes, an optional `id` string, and a `last` boolean. \n\nThe component renders a `StyledFormListConditional` div that has a `display` of `flex` and a `flex-direction` of `column`. The `last` prop is used to determine whether or not to add a `border-bottom` of `1px solid var(--grey-400)` to the div. The `checked` prop is used to determine whether or not to set the `background` of the div to `var(--grey-200)` or `var(--white)`.\n\nThe `StyledFormListConditionalLabel` div contains a `Checkbox` component that is used to toggle the `checked` prop. The `StyledFormListConditionalChevron` div contains a `ChevronDown` icon that is used to indicate whether or not the list is expanded. The `isOpen` prop is used to determine whether or not to rotate the chevron icon.\n\nThe `children` prop is an array of React nodes that are rendered conditionally based on the `checked` prop. If `checked` is `true`, the `children` are rendered inside a `StyledFormListConditionalChildren` div that contains a `StyledFormListConditionalChildrenContainer` div. The `children` are rendered as a list of `StyledFormListConditionalItem` divs. \n\nThe `last` prop is used to determine whether or not to add a `border-bottom` of `1px solid var(--grey-400)` to the last `StyledFormListConditionalItem` div.\n\nOverall, this component can be used to render a list of items that can be conditionally expanded or collapsed. It is useful for displaying hierarchical data or nested forms. The `Checkbox` component can be used to toggle the visibility of the nested items. The `ChevronDown` icon can be used to indicate whether or not the nested items are visible.\n## Questions: \n 1. What is the purpose of the `FormListConditional` component?\n- The `FormListConditional` component is a React functional component that renders a conditional form list with a label, checkbox, and children.\n\n2. What is the purpose of the `usePseudoUID` hook?\n- The `usePseudoUID` hook generates a unique ID for the `Checkbox` component if an ID is not provided as a prop.\n\n3. What is the purpose of the `StyledFormListConditionalChevron` component?\n- The `StyledFormListConditionalChevron` component is a styled div that renders a chevron icon that rotates based on the `checked` prop of the `FormListConditional` component.","metadata":{"source":".autodoc/docs/markdown/components/FormList/FormListConditional.md"}}],["39",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/FormList/FormListField.tsx)\n\nThe code defines a React component called `FormListField` that renders a form field with a label and an input component of a specified type. The component is used to create a list of form fields, where each field can be of a different type. The supported field types are defined in an enum called `FormListFieldType`, which includes `input`, `textarea`, `select`, `radioList`, `checkboxList`, and `tags`.\n\nThe `FormListField` component takes the following props:\n\n- `label`: a string that represents the label of the form field.\n- `type`: a value of the `FormListFieldType` enum that specifies the type of the input component to be rendered.\n- `fieldProps`: an object that contains the props to be passed to the input component.\n- `last`: a boolean that indicates whether the field is the last one in the list.\n- `first`: a boolean that indicates whether the field is the first one in the list.\n- `tooltip`: an optional object that contains the content of a tooltip to be displayed next to the label.\n\nThe component renders a `StyledFormListField` container that has a `StyledFormListFieldLabel` child that displays the label and an optional tooltip. The `StyledFormListField` container also has a `StyledFormListFieldField` child that renders the input component of the specified type. The input component is created dynamically based on the `type` prop using a mapping object called `formListFieldTypeComponentMap`. The mapping object maps each `FormListFieldType` value to an object that contains the input component and its variant.\n\nThe `FormListField` component uses the `usePseudoUID` hook to generate a unique ID for the input component. The `StyledFormListField` container has a `last` prop that determines whether a border is displayed at the bottom of the container. The `StyledFormListFieldField` container has `last` and `first` props that determine the border radius of the container.\n\nOverall, the `FormListField` component provides a flexible way to create a list of form fields with different input types and labels. It can be used in the larger project to create forms that require dynamic input fields.\n## Questions: \n 1. What is the purpose of the `FormListField` component?\n- The `FormListField` component is used to render a form field with a label and various input types such as input, textarea, select, radioList, checkboxList, and tags.\n\n2. What is the `formListFieldTypeComponentMap` object used for?\n- The `formListFieldTypeComponentMap` object is used to map each `FormListFieldType` to its corresponding component and variant.\n\n3. What is the purpose of the `Tooltip` component used in `FormListField`?\n- The `Tooltip` component is used to display a tooltip with additional information about the form field, if provided in the `tooltip` prop.","metadata":{"source":".autodoc/docs/markdown/components/FormList/FormListField.md"}}],["40",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/FormList/FormListGroup.tsx)\n\nThe code defines a React component called `FormListGroup` that renders a list of form fields. The component takes two props: `title` (optional) and `children` (required). The `children` prop is expected to be an array of React elements representing form fields.\n\nThe component renders a container `div` with a border and a title (if `title` prop is provided). The title is rendered as an `h3` element with a background color and a bottom border. The form fields are rendered as a list (`ul`) of items (`li`) inside the container. Each item is wrapped in a `fieldset` element with a unique ID generated using the `usePseudoUID` hook. The `tabIndex` attribute is set to 0 to make the fieldset focusable.\n\nIf a form field is a checkbox list, a \"Skip\" button is rendered next to it. The button is an absolute-positioned `button` element with zero opacity by default. When the fieldset is focused, the opacity of the button is set to 1. When the button is clicked, the focus is moved to the next form field in the list. This is achieved by finding the next fieldset element using the ID generated by `usePseudoUID` and calling its `focus` method.\n\nThe `FormListGroup` component is used in other parts of the project to render groups of related form fields. It provides a consistent layout and behavior for these groups, making it easier to maintain and update the code. For example, the component is used in the `EventForm` component to render the event details section, which includes fields for the event title, description, date, time, location, etc. By using `FormListGroup`, the event details section looks and behaves the same way as other form field groups in the project.\n## Questions: \n 1. What is the purpose of the `FormListGroup` component?\n- The `FormListGroup` component is used to group form fields together and display them in a list format.\n\n2. What is the `usePseudoUID` hook used for?\n- The `usePseudoUID` hook is used to generate a unique ID for each instance of the `FormListGroup` component.\n\n3. What is the purpose of the `SkipButtonHandler` function?\n- The `SkipButtonHandler` function is used to handle the skip button functionality for checkbox fields in the form. It focuses on the next field in the form when the skip button is clicked.","metadata":{"source":".autodoc/docs/markdown/components/FormList/FormListGroup.md"}}],["41",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/FormList/story.tsx)\n\nThe code defines a set of React components for rendering forms with various input types. The components are used to create a form list, which is a group of fields that can be dynamically added or removed from the form. \n\nThe `FormListConditional` component is used to conditionally render a group of fields based on whether a checkbox is checked or not. The `FormListField` component is used to render individual form fields, such as text inputs, select boxes, radio buttons, and checkboxes. The `FormListGroup` component is used to group related fields together and display them with a title.\n\nThe `StyledTestWrapper` component is a styled wrapper that is used to apply custom styles to the form fields. It is defined using the `styled` function from the `@emotion/styled` package.\n\nThe `EmbeddedFormListDefaultStory` component is a functional component that renders a default set of form fields. It uses the `useState` hook to manage the state of the form fields, such as the selected radio button value and the checked checkboxes. The `FormListDefaultStory` component is a Storybook story that renders the `EmbeddedFormListDefaultStory` component.\n\nOverall, this code provides a flexible and reusable set of components for rendering forms with various input types. It can be used in the larger project to create forms for collecting data from users.\n## Questions: \n 1. What is the purpose of the `FormList` component?\n- The `FormList` component is a collection of form fields that can be grouped together and conditionally rendered based on user input.\n\n2. What is the purpose of the `FormListConditional` component?\n- The `FormListConditional` component is used to conditionally render a group of form fields based on a checkbox input.\n\n3. What is the purpose of the `StyledTestWrapper` component?\n- The `StyledTestWrapper` component is a styled container for the `FormList` component and its child components. It allows for customization of the background and text color.","metadata":{"source":".autodoc/docs/markdown/components/FormList/story.md"}}],["42",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/GenericForm/GenericFormCategoryFactory.tsx)\n\nThe code defines a React functional component called `GenericFormCategoryFactory`. This component is responsible for rendering a form category with collapsible sections. The component takes in several props including `title`, `fieldGroups`, `state`, `dispatch`, and `collapsable`. \n\nThe `title` prop is a string that represents the title of the form category. The `fieldGroups` prop is an array of objects that represent the different groups of fields in the form category. Each group object contains a `translations` property, which is an array of objects that represent the translations for the group. The `state` and `dispatch` props are used to manage the state of the form. The `collapsable` prop is a boolean that determines whether the form category is collapsible or not.\n\nThe `GenericFormCategoryFactory` component uses the `useLanguage` hook to get the current language of the application. It then maps over the `fieldGroups` array and renders each group as a `FormListGroup` component. The `FormListGroup` component takes in a `title` prop, which is the name of the group. The `GenericFormFieldFactory` component is used to render each field in the group. The `validateCondition` function is used to determine whether a field should be rendered or not based on its condition.\n\nThe `useCollapsable` hook is used to make the form category collapsible. The `renderedGroups` variable is passed to the `useCollapsable` hook along with the `isCollapsed` and `setIsCollapsed` state variables. The `useCollapsable` hook returns a `renderedCollapsable` variable, which is the collapsible version of the form category.\n\nFinally, the `GenericFormCategoryFactory` component returns the collapsible or non-collapsible version of the form category based on the `collapsable` prop. If `collapsable` is true, the component renders the collapsible version of the form category with an `EntryFormHead` component that displays the title of the form category and an expander icon that toggles the visibility of the form category. If `collapsable` is false, the component renders the non-collapsible version of the form category with just the title and the fields. \n\nOverall, the `GenericFormCategoryFactory` component is a reusable component that can be used to render form categories with collapsible sections in the `kulturdaten-frontend` project.\n## Questions: \n 1. What is the purpose of the `GenericFormCategoryFactory` component?\n- The `GenericFormCategoryFactory` component is used to render a form category with collapsible sections based on the provided `fieldGroups` prop.\n\n2. What is the role of the `validateCondition` function?\n- The `validateCondition` function is used to determine whether a field should be displayed based on its condition. It checks the `state` object against the `condition` object and returns a boolean value.\n\n3. What is the purpose of the `GenericFormCategoryContainerProps` interface?\n- The `GenericFormCategoryContainerProps` interface defines the props that can be passed to the `GenericFormCategoryFactory` component, including `fieldGroups`, `title`, and `collapsable`. It also extends the `GenericFormStateConsumer` interface, which provides access to the form state and dispatch functions.","metadata":{"source":".autodoc/docs/markdown/components/GenericForm/GenericFormCategoryFactory.md"}}],["43",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/GenericForm/GenericFormFieldFactory.tsx)\n\nThe code defines a React component called `GenericFormFieldFactory` that generates a form field based on a given `GenericFormField` object. The component takes in several props, including the `field` object, which contains information about the type of form field to generate, and `state` and `dispatch` props that are used to manage the state of the form.\n\nThe `GenericFormFieldFactory` component uses several other components from the project, including `FormListConditional`, `FormListField`, and various `GenericFormField` components. These components are used to generate different types of form fields, such as input fields, select fields, and checkbox lists.\n\nThe `GenericFormFieldFactory` component uses a switch statement to determine which type of form field to generate based on the `type` property of the `field` object. For example, if the `type` property is `GenericFormFieldType.input`, the component generates an input field using the `FormListField` component.\n\nThe component also uses several utility functions from the project, such as `useLanguage` and `getTranslation`, to handle translations and language-specific data.\n\nOverall, the `GenericFormFieldFactory` component is a key part of the larger project's form generation system, allowing developers to easily generate different types of form fields based on a single `GenericFormField` object.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a component called `GenericFormFieldFactory` that renders a form field based on the type of the field passed as a prop.\n\n2. What other files or dependencies does this code rely on?\n- This code imports several components and utilities from other files in the project, including `FormListConditional`, `FormListField`, `useLanguage`, `getTranslation`, and `usePseudoUID`.\n\n3. What types of form fields are supported by this code?\n- This code supports several types of form fields, including conditional fields, input fields, textarea fields, select fields, radio list fields, checkbox list fields, and tag fields.","metadata":{"source":".autodoc/docs/markdown/components/GenericForm/GenericFormFieldFactory.md"}}],["44",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/GenericForm/story.tsx)\n\nThis code defines two stories for a generic form component in a React project called Kulturdaten Frontend. The purpose of the generic form is to provide a reusable form structure that can be used for different types of data entry. The stories demonstrate how the form can be used for two different types of data: location accessibility and test services.\n\nThe code imports several dependencies, including styled components, Storybook, and two configuration files for location accessibility and test services. It also imports a wrapper component for the entry form and a custom hook called `useGenericFormStructure`.\n\nThe `useGenericFormStructure` hook is used to generate the form structure based on the configuration file and any additional options passed as arguments. The hook returns an object with a `renderedForm` property, which is the generated form structure.\n\nThe code defines two React functional components, `EmbeddedGenericFormLocationStory` and `EmbeddedGenericFormServicesStory`, which use the `useGenericFormStructure` hook to generate the form structure for location accessibility and test services, respectively. The components wrap the generated form structure in a styled component called `StyledTestWrapper` and the `EntryFormWrapper` component.\n\nThe code also defines two Storybook stories, `GenericFormAccessibilityLocationStory` and `GenericFormServicesStory`, which render the `EmbeddedGenericFormLocationStory` and `EmbeddedGenericFormServicesStory` components, respectively. The stories are used to visually test the form component and demonstrate how it can be used in different contexts.\n\nOverall, this code demonstrates how the generic form component can be used to generate a reusable form structure for different types of data entry. The `useGenericFormStructure` hook is a key part of this functionality, as it generates the form structure based on a configuration file and any additional options passed as arguments. The Storybook stories provide a way to visually test the component and demonstrate its flexibility and reusability.\n## Questions: \n 1. What is the purpose of the `useGenericFormStructure` hook?\n   - The `useGenericFormStructure` hook is used to generate a form structure based on the provided configuration object.\n2. What is the significance of the `StyledTestWrapper` component?\n   - The `StyledTestWrapper` component is a styled component that defines the layout and styling of the form elements.\n3. What is the difference between the `GenericFormAccessibilityLocationStory` and `GenericFormServicesStory` components?\n   - The `GenericFormAccessibilityLocationStory` component generates a form structure based on the `locationAccessibility` configuration object, while the `GenericFormServicesStory` component generates a form structure based on the `testServices` configuration object.","metadata":{"source":".autodoc/docs/markdown/components/GenericForm/story.md"}}],["45",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/GenericForm/useGenericFormStructure.tsx)\n\nThe code defines a set of types, actions, and a reducer function for managing the state of a generic form. It also exports a custom hook that uses this reducer to manage the state of a form based on a given structure of form categories and fields.\n\nThe `GenericFormState` type is an object that maps field names to their current values. The `GenericFormAction` type is an object that describes a change to the form state, with a `type` property indicating the type of action and a `payload` property containing any additional data needed to perform the action. The `GenericFormActions` enum defines the possible action types, which are `init` and `set`.\n\nThe `genericFormReducer` function is a standard Redux-style reducer that takes the current state and an action and returns a new state based on the action. For the `init` action, it simply returns the provided state. For the `set` action, it returns a new state object with the specified field updated to the specified value.\n\nThe `useGenericFormStructure` hook takes a structure of form categories and fields, as well as an optional initial state object, and returns an object with three properties: `renderedForm`, `state`, and `dispatch`. The `renderedForm` property is a React element that renders the form based on the provided structure. The `state` property is the current state of the form, and the `dispatch` property is a function that can be used to dispatch actions to update the form state.\n\nThe `useGenericFormStructure` hook uses the `useReducer` hook from React to manage the form state using the `genericFormReducer` function. It maps over the provided form structure to render each category as a collapsible container with the appropriate fields inside. It also uses the `GenericFormCategoryFactory` component to render each field group within a category.\n\nOverall, this code provides a flexible and reusable way to manage the state of a generic form in a React application. By defining a structure of form categories and fields, developers can easily create and manage complex forms with minimal boilerplate code.\n## Questions: \n 1. What is the purpose of the `GenericFormStateConsumer` interface?\n- The `GenericFormStateConsumer` interface defines an object with a `state` property of type `GenericFormState` and a `dispatch` property of type `Dispatch<GenericFormAction>`, which can be used to consume the state and dispatch actions of a generic form.\n\n2. What do the `GenericFormActions` enum and `genericFormReducer` function do?\n- The `GenericFormActions` enum defines two actions, `init` and `set`, which can be dispatched to update the state of a generic form. The `genericFormReducer` function is a reducer that handles these actions and returns a new state based on the current state and the action payload.\n\n3. What does the `useGenericFormStructure` hook return?\n- The `useGenericFormStructure` hook returns an object with three properties: `renderedForm`, which is a React element representing the rendered form based on the provided `structure` and current `state`; `state`, which is the current state of the form; and `dispatch`, which is a function that can be used to dispatch actions to update the form state.","metadata":{"source":".autodoc/docs/markdown/components/GenericForm/useGenericFormStructure.md"}}],["46",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/HoursField/HoursFieldItem.tsx)\n\nThe code defines a React component called `HoursFieldItem` that renders a form field for inputting opening hours for a cultural event. The component takes in three props: `hoursGroup`, `dispatch`, and `index`. \n\nThe `hoursGroup` prop is an object that contains information about the opening hours for a particular day or days. It has the following shape: \n\n```\n{\n  from: string,\n  to: string,\n  hours: [\n    {\n      attributes: {\n        from: string,\n        to: string,\n        weekday: string\n      }\n    }\n  ]\n}\n```\n\nThe `from` and `to` properties represent the opening and closing times for the event, respectively. The `hours` property is an array of objects that represent the days of the week that the opening hours apply to. Each object has an `attributes` property that contains the `from` and `to` times as well as the `weekday` (e.g. \"Monday\", \"Tuesday\", etc.).\n\nThe `dispatch` prop is a function that is used to update the `hoursGroup` object. It takes an object with a `type` property (which can be \"update\" or \"remove\") and a `payload` property that contains the updated `hoursGroup` object or the index of the `hoursGroup` object to be removed.\n\nThe `index` prop is the index of the `hoursGroup` object in the array of opening hours.\n\nThe component renders a form field with three inputs: two time inputs for the opening and closing times and a `DayPicker` component for selecting the days of the week that the opening hours apply to. There is also a \"remove\" button that removes the `hoursGroup` object from the array of opening hours.\n\nThe component also has some styling applied to it using the `styled` function from the `@emotion/styled` library. The component is wrapped in a `StyledHoursFieldItem` component that applies some basic styling to the form field. If the opening time is after the closing time, the border color of the form field changes to red and an error message is displayed.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `HoursFieldItem` that renders a form field for inputting hours of operation for a cultural institution.\n\n2. What external libraries or dependencies does this code rely on?\n- This code relies on several external libraries, including `@emotion/react`, `@emotion/styled`, and `react`.\n\n3. What is the purpose of the `useMemo` hook in this code?\n- The `useMemo` hook is used to memoize a boolean value that determines whether the inputted hours of operation are valid (i.e. the \"from\" time is earlier than the \"to\" time). This helps to optimize performance by avoiding unnecessary re-renders of the component.","metadata":{"source":".autodoc/docs/markdown/components/HoursField/HoursFieldItem.md"}}],["47",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/HoursField/index.tsx)\n\nThe code defines a React component called `HoursField` that renders a list of `HoursFieldItem` components and an \"Add\" button. The `HoursField` component receives an array of `HoursGroup` objects and a `dispatch` function as props. The `HoursGroup` type is defined as an object with three properties: `from` and `to` (strings representing the start and end times of a time range) and `hours` (an array of `Hours` objects). The `Hours` type is not defined in this file, but it is imported from another file. \n\nThe `HoursField` component maps over the `hoursState` array and renders an `HoursFieldItem` component for each `HoursGroup` object. The `HoursFieldItem` component receives the `hoursGroup` object, the `dispatch` function, an `index` number, and a `key` prop. The `HoursField` component also renders an \"Add\" button that, when clicked, dispatches an `add` action with a default `HoursGroup` object as the payload. The `add` action adds the default `HoursGroup` object to the `hoursState` array. \n\nThe `hoursReducer` function is a reducer function that takes a `state` and an `action` as arguments and returns a new state based on the action type. The `state` argument is an array of `HoursGroup` objects, and the `action` argument is an object with a `type` property and a `payload` property. The `type` property is an enum with four possible values: `add`, `init`, `remove`, and `update`. The `payload` property is an object that contains data needed to update the state. \n\nThe `useHoursField` hook is a custom hook that returns an object with two properties: `renderedHoursField` and `init`. The `renderedHoursField` property is a React element that renders the `HoursField` component with the `hoursState` array and the `dispatch` function passed as props. The `init` property is a function that takes an array of `Hours` objects as an argument and dispatches an `init` action with the `hoursToHoursGroups` function as the payload. The `init` action initializes the `hoursState` array with `HoursGroup` objects created from the `Hours` objects passed as an argument. \n\nOverall, this code defines a reusable component (`HoursField`) and a custom hook (`useHoursField`) that can be used to manage a list of time ranges (`HoursGroup` objects) in a React application. The `HoursField` component renders a list of `HoursFieldItem` components and an \"Add\" button, and the `useHoursField` hook provides a way to initialize and update the `hoursState` array.\n## Questions: \n 1. What is the purpose of the `HoursField` component?\n- The `HoursField` component is used to display and manage a list of `HoursGroup` objects, and allows users to add, remove, and update these groups.\n\n2. What is the `useHoursField` hook used for?\n- The `useHoursField` hook returns a rendered `HoursField` component and an `init` function that can be used to initialize the `hoursState` of the `HoursField` with an array of `Hours` objects. It also takes an `onChange` function that is called whenever the `hoursState` is updated.\n\n3. What is the purpose of the `hoursReducer` function?\n- The `hoursReducer` function is a reducer that takes a `HoursState` and a `HoursAction` and returns a new `HoursState` based on the action type and payload. It handles actions for initializing, adding, removing, and updating `HoursGroup` objects in the state.","metadata":{"source":".autodoc/docs/markdown/components/HoursField/index.md"}}],["48",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Loading/LoadingContext.tsx)\n\nThe code defines a React context for managing a loading screen component. The LoadingContext type defines the shape of the context object, which includes properties for rendering the loading screen, setting its visibility, loading state, title, message, and error. \n\nThe LoadingContextProvider component is a wrapper that provides the context to its children. It uses the useState hook to manage the state of the loading screen properties, and renders the LoadingScreen component if the render property is true. \n\nThis context can be used by any component that needs to display a loading screen while waiting for data or performing an action. By wrapping a component tree with the LoadingContextProvider, any child component can access the loading screen properties and update them as needed. \n\nFor example, a search results page could use this context to display a loading screen while fetching data from an API. The component responsible for fetching the data could set the loading property to true, and the LoadingScreen component would be rendered with the appropriate message and title. Once the data is fetched, the loading property could be set to false, and the LoadingScreen would be hidden. \n\nOverall, this code provides a simple and reusable way to manage loading screens in a React application.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React context and provider for a loading screen component.\n\n2. What are the properties of the `loadingScreen` object in the `LoadingContext` type?\n- The `loadingScreen` object has properties for rendering and visibility of the loading screen, as well as properties for the loading state, title, message, and error.\n\n3. What is the purpose of the `LoadingContextProvider` component?\n- The `LoadingContextProvider` component wraps its children with the `LoadingContext` provider and sets up state for the loading screen properties. It also conditionally renders the `LoadingScreen` component based on the `render` state.","metadata":{"source":".autodoc/docs/markdown/components/Loading/LoadingContext.md"}}],["49",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Loading/LoadingScreen.tsx)\n\nThe code defines a loading screen component and a hook that can be used to display the loading screen with a message and/or error while an asynchronous operation is being performed. \n\nThe `StyledLoadingScreen` component is a styled div that is fixed to the top left corner of the screen and has a black background with 85% opacity. It has a transition effect that slides it in or out of view depending on the `direction` prop, which is an enum with two possible values: `in` or `out`. The `visible` prop determines whether the component is displayed or not. The component contains a `StyledLoadingScreenContent` component that displays the loading message, error message, or checkmark icon depending on the state of the loading operation. \n\nThe `StyledLoadingScreenContent` component is a styled div that contains the loading message, error message, or checkmark icon. It has a transition effect that slides it in or out of view depending on the `direction` prop. The `visible` prop determines whether the component is displayed or not. \n\nThe `StyledLoadingScreenWobbler` component is a styled div that displays a loading animation. It has an optional `invert` prop that changes the color of the animation. \n\nThe `LoadingScreen` component is a functional component that takes in a `title`, `visible`, `loading`, `message`, and `error` prop. It renders the `StyledLoadingScreen` and `StyledLoadingScreenContent` components with the appropriate props based on the state of the loading operation. \n\nThe `useLoadingScreen` hook returns a function that takes in a `title`, `load` function, `message`, `preDelayInMs`, and `postDelayInMs` props. When called, it sets the loading screen state to display the loading message, calls the `load` function, and then sets the loading screen state to display the checkmark icon or error message depending on the result of the `load` function. The `preDelayInMs` and `postDelayInMs` props are optional delays that can be used to control the timing of the loading screen display. \n\nOverall, this code provides a reusable loading screen component and hook that can be used throughout the project to display loading messages and errors during asynchronous operations.\n## Questions: \n 1. What is the purpose of the `LoadingScreen` component?\n- The `LoadingScreen` component is used to display a loading screen with a title, message, and optional error message or checkmark.\n\n2. What is the purpose of the `useLoadingScreen` hook?\n- The `useLoadingScreen` hook returns a function that can be used to display the `LoadingScreen` component with custom title, message, and loading logic.\n\n3. What is the purpose of the `StyledLoadingScreenWobbler` component?\n- The `StyledLoadingScreenWobbler` component is a styled component used to display a wobbling loading bar.","metadata":{"source":".autodoc/docs/markdown/components/Loading/LoadingScreen.md"}}],["50",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/MouseTooltip/index.tsx)\n\nThe code defines a React component called `MouseTooltip` that displays a tooltip at the position of the mouse cursor or a specified position when a specified element is hovered over. The tooltip is a styled div that is fixed to the top-left corner of the screen and has a black background with white text. The tooltip is only visible when the mouse cursor is over the specified element or when the component is in focus.\n\nThe component takes in several props: `children` which is the content to be displayed in the tooltip, `hoverElement` which is a reference to the element that triggers the tooltip when hovered over, `inFocus` which is a boolean indicating whether the component is in focus, and `position` which is an object containing the x and y coordinates of the tooltip when `inFocus` is true.\n\nThe component uses the `useState` hook to manage the state of the tooltip's visibility, whether the current event is a touch event, and the x and y coordinates of the mouse cursor. It also uses the `useEffect` hook to add event listeners for mouse enter, mouse leave, touch start, and mouse move events on the specified element and the window. When the mouse enters the specified element, the `show` state is set to true, and when it leaves, `show` is set to false. When the mouse moves, the `mouseX` and `mouseY` states are updated to the current position of the mouse cursor. When a touch event occurs, the `isTouchEvent` state is set to true to prevent rendering of the tooltip.\n\nThe `StyledMouseTooltip` component is a styled div that is positioned using the `x` and `y` props, which are the x and y coordinates of the mouse cursor or the specified position when `inFocus` is true. The `visibility` property is set to `inherited` when the `x` and `y` props are not 0, indicating that the tooltip should be visible.\n\nThe `MouseTooltip` component returns the `StyledMouseTooltip` component when the `isTouchEvent` state is false, the `show` state is true, and the `mouseX` and `mouseY` states are not 0, or when `inFocus` is true. Otherwise, it returns null.\n\nThis component can be used in the larger project to provide tooltips for various elements when hovered over or in focus. It allows for customization of the tooltip content and position, and can be easily integrated into other components.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a MouseTooltip component that displays a tooltip at the position of the mouse cursor or a specified position when a specified element is hovered over or in focus.\n\n2. What dependencies are being used in this code?\n- This code imports styled from '@emotion/styled' and useState, useEffect, and RefObject from 'react'.\n\n3. How does this code handle touch events?\n- This code prevents rendering of the tooltip on touch events by setting the isTouchEvent state to true and checking for this state in the return statement of the MouseTooltip component. It also adds a touchstart event listener to the specified element to set the isTouchEvent state to true.","metadata":{"source":".autodoc/docs/markdown/components/MouseTooltip/index.md"}}],["51",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Publish/Requirement.tsx)\n\nThe code defines a React component called `Requirement` that renders a styled span element with a checkmark icon, some text, and an optional link. The component takes three props: `text`, a string or React node that represents the requirement text; `fulfilled`, a boolean that indicates whether the requirement is fulfilled or not; and `link`, an optional object that contains information about the link associated with the requirement.\n\nThe component uses the `styled` function from the `@emotion/styled` package to create a styled span element with a background color, text color, border radius, font size, line height, display, and padding. The background color and text color depend on the `fulfilled` prop, which determines whether the background color is a light green or a light red and whether the text color is a semi-transparent black or a solid black. The component also has a box shadow and a transform effect that are triggered on hover and active states if the `hasLink` prop is true.\n\nThe component also defines two nested styled span elements: `StyledRequirementMark` and `StyledRequirementText`. The former is a span element that contains a checkmark icon if the `fulfilled` prop is true, and a red circle if it is false. The latter is a span element that contains the `text` prop.\n\nIf the `link` prop is defined, the component wraps the styled span element in a `Link` component from the `next/link` package and an `a` element with some additional styles. The `Link` component takes the `href` prop from the `link` object and passes it to the `a` element as a `href` attribute. The `a` element also has an `aria-label` attribute that takes the `ariaLabel` prop from the `link` object. If the `link` object has a `targetRef` property, the component adds a `handleClick` function that focuses on the `targetRef` when the link is clicked.\n\nThe `Requirement` component can be used in the larger project to display a list of requirements with their status and links to relevant pages. For example, it could be used in a form that requires users to fill out certain fields or upload certain files before submitting. The component could also be used in a dashboard that displays the progress of a project or a task list that shows what needs to be done.\n## Questions: \n 1. What is the purpose of the `Requirement` component?\n- The `Requirement` component is used to display a requirement with an optional link and a checkmark indicating whether the requirement has been fulfilled or not.\n\n2. What is the significance of the `StyledRequirementMark` component?\n- The `StyledRequirementMark` component is responsible for rendering the checkmark icon and a red circle if the requirement has not been fulfilled.\n\n3. What is the role of the `handleClick` function in the `Requirement` component?\n- The `handleClick` function is used to focus on the target anchor element when the link is clicked.","metadata":{"source":".autodoc/docs/markdown/components/Publish/Requirement.md"}}],["52",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Publish/index.tsx)\n\nThe code defines a React component called `Publish` that renders a UI element for publishing an entry in the `kulturdaten-frontend` project. The component takes in several props, including `category`, `query`, `requirements`, and `onPublish`. \n\nThe `category` prop is an object that represents the category of the entry being published. The `query` prop is an object that represents the query parameters for the current page. The `requirements` prop is an array of objects that represent the requirements that must be fulfilled before the entry can be published. The `onPublish` prop is a function that is called when the user clicks the \"Publish\" button.\n\nThe `Publish` component uses several other components and hooks from the `kulturdaten-frontend` project, including `Requirement`, `useEntry`, `useApiCall`, `useMutateList`, `useT`, `useRouter`, and `Button`. \n\nThe `Publish` component renders a UI element that displays the requirements that must be fulfilled before the entry can be published. The requirements are displayed as a list of items, with each item showing the requirement text and whether the requirement has been fulfilled. The component also displays a \"Publish\" button that is disabled until all requirements have been fulfilled. When the user clicks the \"Publish\" button, the `onPublish` function is called, which updates the entry status to \"published\" and mutates the entry and list of entries.\n\nThe `usePublish` hook is also defined in the code, which takes in several props, including `category`, `query`, `formRequirementFulfillments`, and `onPublish`. The `usePublish` hook returns an object that contains a `renderedPublish` property, which is a React element that renders the `Publish` component. The `usePublish` hook is used to render the `Publish` component on pages where the entry can be published.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a component called `Publish` and a hook called `usePublish` that are used to render a UI element for publishing content on a website. The UI element displays a list of requirements that must be fulfilled before the content can be published, and a button to initiate the publishing process.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several external libraries and dependencies, including `@emotion/styled`, `@emotion/react`, `node:querystring`, `react`, `next/router`, and several custom modules defined in the `lib` and `config` directories.\n\n3. What is the role of the `useMemo` hook in this code?\n- The `useMemo` hook is used to memoize the result of a computation that determines whether all of the requirements for publishing the content have been fulfilled. This memoized value is used to enable or disable the publishing button in the UI element.","metadata":{"source":".autodoc/docs/markdown/components/Publish/index.md"}}],["53",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Publish/story.tsx)\n\nThe code above is a Storybook story for the `Publish` component in the `kulturdaten-frontend` project. Storybook is a tool for building UI components in isolation and documenting them. The `Publish` component is a part of the project's UI and is used for publishing events and offers. \n\nThe `import` statements at the beginning of the code import the necessary dependencies for the story, including the `Story` component from `@storybook/react`, the `Publish` component from the current directory, and the `useCategories` hook from the `categories` module in the `config` directory.\n\nThe `export default` statement exports a Storybook story with the title \"Publish\". The `export const PublishDefaultStory` statement exports a function component that renders the `Publish` component with default props. The `useCategories` hook is called to retrieve the categories for the `Publish` component, and the `category` prop is set to `categories.organizer`. The `query` prop is set to `undefined`.\n\nThis story can be used to showcase the `Publish` component in Storybook and test its functionality with different props. For example, the `query` prop could be set to a specific value to test the component's search functionality. The `Publish` component itself can be used in the larger project to allow users to publish events and offers. \n\nExample usage of the `Publish` component in the project:\n\n```\nimport { Publish } from './components/Publish';\n\nfunction App() {\n  return (\n    <div>\n      <Publish category=\"event\" query=\"concert\" />\n    </div>\n  );\n}\n```\n\nIn the example above, the `Publish` component is imported and rendered with the `category` prop set to \"event\" and the `query` prop set to \"concert\". This would display the `Publish` component with the \"event\" category selected and a search input with \"concert\" as the default value.\n## Questions: \n 1. What is the purpose of the `Publish` component?\n   - The `Publish` component is being imported from a file and is used to render something related to publishing.\n2. What is the `useCategories` hook doing?\n   - The `useCategories` hook is being called to retrieve categories data from the configuration file.\n3. What is the `PublishDefaultStory` function doing?\n   - The `PublishDefaultStory` function is a storybook story that renders the `Publish` component with a specific category and undefined query.","metadata":{"source":".autodoc/docs/markdown/components/Publish/story.md"}}],["54",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Radio/RadioList.tsx)\n\nThe code defines a React component called `RadioList` that renders a list of radio buttons with labels and optional links. The component takes in several props, including an array of `options` that define the labels and values for each radio button, a `name` and `id` for the radio button group, and a `label` and `ariaLabel` for the entire radio button list. The `value` and `onChange` props are used to control the selected radio button and update it respectively. \n\nThe component uses Emotion to style its elements, including a `StyledRadioList` container, a `StyledRadioListLabel` for the list label, a `StyledRadioListItems` container for the radio button list, and a `StyledRadioListItem` container for each radio button and its label. The `StyledRadioListItem` also includes an optional link container, `StyledRadioListItemLinkA`, that wraps an external link icon and a link title.\n\nThe `RadioList` component uses the `Radio` component from the same directory to render each radio button. The `Radio` component takes in several props, including a `name`, `id`, `label`, `value`, `checked`, `onChange`, `required`, `softRequired`, and `valid`. These props are used to define the radio button's label, value, checked state, and validation status. \n\nOverall, the `RadioList` component provides a reusable way to render a list of radio buttons with labels and optional links, and allows for easy customization of its appearance and behavior through its props. It can be used in various forms and surveys throughout the larger project to collect user input. \n\nExample usage:\n\n```\n<RadioList\n  options={[\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2', link: { href: 'https://example.com', title: 'Example link' } },\n    { label: 'Option 3', value: '3' },\n  ]}\n  name=\"example\"\n  id=\"example\"\n  label=\"Example radio button list\"\n  ariaLabel=\"Example radio button list\"\n  value=\"1\"\n  onChange={(value) => console.log(value)}\n  required\n  softRequired\n  variant={ComponentVariants.formList}\n/>\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `RadioList` that renders a list of radio buttons with optional links.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several libraries and dependencies, including `@emotion/styled`, `@emotion/react`, `react-feather`, and custom modules from the project's `lib` and `globals` directories.\n\n3. What props can be passed to the `RadioList` component?\n- The `RadioList` component accepts several props, including `options`, `name`, `id`, `label`, `ariaLabel`, `value`, `onChange`, `required`, `softRequired`, and `variant`. These props are used to customize the appearance and behavior of the radio button list.","metadata":{"source":".autodoc/docs/markdown/components/Radio/RadioList.md"}}],["55",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Radio/index.tsx)\n\nThe code defines a React component called `Radio` that renders a custom radio input element with a label. The component is styled using the `styled` function from the `@emotion/styled` library and the `css` function from the `@emotion/react` library.\n\nThe component takes several props, including `id`, `label`, `ariaLabel`, `onChange`, `checked`, `name`, `disabled`, `required`, `softRequired`, `valid`, and `value`. These props are used to configure the behavior and appearance of the radio input.\n\nThe component renders a container element (`StyledRadio`) that contains the radio input and label. The radio input is rendered using the `StyledRadioInput` component, which is a styled `input` element. The `StyledRadioInput` component takes several props, including `softRequired` and `valid`, which are used to apply styles to the input based on its validation state. The `StyledRadioInput` component also renders a checkmark icon (`StyledRadioInputCheck`) when the input is checked.\n\nThe label is rendered using the `StyledRadioLabel` component, which is a styled `label` element. The `StyledRadioLabel` component takes a `disabled` prop, which is used to apply styles to the label when the input is disabled.\n\nOverall, this component can be used to render custom radio inputs with labels that can be styled and configured using props. It can be used in forms or other contexts where radio inputs are needed. An example usage of the component might look like this:\n\n```\n<Radio\n  id=\"radio1\"\n  label=\"Option 1\"\n  checked={true}\n  onChange={(e) => console.log(e.target.value)}\n  value=\"option1\"\n/>\n```\n## Questions: \n 1. What is the purpose of the `Radio` component?\n- The `Radio` component is a React functional component that renders a radio input with a label and optional validation styles.\n\n2. What is the purpose of the `StyledRadio` and `StyledRadioInput` components?\n- The `StyledRadio` and `StyledRadioInput` components are styled components that define the styles for the radio input and its container.\n\n3. What is the purpose of the `softRequired` prop?\n- The `softRequired` prop is a boolean that indicates whether the radio input is required for form submission, but allows for a non-selected state. It is used to apply validation styles when the input is not selected.","metadata":{"source":".autodoc/docs/markdown/components/Radio/index.md"}}],["56",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Radio/story.tsx)\n\nThe code above is a React component that renders a radio list. It imports the `styled` function from the `@emotion/styled` package, the `Story` component from the `@storybook/react` package, and the `useState` hook and the `RadioList` component from a local file called `RadioList.tsx`. \n\nThe component exports a `RadioListStory` component that is used to display the radio list in a Storybook story. The `RadioListStory` component uses the `useState` hook to manage the selected value of the radio list. It renders a `StyledTestWrapper` component that is styled using the `styled` function. The `StyledTestWrapper` component is a `div` element that has a grid layout with one column and a padding of 1.5rem. It also has two optional props: `background` and `color`, which can be used to set the background color and text color of the component.\n\nInside the `StyledTestWrapper` component, the `RadioList` component is rendered with some props. The `value` prop is set to the current selected value of the radio list, which is managed by the `useState` hook. The `onChange` prop is a callback function that is called when the selected value of the radio list changes. It updates the state of the `value` variable with the new selected value. The `id` and `name` props are used to set the `id` and `name` attributes of the radio list. Finally, the `options` prop is an array of objects that represent the radio list options. Each object has an `id`, a `label`, and a `value` property.\n\nThe `RadioListStory` component is given a `storyName` property of 'Radio List', which is used to display the name of the story in the Storybook UI.\n\nOverall, this code is a reusable component that can be used to render a radio list with customizable styles and options. It is used in the larger project to display a radio list of options for the user to select from.\n## Questions: \n 1. What is the purpose of the `RadioList` component?\n- The `RadioList` component is used to render a list of radio buttons with customizable options and values.\n\n2. What is the purpose of the `StyledTestWrapper` component?\n- The `StyledTestWrapper` component is a styled container that wraps the `RadioList` component and provides customizable background and text color props.\n\n3. What is the purpose of the `RadioListStory` function?\n- The `RadioListStory` function is a Storybook story that renders the `RadioList` component with sample data and allows for interactive testing of the component's functionality.","metadata":{"source":".autodoc/docs/markdown/components/Radio/story.md"}}],["57",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/RadioSwitch/index.tsx)\n\nThe code defines a React component called `RadioSwitch` that renders a group of radio buttons with customizable labels and icons. The component takes in several props, including `name`, `value`, `onChange`, `options`, `label`, and `labelPosition`. \n\nThe `name` prop is used to group the radio buttons together, while the `value` prop specifies the currently selected radio button. The `onChange` prop is a callback function that is called when the user selects a radio button. The `options` prop is an array of objects that define the possible radio button values, labels, and icons. The `label` prop is an optional string that specifies a label for the radio button group, while the `labelPosition` prop specifies whether the label should be positioned to the left or top of the radio buttons.\n\nThe component uses Emotion to define several styled components, including `StyledRadioSwitch`, `StyledRadioSwitchOptions`, `StyledRadioSwitchOption`, `StyledRadioSwitchOptionInput`, `StyledRadioSwitchOptionLabel`, `StyledRadioSwitchOptionLabelText`, and `StyledRadioSwitchOptionLabelIcon`. These styled components define the appearance and layout of the radio button group and its individual radio buttons.\n\nThe `RadioSwitch` component renders a `StyledRadioSwitch` component that contains a `Label` component (if the `label` prop is specified) and a `StyledRadioSwitchOptions` component. The `StyledRadioSwitchOptions` component contains a list of `StyledRadioSwitchOption` components, one for each option specified in the `options` prop. Each `StyledRadioSwitchOption` component contains a `StyledRadioSwitchOptionLabel` component that displays the label and icon for the option, as well as a hidden `StyledRadioSwitchOptionInput` component that represents the radio button itself. \n\nWhen the user selects a radio button, the `onChange` callback is called with the value of the selected radio button. If no `onChange` callback is specified, the component updates its internal state to reflect the selected radio button.\n\nOverall, the `RadioSwitch` component provides a customizable and accessible way to render a group of radio buttons in a React application. It can be used in conjunction with other components in the `kulturdaten-frontend` project to build complex user interfaces for cultural data management.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `RadioSwitch` that renders a group of radio buttons with customizable labels and icons.\n\n2. What external libraries or dependencies does this code use?\n- This code uses the `@emotion/react` and `@emotion/styled` libraries for styling, the `react-feather` library for icons, and the `focusStyles` constant from a `globals/Constants` file.\n\n3. What props can be passed to the `RadioSwitch` component?\n- The `RadioSwitch` component accepts the following props: `name` (string), `value` (string), `onChange` (function), `options` (array of objects with `value`, `label`, `icon`, `id`, and `ariaLabel` properties), `label` (string), and `labelPosition` (enum with `left` and `top` values).","metadata":{"source":".autodoc/docs/markdown/components/RadioSwitch/index.md"}}],["58",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/RadioVariant/index.tsx)\n\nThe code defines a React component called `RadioVariant` that renders a group of radio buttons with customizable labels and options. The component takes in several props, including `name`, `value`, `onChange`, `options`, and `labelledBy`. \n\nThe `name` prop is a string that specifies the name of the radio button group. The `value` prop is an optional string that specifies the currently selected radio button. The `onChange` prop is an optional function that is called when the user selects a radio button. The `options` prop is an array of objects that specify the available radio button options. Each object has a `value` property that specifies the value of the radio button, a `label` property that specifies the label of the radio button, an optional `id` property that specifies the ID of the radio button, an optional `ariaLabel` property that specifies the aria-label of the radio button, and an optional `children` property that specifies any child elements to be rendered alongside the radio button label.\n\nThe `labelledBy` prop is an optional string that specifies the ID of the element that labels the radio button group. \n\nThe `RadioVariant` component renders a `StyledRadioVariant` div that contains a `StyledRadioVariantOptions` div. The `StyledRadioVariantOptions` div contains a `StyledRadioVariantOption` div for each radio button option specified in the `options` prop. Each `StyledRadioVariantOption` div contains a `StyledRadioVariantOptionLabel` div that contains the label and radio button input for the option. The `StyledRadioVariantOptionLabel` div also contains a `StyledRadioVariantOptionCheck` div that displays a checkmark when the radio button is selected. \n\nThe `RadioVariant` component uses Emotion to style the radio button group and its components. The `StyledRadioVariant` div is styled to display its child elements in a column layout. The `StyledRadioVariantOptions` div is styled to display its child elements in a column layout on small screens and a row layout on medium screens and above. The `StyledRadioVariantOption` div is styled to grow to fill the available space and display its child elements in a row layout. The `StyledRadioVariantOptionLabel` div is styled to display the radio button label and input, with the label text aligned to the left or top depending on the `RadioVariantLabelPosition` prop. The `StyledRadioVariantOptionCheck` div is styled to display a checkmark when the radio button is selected. \n\nOverall, the `RadioVariant` component provides a customizable and accessible way to render a group of radio buttons in a React application. It can be used in conjunction with other components in the `kulturdaten-frontend` project to build UI elements for browsing and selecting cultural events.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `RadioVariant` that renders a group of radio buttons with customizable labels and options.\n\n2. What are the styled components used in this code and what are their purposes?\n- The styled components used in this code include `StyledRadioVariant`, `StyledRadioVariantOptions`, `StyledRadioVariantOption`, `StyledRadioVariantOptionMarker`, `StyledRadioVariantOptionInput`, `StyledRadioVariantOptionCheck`, `StyledRadioVariantOptionLabel`, `StyledRadioVariantOptionLabelContent`, `StyledRadioVariantOptionLabelHeadline`, and `StyledRadioVariantOptionLabelChildren`. They are used to define the styles for the different parts of the radio button group, such as the label, input, and checkmark.\n\n3. What props can be passed to the `RadioVariant` component and what are their purposes?\n- The props that can be passed to the `RadioVariant` component include `name` (string, required), `value` (string), `onChange` (function), `options` (array of objects with `value`, `label`, `id`, `ariaLabel`, and `children` properties), and `labelledBy` (string). They are used to customize the behavior and appearance of the radio button group, such as the selected value, options, and accessibility labels.","metadata":{"source":".autodoc/docs/markdown/components/RadioVariant/index.md"}}],["59",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/RadioVariant/story.tsx)\n\nThe code defines a story for a radio variant component and exports it for use in the larger project. The radio variant component is used to display a set of radio buttons with associated labels and descriptions. The component is defined in a separate file and imported into this file. The code also imports the `useState` hook from the React library and the `mq` function and `Breakpoint` enum from the project's `globals/Constants` file.\n\nThe `StoryWrapper` component is defined using the `styled` function from the `@emotion/styled` library. It sets some styles for a container element that will wrap the radio variant component. The styles include setting the display to flex, setting the padding, width, and flex-direction properties, and using the `mq` function to set different padding values for different screen sizes.\n\nThe `RadioVariantDefaultStory` function is defined as a Storybook story and exported for use in the larger project. It uses the `useState` hook to define a state variable `value` and a function `setValue` to update the state. The `RadioVariant` component is then rendered with some props, including the `value` and `onChange` props that use the state variables, a `name` prop to set the name of the radio button group, and an `options` prop that defines the radio button options and their associated labels and descriptions. The `options` prop is an array of objects, each with a `value`, `label`, and `children` property. The `value` property is the value of the radio button, the `label` property is the label displayed next to the radio button, and the `children` property is an array of React elements that define the description of the radio button option.\n\nOverall, this code defines a Storybook story for a radio variant component that can be used in the larger project to display a set of radio buttons with associated labels and descriptions. The `StoryWrapper` component sets some styles for a container element that wraps the radio variant component, and the `RadioVariantDefaultStory` function defines the state and props for the radio variant component.\n## Questions: \n 1. What is the purpose of the `RadioVariant` component?\n   - The `RadioVariant` component is used to render a group of radio buttons with customizable options and labels.\n\n2. What is the `StoryWrapper` component used for?\n   - The `StoryWrapper` component is used to wrap the `RadioVariant` component in a flexbox container with padding and responsive styles.\n\n3. What is the purpose of the `options` prop passed to the `RadioVariant` component?\n   - The `options` prop is used to define the individual radio button options, including their values, labels, and child components (in this case, paragraphs of text).","metadata":{"source":".autodoc/docs/markdown/components/RadioVariant/story.md"}}],["60",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/RichTextEditor/Toolbar.tsx)\n\nThe code defines a toolbar component that is used in the larger project to provide a user interface for rich text editing. The toolbar is composed of several groups of buttons, each group containing buttons for a specific type of formatting or action. The toolbar is implemented using styled components, which allows for easy customization of the toolbar's appearance.\n\nThe `Toolbar` component takes an `editor` prop, which is an instance of a ProseMirror editor. If the `editor` prop is not provided, the component returns `null`. Otherwise, the component renders the toolbar.\n\nThe toolbar is divided into several groups, each represented by a `StyledToolbarGroup` component. Each group has a label and a set of buttons, represented by a `StyledToolbarGroupItems` component. The `ToolbarGroupWidth` enum is used to specify the width of each group.\n\nEach button is represented by a `Button` component, which is imported from the `../button` module. The `Button` component takes several props, including an `onClick` function, an `icon` prop, and an `ariaLabel` prop. The `icon` prop specifies the icon to be displayed on the button, and the `ariaLabel` prop specifies the text to be read by screen readers when the button is focused.\n\nThe `Toolbar` component also uses several SVG components, including `H1Svg`, `H2Svg`, `H3Svg`, and `ListOrderedSvg`, which are imported from the `../assets` module. These SVG components are used to render icons for the corresponding buttons.\n\nThe `useT` hook is used to provide translations for the toolbar labels and tooltips. The translations are provided by the `../../lib/i18n` module.\n\nOverall, the `Toolbar` component provides a user-friendly interface for rich text editing, allowing users to easily apply formatting and perform common editing actions. The component is highly customizable and can be easily integrated into the larger project.\n## Questions: \n 1. What is the purpose of the `Toolbar` component?\n- The `Toolbar` component is used to render a toolbar for a rich text editor.\n2. What is the purpose of the `ToolbarGroup` component and its `width` prop?\n- The `ToolbarGroup` component is used to group related toolbar items together. The `width` prop is used to specify the width of the group, either `full` or `half`.\n3. What is the purpose of the `Label` component and where is it used?\n- The `Label` component is used to render a label for a group of toolbar items. It is used in each `ToolbarGroup` to label the group of items.","metadata":{"source":".autodoc/docs/markdown/components/RichTextEditor/Toolbar.md"}}],["61",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/RichTextEditor/index.tsx)\n\nThe code is a React component that provides a rich text editor for the Kulturdaten-frontend project. The component is built using the `@tiptap/react` library, which provides a set of tools for building custom WYSIWYG editors. The component is designed to be used in forms where users can input text, such as descriptions of events or locations.\n\nThe `RichTextEditor` component takes a number of props, including `value`, `onChange`, `placeholder`, `maxLength`, and `ariaLabel`. The `value` prop is the initial value of the editor, while the `onChange` prop is a callback function that is called whenever the value of the editor changes. The `placeholder` prop is the text that is displayed in the editor when it is empty, while the `maxLength` prop is the maximum number of characters that can be entered into the editor. The `ariaLabel` prop is used to provide an accessible label for the editor.\n\nThe `RichTextEditor` component uses the `useEditor` hook from the `@tiptap/react` library to create an instance of the editor. The editor is configured with a number of extensions, including `StarterKit`, `CharacterCount`, and `Placeholder`. The `StarterKit` extension provides a set of basic formatting tools, such as bold, italic, and underline. The `CharacterCount` extension provides a character count for the editor, while the `Placeholder` extension provides a placeholder text for the editor when it is empty.\n\nThe `RichTextEditor` component also includes a `Toolbar` component, which provides a set of buttons for formatting text. The `Toolbar` component is passed the `editor` instance as a prop, allowing it to interact with the editor.\n\nThe `RichTextEditor` component also includes a `StyledCharacterCount` component, which displays the current character count for the editor. The `CountAlert` component is used to display an alert message when the user reaches the maximum character count.\n\nThe `useRichText` hook is used to create an instance of the `RichTextEditor` component. The `useRichText` hook takes a number of props, including `value`, `onChange`, `placeholder`, `maxLength`, and `ariaLabel`. The `useRichText` hook returns an object that includes the `renderedRichText` component, which is the `RichTextEditor` component with the given props, as well as an `init` function, which can be used to set the initial value of the editor. The `useRichText` hook also returns a `valid` boolean, which indicates whether the editor has a valid value, and a `textLength` number, which indicates the current length of the text in the editor.\n## Questions: \n 1. What is the purpose of the `useRichText` hook?\n- The `useRichText` hook is used to render a rich text editor component with various props such as `value`, `placeholder`, `onChange`, `contentRef`, `required`, `softRequired`, `maxLength`, `ariaLabel`, and `id`. It also returns an object with the rendered component, a function to initialize the value of the editor, and the validity and length of the text.\n\n2. What is the purpose of the `countAlertCall` function?\n- The `countAlertCall` function is used to call a `speakerFunction` with a message indicating how many characters are left to reach the maximum character limit. It takes in the `maxLength`, `count`, and `t` (translation) parameters to determine the number of characters left and the appropriate message to speak.\n\n3. What is the purpose of the `RTEContentWrapper` styled component?\n- The `RTEContentWrapper` styled component is used to style the container of the rich text editor component. It sets the grid column, width, flex properties, and padding of the container, as well as the font sizes and line heights of various HTML elements within the editor. It also sets a placeholder text for the editor if it is empty.","metadata":{"source":".autodoc/docs/markdown/components/RichTextEditor/index.md"}}],["62",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Settings/DeleteUser.tsx)\n\nThe `DeleteUser` component is a React functional component that provides a form for users to request the deletion of their account. It imports several modules from the project's `lib` and `components` directories, including `useApiCall`, `userUpdateFactory`, `useT`, `Button`, `useConfirmScreen`, `EntryFormHead`, `StyledEntryFormContainer`, `FormGrid`, `FormItem`, `FormItemWidth`, and `useUser`.\n\nThe component first retrieves the current user's information and the `useConfirmScreen` hook, which displays a confirmation dialog when the user clicks the deletion button. It then renders a form with a title, a message explaining the consequences of account deletion, and a button to initiate the deletion process.\n\nWhen the user clicks the deletion button, the `confirmScreen` function is called with an object containing the confirmation dialog's properties. If the user confirms the deletion, an API call is made to update the user's account with a `deletionRequestedAt` attribute set to the current date and time. If the API call is successful, the `mutateUserInfo` function is called to update the user's information, and a success message is returned. If the API call fails, an error message is returned.\n\nOverall, the `DeleteUser` component provides a simple and user-friendly way for users to request the deletion of their account. It leverages several reusable components and hooks from the project's `lib` and `components` directories to implement the deletion process.\n## Questions: \n 1. What does this code do?\n- This code exports a React functional component called `DeleteUser` that displays a form for deleting a user account. It uses various imported components and functions to handle API calls, user authentication, and confirmation screens.\n\n2. What external libraries or dependencies does this code rely on?\n- This code relies on several imported modules, including `useApiCall` and `userUpdateFactory` from `../../lib/api`, `useT` from `../../lib/i18n`, `Button` and `ButtonSize` from `../button`, `useConfirmScreen` from `../Confirm/ConfirmScreen`, `EntryFormHead` from `../EntryForm/EntryFormHead`, `StyledEntryFormContainer` from `../EntryForm/wrappers`, `FormGrid`, `FormItem`, and `FormItemWidth` from `../pages/helpers/formComponents`, and `useUser` from `../user/useUser`.\n\n3. What is the purpose of the `confirmScreen` function and how is it used?\n- The `confirmScreen` function is imported from `../Confirm/ConfirmScreen` and is used to display a confirmation dialog when the user clicks the delete button. It takes an object with various properties, including `title`, `message`, `confirmText`, `onConfirm`, and `condition`, and returns a promise that resolves with the user's confirmation choice. In this code, it is called with an object that includes the confirmation message, the user's email address, and a callback function that sends a deletion request to the server.","metadata":{"source":".autodoc/docs/markdown/components/Settings/DeleteUser.md"}}],["63",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Settings/PasswordUpdate.tsx)\n\nThe `UserPasswordUpdate` component is a form that allows a user to update their password. It imports several components from the project's library, including `Button`, `Input`, `Info`, and `FormGrid`. It also imports several utility functions from the project's `lib` directory, including `useApiCall` and `userUpdateFactory`.\n\nThe component renders a form with three password fields: \"Old Password\", \"New Password\", and \"Confirm New Password\". When the form is submitted, the component sends a request to the server to update the user's password. If the request is successful, the component displays a success message. If the request fails, the component displays an error message.\n\nThe component uses several hooks to manage its state. The `useState` hook is used to manage the state of the password fields and the success flag. The `useMemo` hook is used to compute whether the \"New Password\" and \"Confirm New Password\" fields match. The `useEffect` hook is used to update the error messages when the \"New Password\" and \"Confirm New Password\" fields change.\n\nThe component also uses the `useApiCall` hook to send requests to the server. The `userUpdateFactory` function is used to create the request payload. If the request fails, the component parses the error message and displays a user-friendly error message.\n\nOverall, the `UserPasswordUpdate` component is an important part of the project's user management system. It allows users to securely update their passwords and provides helpful feedback if there are any errors.\n## Questions: \n 1. What is the purpose of this code?\n- This code is a React component that allows a user to update their password.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several external libraries including `react`, `useApiCall`, and `useT`.\n\n3. What is the significance of the `passwordErrorId` and `requestErrorId` constants?\n- These constants are used to identify specific errors in the `errors` array and are used to filter and update the array as needed.","metadata":{"source":".autodoc/docs/markdown/components/Settings/PasswordUpdate.md"}}],["64",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Settings/Terms.tsx)\n\nThe code defines a React functional component called `Terms` that renders a form for accepting terms and conditions. The component imports various hooks and components from other files in the project to handle user input, API calls, and UI rendering.\n\nWhen the component is rendered, it initializes a state variable called `accepted` to `false` using the `useState` hook. It also generates a unique ID using the `usePseudoUID` hook, retrieves a translation function using the `useT` hook, and retrieves the current user's information and a function for updating it using the `useUser` hook.\n\nThe component then renders a `StyledEntryFormContainer` component that contains a `FormGrid` component. Within the `FormGrid`, the component renders a `DashboardTile` component that displays the title of the form and a hint variant. The `DashboardTile` component contains a `DashboardTileText` component that displays the terms and conditions text and a `FormGrid` component that contains a `Checkbox` component and a `Button` component.\n\nThe `Checkbox` component displays a label for the terms and conditions and allows the user to check or uncheck it. When the user checks or unchecks the checkbox, the `onChange` event handler updates the `accepted` state variable accordingly.\n\nThe `Button` component displays a label for the submit button and is initially disabled until the user checks the checkbox. When the user clicks the button, the `onClick` event handler sends an API call to update the user's information with the current date and time of acceptance. If the API call is successful, the `mutateUserInfo` function updates the user's information in the UI, and the `router.push` function redirects the user to the dashboard page. If the API call fails, an error message is displayed.\n\nOverall, this component provides a simple way for users to accept terms and conditions and updates their information accordingly. It can be used in the larger project as part of a user registration or settings page.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React functional component called `Terms` that renders a form for accepting terms and conditions.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several modules from the project's own `lib` and `components` directories, as well as from the `next/router` and `react` libraries.\n\n3. What happens when the user clicks the \"accept\" button?\n- If the checkbox for accepting the terms is checked, the code sends a PUT request to the server to update the user's `acceptedTermsAt` attribute with the current date and time. If the request is successful, the user's information is updated and the page redirects to the dashboard for the specified organizer.","metadata":{"source":".autodoc/docs/markdown/components/Settings/Terms.md"}}],["65",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/StandardLink/index.tsx)\n\nThe code defines a React component called `StandardLink` that renders a link with standardized styling. The component takes three props: `type`, `href`, and `children`. \n\nThe `type` prop is an optional enum that specifies whether the link is internal or external. If `type` is not provided, it defaults to `StandardLinkType.internal`. \n\nThe `href` prop is a required string that specifies the URL that the link should point to. \n\nThe `children` prop is a required React node that specifies the content of the link. \n\nThe component first defines a styled anchor tag using the `@emotion/styled` library. This tag has no text decoration and inherits its color from its parent. \n\nNext, the component defines an internal link component called `InternalStandardLink`. This component wraps the styled anchor tag in a `next/link` component, which is used for client-side navigation in Next.js applications. The `passHref` prop is passed to the `Link` component to ensure that the anchor tag receives the `href` prop. \n\nFinally, the `StandardLink` component renders either the internal or external link component based on the `type` prop. If `type` is `StandardLinkType.internal`, the component renders the `InternalStandardLink` component. If `type` is `StandardLinkType.external`, the component renders the styled anchor tag with the `href`, `rel`, and `target` props set appropriately for an external link. If `type` is any other value, the component throws an error. \n\nThis component can be used throughout the project to render links with consistent styling. Developers can use the `type` prop to specify whether a link should be internal or external, and the component will handle the appropriate rendering. Here is an example usage of the component: \n\n```\n<StandardLink type={StandardLinkType.external} href=\"https://example.com\">\n  Example\n</StandardLink>\n```\n## Questions: \n 1. What is the purpose of the `StandardLink` component?\n   - The `StandardLink` component is used to render links with consistent styling and behavior throughout the application, and can handle both internal and external links.\n2. What is the difference between `InternalStandardLink` and `StyledStandardLink`?\n   - `InternalStandardLink` is a component that wraps a `Link` component from the Next.js library and applies the `StyledStandardLink` styles to it. `StyledStandardLink` is a styled component that applies consistent link styles.\n3. What is the purpose of the `StandardLinkType` enum?\n   - The `StandardLinkType` enum is used to specify whether a link should be rendered as an internal or external link, and is used in the `StandardLink` component to determine which type of link to render.","metadata":{"source":".autodoc/docs/markdown/components/StandardLink/index.md"}}],["66",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Status/StatusFlag.tsx)\n\nThe code defines a React component called `StatusFlag` that displays a status flag based on a `PublishedStatus` enum value. The component takes two props: `status` and `variant`. The `status` prop is of type `PublishedStatus` and determines the color of the flag. The `variant` prop is of type `StatusFlagVariant` and determines the size and shape of the flag.\n\nThe component is styled using the `styled` function from the `@emotion/styled` library and the `css` function from the `@emotion/react` library. The styles are defined in three styled components: `StyledStatusFlag`, `StyledEntryHeaderStatusLabel`, and `StyledEntryHeaderStatusFlag`. The `StyledStatusFlag` component sets the display property to either `flex` or `inline-flex` depending on the `variant` prop. The `StyledEntryHeaderStatusLabel` component sets the padding, font size, line height, font weight, and background color of the label. The `StyledEntryHeaderStatusFlag` component sets the padding, border radius, background color, font weight, font size, and line height of the flag. The styles of the `StyledEntryHeaderStatusFlag` component depend on the `variant` prop.\n\nThe `StatusFlag` component uses the `useT` hook from the `lib/i18n` module to translate the status label. If the `variant` prop is `big`, the component also displays a label above the flag.\n\nThis component can be used throughout the project to display the status of various entities, such as events, venues, and organizations. The `StatusFlag` component can be imported and used in other React components like this:\n\n```\nimport { StatusFlag, StatusFlagVariant } from './StatusFlag';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <StatusFlag status={PublishedStatus.published} variant={StatusFlagVariant.big} />\n      <StatusFlag status={PublishedStatus.draft} variant={StatusFlagVariant.small} />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `StatusFlag` component?\n- The `StatusFlag` component is used to display a status flag based on the `PublishedStatus` enum and the `StatusFlagVariant` enum.\n\n2. What is the role of the `useT` hook?\n- The `useT` hook is used to access the translation function for the current language, which is used to display the appropriate status text.\n\n3. What is the difference between the `StatusFlagVariant` options?\n- The `StatusFlagVariant` enum provides options for the size and display of the status flag. The `inline` variant displays the flag inline with other content, the `small` variant is a smaller version of the flag, and the `big` variant is a larger version with additional text.","metadata":{"source":".autodoc/docs/markdown/components/Status/StatusFlag.md"}}],["67",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/Team/TeamList.tsx)\n\nThe code defines a React component called `TeamList` that renders a table of team members and their roles. The component takes in an array of `OrganizerRole` objects, which represent the roles of team members in an organization. The component also takes in a boolean `userIsOwner` that indicates whether the current user is the owner of the organization.\n\nThe `TeamList` component renders a scrollable table with columns for email, role, and remove button. The email column displays the email address of each team member, and the role column displays a dropdown menu that allows the owner to change the role of each team member. The remove button allows the owner to remove team members from the organization.\n\nThe `TeamList` component uses several styled components to define the layout and styling of the table. The `StyledTeamList` component defines a flexbox container for the table, while the `StyledTeamListScrollBox` component defines a scrollable container for the table. The `StyledTeamListList` component defines the table itself, and the `StyledTeamListItem` component defines the rows of the table.\n\nThe `TeamList` component also uses several utility functions and components from the `lib` and `globals` directories. The `useT` hook provides translations for the component, while the `usePseudoUID` hook generates unique IDs for the component's elements. The `useUser` hook provides information about the current user, and the `Info` component displays informational messages to the user.\n\nOverall, the `TeamList` component provides a way for owners of an organization to manage the roles of their team members. The component is used in the larger `kulturdaten-frontend` project to allow users to create and manage cultural events and organizations.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines styled components and a React functional component for rendering a team list with roles and email addresses.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several libraries and dependencies including `@emotion/styled`, `@emotion/react`, `react`, `react-dom`, and `react-scripts`.\n\n3. What props does the `TeamList` component accept and how are they used?\n- The `TeamList` component accepts three props: `roles`, `onChange`, and `userIsOwner`. `roles` is an array of `OrganizerRole` objects that contain information about team members and their roles. `onChange` is a callback function that is called when a role is changed or removed. `userIsOwner` is a boolean value that indicates whether the current user is the owner of the team. These props are used to render the team list and allow the user to modify roles.","metadata":{"source":".autodoc/docs/markdown/components/Team/TeamList.md"}}],["68",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/TypesSubjects/index.tsx)\n\nThe code defines a React component called `TypesSubjects` that renders a list of checkboxes for selecting organizer types and their associated subjects. The component takes in several props, including `options`, an array of `OrganizerType` objects, and `value`, an object with `types` and `subjects` arrays representing the currently selected types and subjects. The component also takes in an `onChange` function to be called when the selected types or subjects change, and several other optional props for controlling the component's behavior.\n\nThe component uses the `useReducer` hook to manage its state, with a `typesSubjectsReducer` function that handles several actions, including adding and deleting types and updating subjects. The component also uses the `useEffect` hook to initialize its state based on the `value` prop and to call the `onChange` function when the state changes.\n\nThe component renders a list of `StyledTypesSubjectsType` elements, each representing an organizer type. Each `StyledTypesSubjectsType` element contains a `Checkbox` for selecting the type and a `CheckboxList` for selecting the associated subjects. The `CheckboxList` is only rendered if the type is selected and has associated subjects.\n\nThe component uses several styled components from the `@emotion/styled` library to define its layout and appearance. It also uses several utility functions from the `lib` directory, including `sortByTranslation` for sorting translations and `getTranslation` for getting translations based on the current language.\n\nOverall, the `TypesSubjects` component provides a flexible and reusable way to select organizer types and subjects in the larger `kulturdaten-frontend` project.\n## Questions: \n 1. What is the purpose of the `TypesSubjects` component?\n- The `TypesSubjects` component is used to render a list of checkboxes for selecting organizer types and their associated subjects.\n\n2. What is the purpose of the `typesSubjectsReducer` function?\n- The `typesSubjectsReducer` function is a reducer that handles state updates for the `TypesSubjects` component. It handles actions such as adding or deleting a type, updating subjects, and initializing the state.\n\n3. What is the purpose of the `CheckboxList` component?\n- The `CheckboxList` component is used to render a list of checkboxes with a label and optional columns. It is used in the `TypesSubjects` component to render the list of subjects associated with a selected organizer type.","metadata":{"source":".autodoc/docs/markdown/components/TypesSubjects/index.md"}}],["69",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/accordion/index.tsx)\n\nThe code defines a reusable Accordion component that can be used to display collapsible content. The Accordion component is composed of two sub-components: AccordionItem and Accordion. \n\nThe AccordionItem component takes in a title and content as props, and renders a collapsible item with the title as the header and the content as the body. The header contains a button that toggles the visibility of the content. The component uses the useCollapsable hook to manage the state of the collapsible content. \n\nThe Accordion component takes in an array of AccordionItemProps as props, and renders a list of AccordionItems. The component can be used to display a list of collapsible items. \n\nThe code uses Emotion to style the components. The AccordionItem component is styled using CSS grid to create a two-column layout with the title on the left and the button on the right. The Accordion component is styled using flexbox to create a vertical list of AccordionItems. \n\nHere is an example of how the Accordion component can be used:\n\n```\nimport { Accordion } from './components/accordion';\n\nconst items = [\n  {\n    title: 'Item 1',\n    content: 'Content for item 1',\n  },\n  {\n    title: 'Item 2',\n    content: 'Content for item 2',\n  },\n  {\n    title: 'Item 3',\n    content: 'Content for item 3',\n  },\n];\n\nfunction App() {\n  return (\n    <Accordion items={items} initiallyCollapsed={true} />\n  );\n}\n```\n\nIn this example, an Accordion component is rendered with an array of three AccordionItems. The initiallyCollapsed prop is set to true, which means that all the items will be collapsed by default.\n## Questions: \n 1. What is the purpose of the `Accordion` component?\n- The `Accordion` component is used to render a list of collapsible items with a title and content.\n\n2. What is the `useCollapsable` hook used for?\n- The `useCollapsable` hook is used to manage the state of the collapsible content and render it conditionally based on whether it is collapsed or not.\n\n3. What is the purpose of the `AccordionItem` component?\n- The `AccordionItem` component is used to render a single item in the `Accordion` component with a title and collapsible content.","metadata":{"source":".autodoc/docs/markdown/components/accordion/index.md"}}],["70",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/accordion/story.tsx)\n\nThe code above is a Storybook story for the Accordion component. Storybook is a tool for building UI components in isolation and documenting them. The Accordion component is a UI element that allows users to expand and collapse sections of content. \n\nThe code exports a single story called `AccordionDefaultStory`. This story renders an instance of the Accordion component with some default props. The `initiallyCollapsed` prop is set to `true`, which means that all of the accordion items will be collapsed when the component is first rendered. The `items` prop is an array of objects that define the content of each accordion item. Each object has a `title` property and a `content` property. The `title` property is a string that will be displayed as the title of the accordion item. The `content` property is a React element that will be displayed when the accordion item is expanded. In this case, the content is a simple `<div>` element with the text \"Some content\".\n\nThis story is useful for demonstrating the Accordion component and its default behavior. Developers can use this story as a reference when implementing the Accordion component in their own projects. They can also modify the props of the Accordion component to see how it behaves under different conditions. For example, they could set `initiallyCollapsed` to `false` to see how the component behaves when all of the accordion items are expanded by default. They could also add or remove items from the `items` array to see how the component behaves with different numbers of accordion items.\n\nOverall, this code is a small but important part of the larger Kulturdaten Frontend project. It helps developers to understand and use the Accordion component, which is a key part of the project's user interface.\n## Questions: \n 1. What is the purpose of the `Accordion` component?\n- The `Accordion` component is used to display a list of collapsible items with titles and content.\n\n2. What is the significance of the `initiallyCollapsed` prop?\n- The `initiallyCollapsed` prop determines whether the items in the `Accordion` component are initially collapsed or expanded.\n\n3. Can the number of items in the `Accordion` component be changed?\n- Yes, the number of items in the `Accordion` component can be changed by modifying the `items` prop and adding or removing objects with `title` and `content` properties.","metadata":{"source":".autodoc/docs/markdown/components/accordion/story.md"}}],["71",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/anchor/index.tsx)\n\nThe code above defines two React components for rendering links in the Kulturdaten-frontend project. The first component, `StyledAnchor`, is a styled anchor tag that is used to define the basic styling for all links in the project. The `display` property is set to `inline-block` to ensure that the link is displayed as a block element, but still allows other elements to be displayed on the same line. The `color` property is set to `inherit` to ensure that the link inherits the color of its parent element.\n\nThe second component, `Anchor`, is a higher-level component that takes in a `StandardLink` prop and renders either an internal or external link based on the `type` property of the prop. If the `type` property is `internal`, the component renders an internal link using the `InternalAnchor` component. The `InternalAnchor` component takes in a `StandardLinkInternal` prop and renders a link using the `Link` component from the Next.js framework. The `title` and `href` properties of the `StandardLinkInternal` prop are passed to the `Link` component using the `passHref` prop. The `StyledAnchor` component is then used to render the link with the basic styling defined earlier.\n\nIf the `type` property of the `StandardLink` prop is not `internal`, the `Anchor` component renders an external link using the `StyledAnchor` component. The `href` and `title` properties of the `StandardLink` prop are passed directly to the `StyledAnchor` component, along with the `rel` and `target` attributes to ensure that the link opens in a new tab and has appropriate security settings.\n\nOverall, these components provide a consistent and flexible way to render links throughout the Kulturdaten-frontend project. By using the `Anchor` component, developers can easily switch between internal and external links without having to worry about the underlying implementation details. Additionally, the `StyledAnchor` component provides a centralized location for defining the basic styling of all links in the project, making it easy to update the styling across the entire project if necessary.\n## Questions: \n 1. What is the purpose of the `StandardLink` type and where is it defined?\n- The `StandardLink` type is used as a prop for the `Anchor` component and is defined in the `generalTypes.ts` file located in the `lib` directory.\n\n2. What is the difference between the `StyledAnchor` and `InternalAnchor` components?\n- The `StyledAnchor` component is a styled anchor tag used for external links, while the `InternalAnchor` component is a Next.js `Link` component used for internal links.\n\n3. Why is the `rel=\"noopener noreferrer\"` attribute included in the `StyledAnchor` component for external links?\n- The `rel=\"noopener noreferrer\"` attribute is a security measure that prevents the linked page from being able to access the window object of the linking page, which could potentially be used for malicious purposes such as phishing attacks.","metadata":{"source":".autodoc/docs/markdown/components/anchor/index.md"}}],["72",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/AlertSymbol.tsx)\n\nThe code above defines a React component called `AlertSymbol` that renders a red exclamation mark symbol inside a white circle. This symbol is commonly used to indicate an alert or warning message to the user. The component is styled using the `styled` function from the `@emotion/styled` library, which allows for CSS-in-JS styling. \n\nThe `AlertSymbol` component takes an optional `ariaLabel` prop, which is used to provide an accessible label for screen readers. If the `ariaLabel` prop is not provided, the component will use a default label obtained from the `useT` hook, which is a custom hook for internationalization. \n\nThe `ExclamationMarkSvg` component is imported from a separate file located in the `../assets` directory. This component renders an SVG image of an exclamation mark symbol. \n\nThis component can be used in the larger project to display alert or warning messages to the user. It can be imported and used in other React components like so:\n\n```\nimport { AlertSymbol } from './path/to/AlertSymbol';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <AlertSymbol ariaLabel=\"Warning\" />\n      <p>There was an error processing your request.</p>\n    </div>\n  );\n};\n```\n\nIn the example above, the `AlertSymbol` component is used to indicate a warning message to the user, followed by a descriptive message. The `ariaLabel` prop is provided to ensure accessibility for screen readers. \n\nOverall, this code provides a reusable and customizable component for displaying alert symbols in the project.\n## Questions: \n 1. What is the purpose of the `StyledAlertSymbol` component?\n- The `StyledAlertSymbol` component is used to style an alert symbol with a red background and an exclamation mark icon.\n\n2. What is the `AlertSymbol` component used for?\n- The `AlertSymbol` component is used to render the `StyledAlertSymbol` component with an optional `ariaLabel` prop that defaults to a translated string.\n\n3. What is the `useT` function imported from `lib/i18n` used for?\n- The `useT` function is used to access the translation function for the current language in order to translate the `ariaLabel` prop or the default string in the `AlertSymbol` component.","metadata":{"source":".autodoc/docs/markdown/components/assets/AlertSymbol.md"}}],["73",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/AlertTriangleSvg.tsx)\n\nThe code above exports a React functional component called `AlertTriangleSvg`. This component renders an SVG image of a triangle with an exclamation mark inside, commonly used as an icon to indicate a warning or error message. The SVG image has a width and height of 38 pixels and a viewbox of 0 0 38 38.\n\nThe SVG image is composed of three paths, each with different stroke properties. The first path draws the triangle with the exclamation mark inside, using a combination of `moveTo` and `lineTo` commands to define the shape. The second path draws a vertical line in the middle of the triangle, and the third path draws a horizontal line at the bottom of the triangle.\n\nThe stroke properties of the paths are defined using the `stroke` and `strokeWidth` attributes, which set the color and thickness of the lines respectively. The `strokeLinecap` and `strokeLinejoin` attributes define the style of the line endings and corners.\n\nThis component can be used in the larger project as a reusable icon for warning or error messages. It can be imported and used in other React components like this:\n\n```\nimport { AlertTriangleSvg } from './AlertTriangleSvg';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>Warning!</h2>\n      <AlertTriangleSvg />\n      <p>Something went wrong.</p>\n    </div>\n  );\n};\n```\n\nOverall, this code provides a simple and customizable way to add warning or error icons to the project's user interface.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React functional component that renders an SVG icon of an alert triangle with a warning symbol inside.\n\n2. What are the dimensions of the SVG icon?\n- The SVG icon has a width and height of 38 units and a viewBox of \"0 0 38 38\".\n\n3. What does each path element in the SVG represent?\n- The first path element represents the outline of the alert triangle with a warning symbol inside, while the second and third path elements represent the vertical line and horizontal line of the warning symbol, respectively.","metadata":{"source":".autodoc/docs/markdown/components/assets/AlertTriangleSvg.md"}}],["74",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/ArrowRightSvg.tsx)\n\nThe code above exports a React functional component called `ArrowRightSvg`. This component renders an SVG image of an arrow pointing to the right. The arrow is composed of two paths, both of which have a stroke color of \"currentColor\" and a stroke width of 2. The `viewBox` attribute defines the coordinate system for the SVG image, and the `width` and `height` attributes set the dimensions of the image.\n\nThis component can be used in other parts of the project where an arrow pointing to the right is needed. For example, it could be used as an icon for a button that navigates to the next page or as a visual indicator for a step in a multi-step process.\n\nTo use this component in another file, it can be imported like this:\n\n```\nimport { ArrowRightSvg } from './path/to/ArrowRightSvg';\n```\n\nThen, it can be used in JSX like any other React component:\n\n```\n<button>\n  Next\n  <ArrowRightSvg />\n</button>\n```\n\nThis will render a button with the text \"Next\" and an arrow pointing to the right next to it.\n\nOverall, this code provides a reusable component for rendering an arrow pointing to the right in a React application.\n## Questions: \n 1. What is the purpose of this code?\n   This code exports a React functional component that renders an SVG arrow pointing to the right.\n\n2. What are the dimensions of the SVG arrow?\n   The SVG arrow has a width and height of 18 pixels and a viewBox of \"0 0 18 18\".\n\n3. What styling properties are applied to the SVG paths?\n   The SVG paths have a stroke color of \"currentColor\", a stroke width of 2 pixels, and a strokeLinecap and strokeLinejoin of \"round\".","metadata":{"source":".autodoc/docs/markdown/components/assets/ArrowRightSvg.md"}}],["75",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/CheckSvg.tsx)\n\nThe code above exports a React functional component called `CheckSvg`. This component renders an SVG image of a checkmark. The SVG image is defined using the SVG markup language and includes a path element that defines the shape of the checkmark.\n\nThe `CheckSvg` component takes no props and simply returns the SVG image. It is likely used in other components throughout the `kulturdaten-frontend` project to display a checkmark icon in various contexts.\n\nHere is an example of how the `CheckSvg` component might be used in another component:\n\n```\nimport React from 'react';\nimport { CheckSvg } from './CheckSvg';\n\nconst MyComponent: React.FC = () => {\n  return (\n    <div>\n      <h2>Success!</h2>\n      <p>Your submission was successful.</p>\n      <CheckSvg />\n    </div>\n  );\n};\n```\n\nIn this example, the `CheckSvg` component is imported and rendered within the `MyComponent` component. The checkmark icon is displayed alongside a success message to indicate that the user's submission was successful.\n\nOverall, the `CheckSvg` component is a simple and reusable component that provides a consistent way to display a checkmark icon throughout the `kulturdaten-frontend` project.\n## Questions: \n 1. What is the purpose of this code?\n   This code exports a React functional component that renders a checkmark SVG icon.\n\n2. What are the dimensions of the SVG icon?\n   The SVG icon has a width and height of 38 units and a viewBox of \"0 0 38 38\".\n\n3. What is the styling of the SVG icon?\n   The SVG icon has a stroke color of \"currentColor\", a stroke width of 2 units, and uses round line caps and joins. The path element within the SVG also has its own stroke color and stroke width properties.","metadata":{"source":".autodoc/docs/markdown/components/assets/CheckSvg.md"}}],["76",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/CloudSvg.tsx)\n\nThe code above exports a React functional component called `CloudSvg`. This component returns an SVG element that represents a cloud icon. The SVG element has a width of 38 and a height of 28, and it has a viewBox of 0 0 38 38, which means that the SVG element is scalable and can be resized without losing its aspect ratio.\n\nThe cloud icon is drawn using a `path` element, which has a `d` attribute that defines the shape of the path. The `stroke` attribute sets the color of the path to the current color, which is defined by the `stroke` property of the SVG element. The `strokeWidth` property sets the width of the stroke to 2 pixels, and the `strokeLinecap` and `strokeLinejoin` properties set the style of the stroke to round.\n\nThe `CloudSvg` component can be used in other components or pages of the `kulturdaten-frontend` project to display a cloud icon. For example, it can be used in a file upload component to indicate that the file will be stored in the cloud. Here is an example of how the `CloudSvg` component can be used in a React component:\n\n```\nimport React from 'react';\nimport { CloudSvg } from './CloudSvg';\n\nconst FileUpload = () => {\n  return (\n    <div>\n      <CloudSvg />\n      <input type=\"file\" />\n    </div>\n  );\n};\n\nexport default FileUpload;\n```\n\nIn the example above, the `CloudSvg` component is imported from the `CloudSvg.tsx` file and rendered before an `input` element of type `file`. This will display the cloud icon next to the file upload button.\n## Questions: \n 1. What does this code do?\n- This code exports a React functional component called `CloudSvg` that renders an SVG image of a cloud with various paths and attributes.\n\n2. What is the purpose of the `stroke` and `strokeWidth` attributes?\n- The `stroke` attribute sets the color of the stroke (outline) of the paths in the SVG, while the `strokeWidth` attribute sets the width of the stroke.\n\n3. Can this component be customized with props?\n- No, this component does not accept any props and will always render the same SVG image.","metadata":{"source":".autodoc/docs/markdown/components/assets/CloudSvg.md"}}],["77",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/ExclamationMarkSvg.tsx)\n\nThe code above exports a React functional component called `ExclamationMarkSvg`. This component renders an SVG image of an exclamation mark. The SVG image has a width and height of 36 pixels and a viewBox of 0 0 36 36. The `fill` attribute is set to \"none\" and the `stroke` attribute is set to \"currentColor\", which means that the stroke color will be inherited from the parent element's color. The `strokeWidth` attribute is set to 2 and the `strokeLinecap` and `strokeLinejoin` attributes are set to \"round\", which means that the stroke will have rounded ends and corners.\n\nThe SVG image consists of two `path` elements. The first `path` element has a `d` attribute that defines a vertical line from the point (18,12) to the point (18,18). The `stroke` attribute is set to \"currentColor\", the `strokeWidth` attribute is set to 3, and the `strokeLinecap` and `strokeLinejoin` attributes are set to \"round\".\n\nThe second `path` element has a `d` attribute that defines a horizontal line from the point (18,24) to the point (18.0075,24). The `stroke` attribute, `strokeWidth` attribute, `strokeLinecap` attribute, and `strokeLinejoin` attribute are set to the same values as the first `path` element.\n\nThis component can be used in other components or pages of the project to display an exclamation mark icon. For example, it could be used in a form validation message to indicate that a field is required or in an error message to indicate that an error has occurred. The component can be imported and used like any other React component:\n\n```\nimport { ExclamationMarkSvg } from './path/to/ExclamationMarkSvg';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>Error</h2>\n      <p>There was an error submitting your form. Please try again.</p>\n      <ExclamationMarkSvg />\n    </div>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of this code?\n   - This code exports a React functional component that renders an SVG image of an exclamation mark.\n\n2. What are the dimensions of the SVG image?\n   - The SVG image has a width and height of 36 units and a viewBox of 0 0 36 36.\n\n3. What styling properties are applied to the SVG paths?\n   - The paths have a stroke color of \"currentColor\", a stroke width of 3 units, and a strokeLinecap and strokeLinejoin of \"round\".","metadata":{"source":".autodoc/docs/markdown/components/assets/ExclamationMarkSvg.md"}}],["78",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/H1Svg.tsx)\n\nThe code above exports a React functional component called `H1Svg`. This component returns an SVG element that displays a stylized letter \"H\" with a height of 18 pixels and a width of 24 pixels. The SVG element contains a single path element that defines the shape of the letter \"H\". The path is defined using a series of commands that specify the start and end points of lines and curves.\n\nThis component can be used in the larger project to display the letter \"H\" in various contexts, such as in a logo or as a decorative element on a webpage. It can be imported into other React components using the following syntax:\n\n```\nimport { H1Svg } from './path/to/H1Svg';\n```\n\nOnce imported, the `H1Svg` component can be used like any other React component, by including it in the JSX of another component:\n\n```\nfunction MyComponent() {\n  return (\n    <div>\n      <H1Svg />\n      <p>Hello world!</p>\n    </div>\n  );\n}\n```\n\nThis will render the letter \"H\" above the \"Hello world!\" text.\n\nOverall, this code provides a reusable component that can be used to display a stylized letter \"H\" in various contexts throughout the project.\n## Questions: \n 1. What does this code do?\n   \n   This code exports a React functional component that renders an SVG image of a stylized \"H1\" text.\n\n2. What is the purpose of the \"fill\" attribute in the SVG path element?\n   \n   The \"fill\" attribute sets the color used to fill the interior of the SVG path. In this case, it is set to \"currentColor\", which means it will use the current text color.\n\n3. Can this component be customized with different colors or sizes?\n   \n   Yes, the width and height of the SVG element can be adjusted, and the \"fill\" attribute can be set to any valid CSS color value. These changes can be made either by passing props to the component or by directly modifying the code.","metadata":{"source":".autodoc/docs/markdown/components/assets/H1Svg.md"}}],["79",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/H2Svg.tsx)\n\nThe code above exports a React functional component called `H2Svg`. This component returns an SVG element that displays a stylized H2 heading. The SVG element has a width of 24 and a height of 18, and it contains a single `path` element that defines the shape of the H2 heading.\n\nThe `path` element is defined using the `d` attribute, which contains a series of commands that specify the path's shape. The path starts at the top left corner of the SVG element and moves to the right, then down, then left, then up, forming the top part of the H2 heading. The path then moves to the bottom left corner of the SVG element and forms the bottom part of the H2 heading.\n\nThe `fill` attribute of the `path` element is set to \"currentColor\", which means that the path will be filled with the current text color. This allows the H2 heading to be styled using CSS, by setting the `color` property to the desired color.\n\nThis component can be used in the larger project to display H2 headings in a consistent and stylized way. It can be imported and used in other React components like this:\n\n```\nimport { H2Svg } from './path/to/H2Svg';\n\nconst MyComponent: React.FC = () => (\n  <div>\n    <H2Svg />\n    <h2>My Heading</h2>\n  </div>\n);\n```\n\nThis will display the H2 heading with the stylized SVG element before it. The color of the heading can be changed by setting the `color` property in CSS, like this:\n\n```\nh2 {\n  color: blue;\n}\n```\n## Questions: \n 1. What does this code do?\n   \n   This code exports a React functional component called `H2Svg` that renders an SVG image of a stylized H2 tag.\n\n2. What is the purpose of the `viewBox` attribute in the SVG element?\n   \n   The `viewBox` attribute defines the position and dimensions of the SVG viewport. It allows the SVG image to be scaled and resized while maintaining its aspect ratio.\n\n3. What is the significance of the `currentColor` value in the `fill` attribute of the `path` element?\n   \n   The `currentColor` value sets the fill color of the `path` element to the current text color, which can be dynamically changed using CSS. This allows for greater flexibility and customization of the SVG image.","metadata":{"source":".autodoc/docs/markdown/components/assets/H2Svg.md"}}],["80",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/H3Svg.tsx)\n\nThe code defines a React functional component called H3Svg that returns an SVG element. The SVG element has a width of 24 and a height of 18, and a viewBox of 0 0 24 18. The fill attribute of the path element inside the SVG is set to \"currentColor\", which means it will inherit the color of its parent element.\n\nThe path element defines the shape of the SVG. It consists of a series of commands that draw lines and curves. The commands are specified using the \"d\" attribute. The path starts at the point (9.53312, 15) and ends at the point (16.0411, 8.344). In between, there are several other points and curves that define the shape of the letter \"H\".\n\nThe purpose of this component is to display an SVG icon of the letter \"H\" with a specific style. It can be used in the larger project as a visual element in the user interface, for example as a heading or a button. Here is an example of how it can be used:\n\n```jsx\nimport { H3Svg } from './H3Svg';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h3><H3Svg /> My Heading</h3>\n      <button><H3Svg /> Click me</button>\n    </div>\n  );\n}\n```\n\nIn this example, the H3Svg component is used inside a heading and a button. The resulting output will be an \"H\" icon followed by the text \"My Heading\" and \"Click me\", respectively. The color of the icon will be determined by the color of the parent element, since the fill attribute is set to \"currentColor\".\n## Questions: \n 1. What does this code do?\n    \n    This code exports a React functional component called `H3Svg` that renders an SVG image of a specific shape and color.\n\n2. What is the purpose of the `viewBox` attribute in the `svg` element?\n    \n    The `viewBox` attribute defines the position and dimensions of the SVG viewport, which determines the visible area of the SVG image. It allows the image to be scaled and resized without losing its aspect ratio.\n\n3. What is the significance of the `currentColor` value in the `fill` attribute of the `path` element?\n    \n    The `currentColor` value sets the fill color of the `path` element to the current color of the element, which is determined by the `color` CSS property of the parent element. This allows the color of the SVG image to be easily customized using CSS.","metadata":{"source":".autodoc/docs/markdown/components/assets/H3Svg.md"}}],["81",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/InfoISvg.tsx)\n\nThe code above exports a React functional component called `InfoISvg`. This component returns an SVG element that displays an \"i\" icon with two lines. The SVG element has a width and height of 36 and a viewBox of 0 0 36 36. The `fill` attribute is not set, so it defaults to \"none\". The `stroke` attribute is set to \"currentColor\", which means it will use the color of the parent element. The `strokeWidth` attribute is set to 2 for the main lines and 3 for the smaller lines. The `strokeLinecap` and `strokeLinejoin` attributes are set to \"round\" for both paths.\n\nThe first path element draws a vertical line from the center of the SVG element's height (18) to the top of the SVG element's height (24). The second path element draws a horizontal line from the center of the SVG element's width (18) to the right of the SVG element's width (18.0075).\n\nThis component can be used in the larger project to display an \"i\" icon with two lines, typically used to indicate information or help. It can be imported and used in other React components like so:\n\n```\nimport { InfoISvg } from './path/to/InfoISvg';\n\nconst MyComponent: React.FC = () => (\n  <div>\n    <h2>Some Title <InfoISvg /></h2>\n    <p>Some text that needs an explanation.</p>\n  </div>\n);\n```\n\nIn the example above, the `InfoISvg` component is used inside an `h2` element to indicate that more information is available about the title. The `fill` attribute is not set, so the icon will inherit the color of the `h2` element's `color` property. The `stroke` attribute is set to \"currentColor\", so the icon will also inherit the `color` property. The `strokeWidth`, `strokeLinecap`, and `strokeLinejoin` attributes are set to their default values.\n## Questions: \n 1. What is the purpose of this code?\n   - This code exports a React functional component that renders an SVG icon.\n\n2. What does the SVG icon look like?\n   - The SVG icon is a 36x36 square with two paths: one vertical line from the center of the top to the center of the bottom, and one horizontal line from the center of the left to the center of the right.\n\n3. How can this SVG icon be customized?\n   - The SVG icon can be customized by changing the `stroke` color, `strokeWidth`, `strokeLinecap`, and `strokeLinejoin` properties. The `viewBox` property can also be adjusted to change the size and aspect ratio of the icon.","metadata":{"source":".autodoc/docs/markdown/components/assets/InfoISvg.md"}}],["82",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/InfoIconSvg.tsx)\n\nThe code above exports a React functional component called `InfoIconSvg`. This component renders an SVG icon that can be used to represent information or help content in the user interface. The icon consists of two paths, both of which are styled with the `stroke` and `strokeWidth` properties to create a simple line drawing.\n\nThe first path (`M10 13.3333V10`) draws a vertical line from the center of the icon to the top, representing an \"i\" shape commonly used to indicate information. The second path (`M10 6.66663H10.0067`) draws a horizontal line across the center of the icon, creating a crossbar for the \"i\".\n\nThis component can be used in other parts of the `kulturdaten-frontend` project to display information or help content to users. For example, it could be used in a tooltip or popover to provide additional context or instructions for a particular feature or element on the page.\n\nHere is an example of how the `InfoIconSvg` component could be used in a tooltip:\n\n```jsx\nimport { InfoIconSvg } from './path/to/InfoIconSvg';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <button>\n        Click me for help <InfoIconSvg />\n      </button>\n      <div className=\"tooltip\">\n        This button does something important. Click it to find out more!\n      </div>\n    </div>\n  );\n};\n```\n\nIn this example, the `InfoIconSvg` component is used alongside a button to indicate that clicking the button will provide additional help or information. When the user hovers over the button, a tooltip is displayed with more details about what the button does. The `InfoIconSvg` component helps to visually reinforce the idea that the tooltip contains helpful information.\n## Questions: \n 1. What does this code do?\n   This code exports a React functional component that renders an SVG icon of an \"i\" inside a circle, commonly used to represent information or help.\n\n2. Can this component be customized?\n   Yes, the component can be customized by changing the stroke color and width of the paths that make up the icon.\n\n3. How can this component be used in a project?\n   This component can be imported and used in any React component that needs to display an information icon. It can be rendered as a standalone icon or combined with other components to create more complex UI elements.","metadata":{"source":".autodoc/docs/markdown/components/assets/InfoIconSvg.md"}}],["83",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/InfoSymbol.tsx)\n\nThe code above defines a React component called `InfoSymbol` that renders an information icon. The icon is styled using the `StyledInfoSymbol` component from the `@emotion/styled` library. The icon is a blue circle with a white \"i\" in the center. The component takes an optional `ariaLabel` prop, which is used to provide an accessible label for the icon. If the `ariaLabel` prop is not provided, the component uses a default label obtained from the `useT` hook, which is used for internationalization.\n\nThis component is likely used in the larger project to provide a consistent and accessible way to display information icons throughout the user interface. By using a separate component for the icon, the project can ensure that the icon is styled consistently and that accessibility concerns are addressed. The `InfoSymbol` component can be used in other components by importing it and rendering it as a child component. For example:\n\n```\nimport { InfoSymbol } from './InfoSymbol';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <p>This is some text that needs an info icon <InfoSymbol /></p>\n    </div>\n  );\n};\n```\n\nOverall, this code demonstrates the use of styled components and the `useT` hook for internationalization in a React project.\n## Questions: \n 1. What is the purpose of the `useT` function imported from `../../lib/i18n`?\n   - The `useT` function is used for internationalization and localization purposes.\n2. What is the significance of the `InfoISvg` component imported from `../assets/InfoISvg`?\n   - The `InfoISvg` component likely renders an SVG icon or image that represents information or help.\n3. What is the purpose of the `ariaLabel` prop in the `InfoSymbol` component?\n   - The `ariaLabel` prop is used to provide an accessible label for the `StyledInfoSymbol` div, which contains the `InfoISvg` component. If the prop is not provided, the label is retrieved from the translation file using the `useT` function.","metadata":{"source":".autodoc/docs/markdown/components/assets/InfoSymbol.md"}}],["84",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/ListOrderedSvg.tsx)\n\nThe code above exports a React functional component called `ListOrderedSvg`. This component returns an SVG element that displays a list with three items and a numbered order. The SVG element has a width and height of 24 pixels and a viewbox of 0 0 24 24. \n\nThe list is created using three horizontal lines, each separated by a distance of 6 pixels. The lines are created using the `path` element with the `d` attribute set to `M8 6H21`, `M8 12H21`, and `M8 18H21`. These lines are drawn using the `stroke` attribute set to `currentColor`, which means that the color of the lines will be the same as the current text color. The `strokeWidth` attribute is set to 2, which means that the lines will have a thickness of 2 pixels. The `strokeLinecap` attribute is set to `round`, which means that the ends of the lines will be rounded. The `strokeLinejoin` attribute is set to `round`, which means that the corners of the lines will be rounded.\n\nThe numbered order is created using two lines and a number. The first line is created using the `path` element with the `d` attribute set to `M2 6L3 5V10`. This line is drawn using the same attributes as the horizontal lines. The second line is created using the `path` element with the `d` attribute set to `M4 19H2`. This line is also drawn using the same attributes as the horizontal lines. The number is created using the `path` element with the `d` attribute set to `M4 14.998C4 14.4447 3.55141 13.9961 2.99805 13.9961C2.44468 13.9961 1.99609 14.4447 1.99609 14.998`. This number is drawn using the same attributes as the horizontal lines.\n\nThis component can be used in the larger project to display a numbered list with three items. It can be imported and used in any React component that needs to display a list. For example:\n\n```\nimport { ListOrderedSvg } from './ListOrderedSvg';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>My List</h2>\n      <ListOrderedSvg />\n      <p>Item 1</p>\n      <p>Item 2</p>\n      <p>Item 3</p>\n    </div>\n  );\n};\n```\n\nIn this example, the `ListOrderedSvg` component is used to display a numbered list with three items. The component is imported and used inside the `MyComponent` component. The list items are displayed using `p` elements.\n## Questions: \n 1. What does this code do?\n- This code exports a React functional component that renders an SVG image of an ordered list with 3 items and a bullet point.\n\n2. What is the purpose of the \"stroke\" and \"strokeWidth\" attributes in the SVG paths?\n- The \"stroke\" attribute sets the color of the path's outline, while the \"strokeWidth\" attribute sets the thickness of the outline.\n\n3. Can this component be customized or styled?\n- Yes, the component can be customized or styled by modifying the values of the SVG attributes or by applying CSS styles to the component.","metadata":{"source":".autodoc/docs/markdown/components/assets/ListOrderedSvg.md"}}],["85",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/PSvg.tsx)\n\nThe code above exports a React functional component called `PSvg`. This component renders an SVG icon that represents a \"P\" letter. The icon is used in the larger project as a visual representation of a specific feature or functionality related to the project.\n\nThe SVG element has a width and height of 18 pixels and a viewBox of \"0 0 18 18\", which means that the SVG content is scaled to fit the viewport. The `fill` attribute is set to \"none\", which means that the path inside the SVG element will not be filled with any color.\n\nThe `path` element inside the SVG element defines the shape of the icon. The `d` attribute contains a series of commands that describe the path of the icon. The `M` command moves the pen to a specific point on the canvas, while the `H` and `V` commands draw horizontal and vertical lines, respectively. The `C` command draws a cubic Bezier curve.\n\nThe `PSvg` component can be used in other React components by importing it and rendering it as JSX. For example:\n\n```\nimport { PSvg } from './path/to/PSvg';\n\nconst MyComponent: React.FC = () => (\n  <div>\n    <h1>My Component</h1>\n    <PSvg />\n  </div>\n);\n```\n\nThis will render the \"P\" icon inside the `MyComponent` component. The `PSvg` component can also be customized by passing props to it, such as a different `fill` color or a different `width` and `height`.\n## Questions: \n 1. What does this code do?\n   This code exports a React functional component that renders an SVG icon of a letter \"P\" with a specific path and fill color.\n\n2. What is the purpose of the viewBox attribute in the SVG element?\n   The viewBox attribute defines the position and dimensions of the SVG viewport, which allows the SVG to scale and fit within its container while maintaining its aspect ratio.\n\n3. Why is the fill attribute set to \"currentColor\"?\n   The fill attribute is set to \"currentColor\" to inherit the color of the parent element, which allows for easier theming and customization of the icon's color.","metadata":{"source":".autodoc/docs/markdown/components/assets/PSvg.md"}}],["86",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/QuestionSvg.tsx)\n\nThe code defines a React functional component called `QuestionSvg` that returns an SVG element. The SVG element has a width and height of 20 and a viewBox of 0 0 20 20. The `fill` attribute is set to \"none\", which means the SVG will be transparent and any background color will show through.\n\nThe SVG element contains two `path` elements. The first `path` element defines a curved line that starts at the coordinates (7.57495, 7.49999) and ends at the coordinates (9.93328, 10.8333). The line is drawn with the `stroke` attribute set to \"currentColor\", which means it will use the current text color. The `strokeWidth` attribute is set to 2, which means the line will be 2 pixels wide. The `strokeLinecap` attribute is set to \"round\", which means the ends of the line will be rounded. The `strokeLinejoin` attribute is also set to \"round\", which means the corners of the line will be rounded.\n\nThe second `path` element defines a short horizontal line that starts at the coordinates (10, 14.1666) and ends at the coordinates (10.0083, 14.1666). This line is also drawn with the `stroke` attribute set to \"currentColor\", a `strokeWidth` of 2, and `strokeLinecap` and `strokeLinejoin` set to \"round\".\n\nThis SVG component is likely used as an icon or visual element in the larger project. It could be used to indicate a help or information button, or to represent a question or inquiry. The component can be imported and used in other React components like this:\n\n```\nimport { QuestionSvg } from './QuestionSvg';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h2>Need help?</h2>\n      <button>\n        <QuestionSvg />\n      </button>\n    </div>\n  );\n};\n```\n## Questions: \n 1. What does this code do?\n   This code exports a React functional component that renders an SVG image of a question mark.\n\n2. What is the purpose of the \"stroke\" and \"strokeWidth\" attributes in the SVG paths?\n   The \"stroke\" attribute sets the color of the path's outline, while the \"strokeWidth\" attribute sets the thickness of the outline.\n\n3. Can this component be customized with different colors or sizes?\n   Yes, the color of the SVG paths can be changed by passing a different color value to the \"stroke\" attribute, and the size of the SVG can be adjusted by changing the \"width\" and \"height\" attributes in the SVG tag.","metadata":{"source":".autodoc/docs/markdown/components/assets/QuestionSvg.md"}}],["87",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/assets/UploadCloudSvg.tsx)\n\nThe code defines a React functional component called `UploadCloudSvg`. This component renders an SVG image of a cloud with an arrow pointing upwards, which is commonly used as an icon for file upload functionality. The SVG image is defined using various path elements with stroke and fill properties.\n\nThe component takes no props and can be used anywhere in the project where an upload icon is needed. It can be imported and used like any other React component:\n\n```\nimport { UploadCloudSvg } from './path/to/UploadCloudSvg';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Upload a file</h1>\n      <UploadCloudSvg />\n    </div>\n  );\n}\n```\n\nThe component can also be styled using CSS, as it includes class names for the arrow and cloud elements:\n\n```\n.upload-cloud-arrow {\n  stroke: blue;\n}\n\n.upload-cloud-cloud {\n  fill: white;\n}\n```\n\nOverall, this code provides a reusable and customizable SVG icon for file upload functionality in the larger project.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a React functional component that renders an SVG image of an upload cloud with an arrow.\n\n2. What are the dimensions of the SVG image?\n- The SVG image has a width and height of 38 units and a viewBox of \"0 0 38 38\".\n\n3. What is the significance of the \"currentColor\" value for the \"stroke\" attribute?\n- The \"currentColor\" value sets the stroke color to the current color of the element, which in this case is the color specified by the parent element.","metadata":{"source":".autodoc/docs/markdown/components/assets/UploadCloudSvg.md"}}],["88",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/auth/AuthWrapper.tsx)\n\nThe code defines a set of styled components that are used to create an authentication form wrapper for the kulturdaten-frontend project. The `StyledAuthWrapper` component is a grid container that has two columns on larger screens and one column on smaller screens. The first column contains the authentication form content, while the second column contains an image that is used as a background. The `StyledAuthWrapperContent` component is an empty container that is used to hold the authentication form content. The `StyledAuthWrapperImage` component is a container that holds the image used as a background. The `StyledAuthWrapperImageInner` component is an inner container that holds the actual image.\n\nThe `AuthFormContainer` component is a flex container that holds the authentication form elements. The `AuthFormItem` component is a flex container that holds a form item and its label. The `AuthHead` component is a flex container that holds the authentication form header. The `AuthHeadline` component is a styled `h1` element that displays the authentication form headline. The `AuthSubline` component is a styled `h2` element that displays the authentication form subline. The `AuthContent` component is a container that holds the authentication form content.\n\nThe `AuthWrapper` component is a wrapper that holds the authentication form content and the background image. It takes two props: `children`, which is the authentication form content, and `image`, which is an object that contains the image source and credits. The `AuthWrapper` component renders the `StyledAuthWrapper` component, which contains the `StyledAuthWrapperContent` and `StyledAuthWrapperImage` components. The `StyledAuthWrapperContent` component renders the authentication form content, while the `StyledAuthWrapperImage` component renders the background image.\n\nOverall, these styled components are used to create a visually appealing and responsive authentication form wrapper for the kulturdaten-frontend project. The components can be used in other parts of the project that require a similar layout and styling.\n## Questions: \n 1. What is the purpose of the `AuthWrapper` component?\n- The `AuthWrapper` component is a React functional component that wraps its children with a styled grid layout and an image background.\n\n2. What is the significance of the `mq` function and the `Breakpoint` enum?\n- The `mq` function is used to apply CSS styles based on the screen size breakpoints defined in the `Breakpoint` enum, which represents different screen sizes such as mobile, tablet, and desktop.\n\n3. What is the purpose of the `AuthFormItem` component and its `justifyContent` prop?\n- The `AuthFormItem` component is a styled component that displays its children in a row with a specified `justifyContent` value, which determines the alignment of the children along the main axis. The `justifyContent` prop accepts various values such as `center`, `start`, `end`, and `space-between`.","metadata":{"source":".autodoc/docs/markdown/components/auth/AuthWrapper.md"}}],["89",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/auth/Login.tsx)\n\nThe code defines a login form component for the Kulturdaten-frontend project. The component is built using React and Next.js and is used to authenticate users. \n\nThe component imports several other components and functions from the project's codebase, including `useRouter` and `useEffect` from Next.js, `useApiCall` and `authLoginFactory` from the `lib/api` module, and `useUser` from the `user/useUser` module. \n\nThe component defines several state variables using the `useState` hook, including `email`, `password`, `error`, and `remember`. It also defines several constants using the `useRef` and `useMemo` hooks, including `formRef` and `redirect`. \n\nThe component defines a `submitHandler` function that is called when the login form is submitted. The function first checks if the form is valid, and if so, it calls the `authLoginFactory` function to authenticate the user. If the authentication is successful, the function sets an authentication cookie using the `authCookie` function and redirects the user to the dashboard. If the authentication fails, the function sets an error message using the `setError` function. \n\nThe component defines a `form` variable that contains the login form HTML. The form contains several input fields, including an email input, a password input, and a checkbox for remembering the user's login. The form also contains a submit button and a link to reset the user's password. \n\nOverall, the `LoginForm` component is a key part of the Kulturdaten-frontend project's authentication system. It allows users to log in to the site and access protected content. The component is designed to be reusable and can be easily integrated into other parts of the project.\n## Questions: \n 1. What is the purpose of the `LoginForm` component?\n- The `LoginForm` component is used to render a form for user login.\n\n2. What external libraries or APIs does this code use?\n- This code uses the `next/router`, `react`, and `next/config` libraries, as well as custom libraries and APIs defined in the project.\n\n3. What happens when a user successfully logs in?\n- When a user successfully logs in, a cookie is created with the user's authentication token, and the user is redirected to the dashboard page with the default organizer ID.","metadata":{"source":".autodoc/docs/markdown/components/auth/Login.md"}}],["90",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/auth/Register.tsx)\n\nThe `RegisterForm` component is a React functional component that renders a form for user registration. It imports several components from the project's `lib` and `components` directories, including `Input`, `Checkbox`, `Button`, and `Info`. The component also imports several utility functions from the project's `lib` directory, including `useApiCall` and `authRegisterFactory`.\n\nThe component defines several state variables using the `useState` hook, including `email`, `password`, `passwordConfirmation`, `passwordConfirmationBlurred`, `errors`, and `success`. The `useMemo` hook is used to define a `passwordsMatch` variable that is `true` if the `password` and `passwordConfirmation` state variables match.\n\nThe component defines an `useEffect` hook that updates the `errors` state variable if the `password` and `passwordConfirmation` state variables do not match. The `submitHandler` function is an asynchronous function that is called when the user submits the form. It sends a registration request to the server using the `useApiCall` hook and the `authRegisterFactory` function. If the request is successful, the `success` state variable is set to `true`. If the request fails, the `errors` state variable is updated with an error message.\n\nThe component renders a form that includes several input fields for the user's email, password, and password confirmation. It also includes a checkbox for the user to confirm their agreement to the site's terms and conditions. If the form is successfully submitted, the component renders a success message. If there are any errors, the component renders an error message.\n\nOverall, the `RegisterForm` component is a reusable component that can be used to render a registration form for users. It handles form validation and submission, and provides feedback to the user if there are any errors.\n## Questions: \n 1. What is the purpose of the `RegisterForm` component?\n- The `RegisterForm` component is used to render a form for user registration, handle form submission, and display error/success messages.\n\n2. What is the significance of the `passwordErrorId` and `requestErrorId` constants?\n- The `passwordErrorId` and `requestErrorId` constants are used as unique identifiers for different types of errors that can occur during form submission. They are used to filter and display specific error messages.\n\n3. What is the purpose of the `useMemo` hook with the `passwordsMatch` variable?\n- The `useMemo` hook with the `passwordsMatch` variable is used to memoize the result of a comparison between the `password` and `passwordConfirmation` state variables. This is done to avoid unnecessary re-renders of the component when these variables change.","metadata":{"source":".autodoc/docs/markdown/components/auth/Register.md"}}],["91",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/auth/RequestPasswordReset.tsx)\n\nThe code defines a React functional component called `RequestPasswordResetForm`. This component is responsible for rendering a form that allows users to request a password reset. The form consists of an email input field and a submit button. When the user submits the form, the component sends a request to the server to initiate the password reset process.\n\nThe component uses several other components and hooks from the project's codebase to implement its functionality. These include:\n\n- `useApiCall`: a custom hook that provides a convenient way to make API requests to the server.\n- `useLocale`: a custom hook that provides the current locale of the application.\n- `useT`: a custom hook that provides a translation function for translating text into the current locale.\n- `Input`: a custom input component that renders an input field with a label and placeholder text.\n- `Button`: a custom button component that renders a button with customizable color, size, and content position.\n- `Info`: a custom component that renders an information message.\n\nThe component defines several state variables using the `useState` hook. These include:\n\n- `email`: a string that holds the current value of the email input field.\n- `errors`: an array of objects that represent any errors that occur during the form submission process.\n- `success`: a boolean that indicates whether the form submission was successful.\n\nThe component defines a `submitHandler` function that is called when the user submits the form. This function first prevents the default form submission behavior and clears any existing errors. It then sends a request to the server using the `useApiCall` hook and the `authRequestPasswordResetFactory` function. If the request is successful, the function sets the `success` state variable to `true`. If the request fails, the function extracts any error messages from the response and adds them to the `errors` state variable.\n\nThe component renders different content depending on the value of the `success` state variable. If `success` is `false`, the component renders the form with the email input field and submit button. If `success` is `true`, the component renders a success message. If there are any errors, the component renders them as `Info` components below the form.\n\nOverall, this component provides a simple and user-friendly way for users to request a password reset. It uses several custom components and hooks from the project's codebase to implement its functionality and provides error messages to users if anything goes wrong during the form submission process.\n## Questions: \n 1. What is the purpose of this code?\n- This code is a React component that renders a form for requesting a password reset.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several external libraries, including React, a custom API hook called `useApiCall`, and routing utilities from `lib/routing`.\n\n3. What happens if there is an error submitting the form?\n- If there is an error submitting the form, the error message is parsed and displayed to the user using the `Info` component. The error message is also stored in state using the `setErrors` function.","metadata":{"source":".autodoc/docs/markdown/components/auth/RequestPasswordReset.md"}}],["92",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/auth/ResetPassword.tsx)\n\nThe `ResetPasswordForm` component is a React functional component that renders a form for resetting a user's password. It is part of the `kulturdaten-frontend` project and is located in the `Auth` directory. \n\nThe component imports several modules from the project's `lib` and `components` directories, including `useApiCall`, `useLocale`, `useT`, `routes`, `Button`, `Input`, `AuthContent`, `AuthFormContainer`, `AuthHead`, `AuthHeadline`, `AuthSubline`, `AuthWrapper`, `ButtonLink`, `Link`, and `Info`. \n\nThe component defines several state variables using the `useState` hook, including `password`, `passwordConfirmation`, `passwordConfirmationBlurred`, `errors`, `linkExpired`, and `success`. It also defines two constants, `passwordErrorId` and `requestErrorId`, and two memoized variables, `email` and `signature`, which are derived from the `router` object. \n\nThe component uses the `useEffect` hook to update the `errors` state variable when the `password` and `passwordConfirmation` variables change. If the passwords match, any existing password error is removed from the `errors` array. If the passwords do not match and the `passwordConfirmation` input has been blurred, a new password error is added to the `errors` array. \n\nThe component defines a `submitHandler` function that is called when the form is submitted. The function first clears any existing errors, then checks if the passwords match and if the `email` and `signature` variables are defined. If these conditions are met, the function calls the `authResetPasswordFactory` function from the `lib/api/routes/auth/resetPassword` module to reset the user's password. If the reset is successful, the `success` state variable is set to `true`. If the reset fails, the function sets the `errors` state variable to an array of error messages based on the error response from the API. If the error response indicates that the reset link has expired, the `linkExpired` state variable is set to `true`. \n\nThe component renders a form that includes two `Input` components for entering the new password and its confirmation, and a `Button` component for submitting the form. If the reset is successful, the component renders a `ButtonLink` component that links to the login page. If there are errors, the component renders an `Info` component for each error message. If the reset link has expired, the component renders a `ButtonLink` component that links to the password reset page. \n\nOverall, the `ResetPasswordForm` component provides a user-friendly interface for resetting a user's password and handles error messages and expired links gracefully. It is a reusable component that can be used in the larger `kulturdaten-frontend` project wherever password resets are required.\n## Questions: \n 1. What is the purpose of the `ResetPasswordForm` component?\n- The `ResetPasswordForm` component is used to handle resetting a user's password.\n\n2. What libraries and hooks are being used in this code?\n- The code is using React, `useEffect`, `useMemo`, `useState`, `useApiCall`, `useLocale`, `useRouter`, and `useT` hooks, as well as components from the project's `button`, `info`, and `input` modules.\n\n3. What happens when the user submits the form?\n- When the user submits the form, the `submitHandler` function is called. If the passwords match and the email and signature are present, an API call is made to reset the user's password. If the call is successful, the `success` state is set to `true`. If there is an error, the `errors` state is updated with the appropriate error message.","metadata":{"source":".autodoc/docs/markdown/components/auth/ResetPassword.md"}}],["93",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/button/ButtonLink.tsx)\n\nThe code above defines a React component called `ButtonLink` that renders a button as an anchor tag (`<a>` element) with some additional styling. This component is used to create a button that behaves like a link, allowing users to navigate to a different page or section of the website when clicked.\n\nThe component imports the `styled` function from the `@emotion/styled` library, which is used to create a styled version of the anchor tag. The `StyledA` variable defines the styles for the anchor tag, including removing the default underline (`text-decoration: none`) and setting the display to `flex` with a `flex-direction` of `column`. It also includes the `focusStyles` constant from the `../globals/Constants` file, which defines the styles for when the anchor tag is in focus (e.g. when a user tabs to it using the keyboard).\n\nThe `ButtonLink` component extends the `ButtonProps` interface, which includes all the props that can be passed to the `Button` component. It also includes an optional `href` prop, which specifies the URL that the anchor tag should link to.\n\nThe component is defined using the `React.forwardRef` function, which allows the `ref` prop to be passed to the underlying anchor tag. This is necessary because the `Button` component also uses a `ref` to manage focus and accessibility.\n\nWhen the `ButtonLink` component is rendered, it creates an instance of the `StyledA` component with the `ref` and `href` props passed down from the `ButtonLink` component. It then renders a `Button` component inside the `StyledA` component, passing all the other props down to the `Button`.\n\nThis component can be used throughout the project wherever a button that behaves like a link is needed. For example, it could be used in a navigation menu to create a button that links to a different page, or in a call-to-action section to link to a sign-up form. Here's an example of how the `ButtonLink` component could be used:\n\n```\n<ButtonLink href=\"/signup\" variant=\"primary\">Sign up</ButtonLink>\n```\n## Questions: \n 1. What is the purpose of the `ButtonLink` component?\n   - The `ButtonLink` component is a styled anchor tag that wraps around the `Button` component and accepts a `href` prop to create a clickable link.\n\n2. What is the `StyledA` component and what styles does it apply?\n   - The `StyledA` component is a styled anchor tag that removes the default underline and applies flexbox styles to its children. It also includes the `focusStyles` from the `Constants` file.\n\n3. Why is `React.forwardRef` used in the `ButtonLink` component?\n   - `React.forwardRef` is used to pass a ref to the underlying anchor tag so that it can be accessed and manipulated outside of the component. This is useful for cases where the ref needs to be passed to a parent component or used for focus management.","metadata":{"source":".autodoc/docs/markdown/components/button/ButtonLink.md"}}],["94",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/button/story.tsx)\n\nThis code defines a set of stories for the `Button` component of the `kulturdaten-frontend` project. The `Button` component is imported from the same file, along with several related enums: `ButtonColor`, `ButtonSize`, `ButtonVariant`, and `IconPosition`. The `styled` function is also imported from the `@emotion/styled` package.\n\nThe `Button` component is used in several different ways in the defined stories, with different sizes, colors, and variants. Each story is defined as a function component that returns a set of `Button` components wrapped in a `TestWrapper` component. The `TestWrapper` component is a styled `div` that takes two optional props: `background` and `color`. It is used to provide a consistent layout and styling for the `Button` components in each story.\n\nThe `ButtonStory` story defines a set of `Button` components with the default size, color, and variant. Each `Button` has an `onClick` handler that logs a message to the console when clicked, and some of them also have an `icon` prop that specifies an icon to display next to the button text.\n\nThe `ButtonMinimalStory` and `ButtonBorderlessStory` stories define sets of `Button` components with the `minimal` and `borderless` variants, respectively. These variants remove the background and border of the `Button` component, leaving only the text and icon. The `ButtonMinimalStory` also demonstrates how the `TestWrapper` component can be used with different background and text colors.\n\nThe `ButtonSmallStory` and `ButtonBigStory` stories define sets of `Button` components with the `small` and `big` sizes, respectively. These sizes adjust the padding and font size of the `Button` component to make it smaller or larger. The `ButtonSmallStory` also demonstrates how the `color` and `iconPosition` props can be used to customize the appearance of the `Button` component.\n\nOverall, these stories provide a comprehensive set of examples for how the `Button` component can be used in the `kulturdaten-frontend` project, with different sizes, colors, and variants. They also demonstrate how the `TestWrapper` component can be used to provide a consistent layout and styling for the `Button` components in each story.\n## Questions: \n 1. What is the purpose of the `Button` component and what are its available props?\n- The `Button` component is used to render a button element with various styles and configurations. Its available props include `color`, `size`, `variant`, `icon`, and `iconPosition`.\n2. What is the purpose of the `TestWrapper` component and what are its available props?\n- The `TestWrapper` component is used to wrap the `Button` components and apply styles to them. Its available props include `background` and `color`.\n3. What is the purpose of the different story components (`ButtonStory`, `ButtonMinimalStory`, etc.) and how do they differ from each other?\n- The different story components are used to showcase the `Button` component with different configurations and styles. They differ from each other in terms of the `size`, `variant`, and `color` props that are passed to the `Button` component.","metadata":{"source":".autodoc/docs/markdown/components/button/story.md"}}],["95",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/checkbox/CheckboxList.tsx)\n\nThe `CheckboxList` component is a React functional component that renders a list of checkboxes. It takes in a set of props, including `label`, `id`, `checkboxes`, `value`, `required`, `onChange`, `columns`, and `variant`. \n\nThe `label` prop is a string that represents the label for the checkbox list. The `id` prop is a string that represents the ID of the checkbox list. The `checkboxes` prop is an array of objects that represent the individual checkboxes in the list. Each object has an `id`, `label`, and `value` property. The `value` prop is an array of strings that represent the values of the selected checkboxes. The `required` prop is a boolean that indicates whether the checkbox list is required. The `onChange` prop is a function that is called when the value of the checkbox list changes. The `columns` prop is a number that represents the number of columns in which the checkboxes should be displayed. The `variant` prop is a string that represents the variant of the checkbox list.\n\nThe component renders a `StyledCheckboxList` div that contains a `StyedCheckboxListLabel` div and a `StyledCheckboxListItems` ul. The `StyledCheckboxList` div is styled using CSS-in-JS with the `@emotion/styled` library. The `StyedCheckboxListLabel` div contains the label for the checkbox list. The `StyledCheckboxListItems` ul contains the individual checkboxes in the list. The number of columns in which the checkboxes are displayed is determined by the `columns` prop.\n\nThe component also renders a `StyledHiddenMultiSelect` select element that is used to store the selected values of the checkboxes. The `StyledHiddenMultiSelect` select element is hidden from view using CSS. The selected values of the checkboxes are stored in the `selectValue` state variable.\n\nThe `checkboxesToState` function is a helper function that takes in an array of checkbox objects and an array of selected values and returns an object that represents the state of the checkboxes. The `setCheckedState` function is a React state hook that sets the state of the checkboxes.\n\nThe `CheckboxList` component also uses the `useEffect` hook to update the state of the checkboxes when the `checkboxes` or `value` props change.\n\nThe `CheckboxList` component renders a `Checkbox` component for each checkbox in the `checkboxes` prop. The `Checkbox` component is a custom checkbox component that is imported from the `.` file. The `Checkbox` component takes in a set of props, including `id`, `label`, `inList`, `checked`, `onChange`, and `value`. The `id` prop is a string that represents the ID of the checkbox. The `label` prop is a string that represents the label for the checkbox. The `inList` prop is a boolean that indicates whether the checkbox is part of a list. The `checked` prop is a boolean that indicates whether the checkbox is checked. The `onChange` prop is a function that is called when the value of the checkbox changes. The `value` prop is a string that represents the value of the checkbox.\n\nWhen a checkbox is checked or unchecked, the `onChange` function is called. The `onChange` function updates the state of the checkboxes and the `selectValue` state variable. If the `onChange` prop is defined, it is called with the updated `selectValue` array. Otherwise, the `internalState` state variable is updated with the updated `selectValue` array.\n\nOverall, the `CheckboxList` component is a reusable component that can be used to render a list of checkboxes with customizable labels, values, and number of columns. It also provides a hidden select element that can be used to store the selected values of the checkboxes.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `CheckboxList` that renders a list of checkboxes with optional labels and columns.\n\n2. What external libraries or dependencies does this code use?\n- This code imports `styled` and `css` from `@emotion/styled`, `useEffect`, `useRef`, and `useState` from `react`, and `Checkbox` from a local file. It also imports various types and constants from other local files.\n\n3. What props can be passed to the `CheckboxList` component?\n- The `CheckboxList` component accepts props for `label`, `id`, `checkboxes`, `value`, `required`, `onChange`, `columns`, and `variant`. The `checkboxes` prop is an array of objects with `id`, `label`, and `value` properties that define the individual checkboxes to be rendered. The `value` prop is an array of strings that represent the currently selected checkboxes. The `onChange` prop is a function that is called when the selection changes, and it receives an array of strings representing the newly selected checkboxes. The `columns` prop is an optional number that specifies the number of columns to use for the grid layout of the checkboxes. The `variant` prop is an optional string that specifies the variant of the component to be rendered.","metadata":{"source":".autodoc/docs/markdown/components/checkbox/CheckboxList.md"}}],["96",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/checkbox/index.tsx)\n\nThe code defines two React components, `InsideCheckbox` and `Checkbox`, which are used to render checkbox inputs with customizable labels and styles. \n\nThe `InsideCheckbox` component renders a single checkbox input with an optional label. It accepts several props, including `id`, `label`, `onChange`, `checked`, `name`, `disabled`, `required`, `value`, and `valid`. If the `onChange` prop is provided, it will be called whenever the checkbox is toggled. If not, the component will manage its own internal state using the `useState` hook. The `checked` prop can be used to set the initial checked state of the checkbox. The `disabled` prop disables the checkbox and changes its appearance. The `required` prop adds an asterisk to the label to indicate that the checkbox is required. The `valid` prop can be used to indicate whether the checkbox input is valid or not, which changes its appearance.\n\nThe `Checkbox` component is a wrapper around `InsideCheckbox` that adds some additional styling and functionality. It accepts the same props as `InsideCheckbox`, as well as an optional `inList` prop. If `inList` is true, the component will render the checkbox input as a list item with different styling.\n\nThe styling for the checkbox inputs is defined using the `styled` function from the `@emotion/styled` package. The `StyledCheckboxInput` component defines the styles for the checkbox input itself, including its size, background color, border, and box shadow. The `StyledCheckbox` and `StyledCheckboxListItem` components define the styles for the container that wraps the checkbox input and label. The `StyledCheckboxInputContainer` and `StyledCheckboxInputCheck` components define the styles for the checkmark that appears inside the checkbox input when it is checked. The `StyledCheckboxLabel` component defines the styles for the label that appears next to the checkbox input.\n\nOverall, these components provide a flexible and customizable way to render checkbox inputs with different styles and labels throughout the project. They can be used in forms, lists, or anywhere else that checkbox inputs are needed.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines styled components for a checkbox input and label, and exports two React components (`InsideCheckbox` and `Checkbox`) that use these styled components to render checkbox inputs with labels.\n\n2. What are the styled components used in this code?\n- The styled components used in this code are `StyledCheckboxInput`, `StyledCheckbox`, `StyledCheckboxListItem`, `StyledCheckboxInputContainer`, `StyledCheckboxInputCheck`, and `StyledCheckboxLabel`.\n\n3. What props can be passed to the `Checkbox` and `InsideCheckbox` components?\n- The props that can be passed to these components include `id`, `label`, `ariaLabel`, `onChange`, `checked`, `name`, `disabled`, `required`, `value`, and `valid`. Additionally, the `Checkbox` component has an optional `inList` prop that determines whether to render the checkbox as a list item or not.","metadata":{"source":".autodoc/docs/markdown/components/checkbox/index.md"}}],["97",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/checkbox/story.tsx)\n\nThis code exports three stories for the Checkbox component and one story for the CheckboxList component using Storybook. Storybook is a tool for developing UI components in isolation, which allows developers to build and test components independently of the larger application. \n\nThe Checkbox component is imported from the current directory, while CheckboxList is imported from a subdirectory. The Checkbox component is a simple checkbox input with a label, while CheckboxList is a list of checkboxes with a label. \n\nThe `StyledTestWrapper` component is a styled div that is used to wrap the Checkbox and CheckboxList components in each story. It is defined using the `styled` function from the `@emotion/styled` package. The `StyledTestWrapper` component takes two optional props, `background` and `color`, which are used to set the background color and text color of the component. \n\nThe first story, `CheckboxDefaultStory`, renders a single Checkbox component with a label and an id of \"test1\". This story is named \"Default Checkbox\". \n\nThe second story, `CheckboxDisabledStory`, renders two Checkbox components with labels and ids of \"test1\" and \"test2\". The first Checkbox is unchecked and disabled, while the second Checkbox is checked and disabled. This story is named \"Disabled Checkbox\". \n\nThe third story, `CheckboxListStory`, renders a CheckboxList component with a label and an array of Checkbox objects. Each Checkbox object has an id, label, and value property, and some have a checked property. This story is named \"Checkbox List\". \n\nThese stories are used to visually test the Checkbox and CheckboxList components and ensure that they are working as expected. They can also be used as documentation for other developers who want to use these components in their own code.\n## Questions: \n 1. What is the purpose of the `Checkbox` and `CheckboxList` components?\n- The `Checkbox` and `CheckboxList` components are used to render checkboxes with labels and values.\n\n2. What is the purpose of the `StyledTestWrapper` component?\n- The `StyledTestWrapper` component is a styled container that is used to wrap the `Checkbox` and `CheckboxList` components in the storybook stories.\n\n3. What is the significance of the `background` and `color` props in the `StyledTestWrapper` component?\n- The `background` and `color` props are used to set the background color and text color of the `StyledTestWrapper` component, respectively. They are optional and default to empty strings if not provided.","metadata":{"source":".autodoc/docs/markdown/components/checkbox/story.md"}}],["98",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/collapsable/index.tsx)\n\nThe code defines two components, `Collapsable` and `useCollapsable`, that can be used to create collapsible sections in a React application. \n\nThe `Collapsable` component takes in a boolean `isCollapsed` prop and any child components to be rendered. It then renders a `StyledCollapsable` div that contains a `StyledCollapsableContainer` div. The `StyledCollapsableContainer` div has its height, visibility, and display properties set based on the value of the `isCollapsed` prop. If `isCollapsed` is true, the container is hidden and has no height. If `isCollapsed` is false, the container is visible and has an auto height. \n\nThe `useCollapsable` hook takes in child components, an optional `isCollapsed` boolean prop, an optional `setIsCollapsed` function, and an optional `initiallyCollapsed` boolean value. It returns an object with three properties: `renderedCollapsable`, `isCollapsed`, and `setIsCollapsed`. \n\n`renderedCollapsable` is a React element that renders the `Collapsable` component with the provided child components and `isCollapsed` prop. If `isCollapsed` is not provided, the hook uses an internal `internalIsCollapsed` state variable to determine the initial value of `isCollapsed`. \n\n`isCollapsed` is a boolean value that represents the current collapsed state of the collapsible section. If `isCollapsed` is not provided, the hook uses `internalIsCollapsed` as the initial value of `isCollapsed`. \n\n`setIsCollapsed` is a function that can be used to update the collapsed state of the section. If `setIsCollapsed` is not provided, the hook uses `setInternalIsCollapsed` to update the internal `internalIsCollapsed` state variable. \n\nOverall, these components and hook can be used to create collapsible sections in a React application. The `Collapsable` component provides the visual styling for the collapsible section, while the `useCollapsable` hook provides the state management and rendering logic. Developers can use these components and hook to create collapsible sections in their own applications by passing in child components and optionally providing initial collapsed state and state update functions. \n\nExample usage:\n\n```\nimport { useCollapsable } from './collapsable';\n\nconst MyComponent = () => {\n  const { renderedCollapsable, isCollapsed, setIsCollapsed } = useCollapsable(\n    <div>\n      <p>This is the content of the collapsible section.</p>\n    </div>,\n    false // initiallyExpanded\n  );\n\n  return (\n    <div>\n      <button onClick={() => setIsCollapsed(!isCollapsed)}>\n        {isCollapsed ? 'Expand' : 'Collapse'}\n      </button>\n      {renderedCollapsable}\n    </div>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of the `StyledCollapsable` and `StyledCollapsableContainer` components?\n- `StyledCollapsable` and `StyledCollapsableContainer` are styled components used to define the styles for the collapsable container.\n\n2. What is the difference between `WrappedCollapsableProps` and `CollapsableProps`?\n- `WrappedCollapsableProps` is an interface that defines the props for the `useCollapsable` hook, while `CollapsableProps` is an interface that defines the props for the `Collapsable` component.\n\n3. What is the purpose of the `useCollapsable` hook?\n- The `useCollapsable` hook is used to create a collapsable container with customizable collapse state and collapse handlers. It returns an object with the rendered collapsable, the current collapse state, and a function to update the collapse state.","metadata":{"source":".autodoc/docs/markdown/components/collapsable/index.md"}}],["99",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/formatter/index.tsx)\n\nThe code above defines a React component called `Formatter` that takes in a prop called `content`. The purpose of this component is to format and display JSON data in a readable way. \n\nThe component uses the `styled` function from the `@emotion/styled` library to create a styled `div` element that contains a `pre` element. The `pre` element is where the formatted JSON data will be displayed. The `CodeFormatter` component sets some styles for the `div` and `pre` elements, including padding, maximum height, and overflow behavior. It also defines some CSS classes for different types of JSON data, such as keys, strings, numbers, booleans, null values, and symbols. These classes are used to apply different colors to the JSON data when it is displayed.\n\nThe `Formatter` component uses the `useState` and `useEffect` hooks from React to manage state and side effects. When the component is first rendered, the `formatted` state is an empty string. When the `content` prop changes, the `useEffect` hook is called. If the `content` is an object and not null, the `formatJSON` function from the `lib/format` module is called to format the JSON data as a string. The resulting string is then set as the new value of the `formatted` state.\n\nFinally, the `Formatter` component returns the `CodeFormatter` component with a `pre` element that has its `dangerouslySetInnerHTML` prop set to an object with an `__html` property that contains the formatted JSON data. The use of `dangerouslySetInnerHTML` is necessary because the JSON data contains HTML entities that need to be rendered as HTML elements.\n\nThis component can be used in the larger project to display JSON data in a readable way. It can be used in any component that needs to display JSON data, such as search results or event details. Here's an example of how it can be used:\n\n```\nimport { Formatter } from './Formatter';\n\nconst eventData = {\n  name: 'Example Event',\n  date: '2022-01-01',\n  location: {\n    name: 'Example Venue',\n    address: '123 Main St',\n    city: 'Example City',\n    state: 'EX',\n    zip: '12345'\n  }\n};\n\nfunction EventDetails() {\n  return (\n    <div>\n      <h1>{eventData.name}</h1>\n      <h2>Date: {eventData.date}</h2>\n      <h2>Location:</h2>\n      <Formatter content={eventData.location} />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `CodeFormatter` component?\n   - The `CodeFormatter` component is a styled component that provides a formatted code block with syntax highlighting for different types of code elements.\n\n2. What is the purpose of the `Formatter` component?\n   - The `Formatter` component is a React functional component that takes in an `unknown` type `content` prop and formats it as JSON using the `formatJSON` function from the `lib/format` module. The formatted JSON is then displayed using the `CodeFormatter` component.\n\n3. What is the purpose of the `useEffect` hook in the `Formatter` component?\n   - The `useEffect` hook is used to update the `formatted` state variable whenever the `content` prop changes. If the `content` is an object and not null, it is formatted as JSON using the `formatJSON` function and set as the new value of `formatted`.","metadata":{"source":".autodoc/docs/markdown/components/formatter/index.md"}}],["100",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/formatter/story.tsx)\n\nThe code above is a React component that renders a storybook story for a JSON formatter. The purpose of this component is to provide a visual representation of how JSON data will be formatted when passed through the Formatter component. \n\nThe component imports the necessary dependencies, including styled components and the Formatter component. It then defines a styled wrapper component that will be used to display the formatted JSON data. The wrapper component is defined using the styled() function from the styled components library. It takes two optional props, background and color, which can be used to set the background color and text color of the wrapper component. \n\nThe CodeFormatStory component is a storybook story that renders the Formatter component inside the StyledTestWrapper component. The Formatter component takes a single prop, content, which is an object containing the JSON data to be formatted. In this case, the content prop is set to an example object with three properties, a, b, and c. The c property is itself an object with three properties, x, y, and z. \n\nThe purpose of this component is to provide a visual representation of how JSON data will be formatted when passed through the Formatter component. This can be useful for developers who are working with JSON data and need to ensure that it is being formatted correctly. The component can be used in the larger project as a tool for testing and debugging JSON data. \n\nExample usage:\n\n```\nimport React from 'react';\nimport { CodeFormatStory } from './CodeFormatStory';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <h1>My Component</h1>\n      <CodeFormatStory />\n    </div>\n  );\n};\n\nexport default MyComponent;\n```\n\nIn the example above, the CodeFormatStory component is rendered inside a parent component called MyComponent. This allows developers to see how their JSON data will be formatted within the context of their larger application.\n## Questions: \n 1. What is the purpose of the `Formatter` component being imported?\n   - The `Formatter` component is being imported to format JSON content.\n2. What is the purpose of the `StyledTestWrapper` component?\n   - The `StyledTestWrapper` component is being used to style the container of the `Formatter` component.\n3. What is the purpose of the `background` and `color` props in the `StyledTestWrapper` component?\n   - The `background` and `color` props are optional and allow for customization of the background color and text color of the `StyledTestWrapper` component.","metadata":{"source":".autodoc/docs/markdown/components/formatter/story.md"}}],["101",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/globals/Constants.tsx)\n\nThe code defines a set of CSS variables and utility functions for use in the kulturdaten-frontend project. The CSS variables define a range of colors, font sizes, line heights, and other properties that can be used throughout the project to ensure consistency in the visual design. The utility functions include a media query function (`mq`) that generates a CSS media query based on a given breakpoint, a grid layout function (`contentGrid`) that generates a CSS grid layout with a specified number of columns, and two functions (`insetBorder` and `insetBorderColored`) that generate CSS box-shadow properties to create an inset border effect on one or more sides of an element.\n\nThe `CSSVars` component exports the CSS variables as a global style using the `@emotion/react` library. This component can be included in the root of the application to ensure that the variables are available throughout the project.\n\nThe `mq` function takes a `Breakpoint` enum value (defined in the `WindowService` module) and returns a CSS media query string that targets screens with a minimum width equal to the breakpoint's value. This function can be used to apply styles only to screens above a certain size, ensuring that the layout and design of the application are optimized for different screen sizes.\n\nThe `contentGrid` function generates a CSS grid layout with a specified number of columns. This function can be used to create consistent grid layouts throughout the project, ensuring that elements are aligned and spaced correctly.\n\nThe `insetBorder` and `insetBorderColored` functions generate CSS box-shadow properties to create an inset border effect on one or more sides of an element. These functions can be used to add borders to elements without affecting their layout or positioning, and can be customized with different colors and border styles.\n\nThe `overlayStyles`, `focusStyles`, and `focusBlackStyles` variables define CSS styles for use in specific contexts. `overlayStyles` defines a black background with a semi-transparent overlay, `focusStyles` defines a blue outline to indicate focus on an element, and `focusBlackStyles` defines a black outline with a white border to indicate focus on a dark element.\n\nOverall, this code provides a set of reusable CSS variables and utility functions that can be used throughout the kulturdaten-frontend project to ensure consistency in the visual design and layout of the application.\n## Questions: \n 1. What is the purpose of the `CSSVars` component?\n   - The `CSSVars` component defines CSS variables for various colors, font sizes, and other styles to be used throughout the application.\n2. What is the purpose of the `mq` function?\n   - The `mq` function returns a media query string based on a given breakpoint, which can be used to apply styles only when the screen width is above a certain size.\n3. What is the purpose of the `insetBorder` and `insetBorderColored` functions?\n   - The `insetBorder` and `insetBorderColored` functions create CSS box-shadow values that can be used to create borders around elements, with the ability to specify which sides should have a border and what color it should be.","metadata":{"source":".autodoc/docs/markdown/components/globals/Constants.md"}}],["102",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/globals/Global.tsx)\n\nThe code above is a React functional component that exports a Global component. This component is responsible for setting global styles for the entire application. It uses the Emotion library to define CSS styles in a JavaScript file.\n\nThe Global component is a wrapper around the EmotionGlobal component from the Emotion library. It takes no props and simply defines the global styles for the application. The styles are defined using the css function from the Emotion library, which allows for CSS to be written in a JavaScript file.\n\nThe styles defined in this component set the color and background of the html and body elements to the values of the --black and --white CSS variables respectively. It also sets the width of these elements to 100% and applies a letter-spacing of -0.005em to all child elements.\n\nThis component is likely used in the larger project to ensure consistent styling across all components and pages. By defining global styles in a single component, it makes it easier to maintain and update the styling of the entire application. Other components can then be styled using CSS-in-JS techniques provided by the Emotion library.\n\nExample usage of this component in a React application:\n\n```\nimport React from 'react';\nimport { Global } from './Global';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Global />\n      <div>Hello World</div>\n    </>\n  );\n};\n\nexport default App;\n```\n\nIn the example above, the Global component is imported and used as a wrapper around the entire application. This ensures that the global styles defined in the component are applied to all elements in the application.\n## Questions: \n 1. What is the purpose of the `Global` component?\n   - The `Global` component is used to apply global styles to the entire application using Emotion's `Global` component.\n\n2. What is the `css` function from Emotion used for in this code?\n   - The `css` function is used to define the global styles for the `html` and `body` elements, as well as any child elements using the `*` selector.\n\n3. What variables are being used for the `color` and `background` properties?\n   - The `color` property is using the `--black` variable and the `background` property is using the `--white` variable, which are likely defined elsewhere in the application's CSS or theme files.","metadata":{"source":".autodoc/docs/markdown/components/globals/Global.md"}}],["103",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/globals/Reset.tsx)\n\nThe code above is a React component that exports a `Reset` component. This component is responsible for resetting the default styles of HTML elements to ensure consistency across different browsers. It does this by using the `Global` component from the `@emotion/react` library to apply a set of CSS rules to the entire application.\n\nThe CSS rules applied by the `Reset` component target a wide range of HTML elements and set their margins, padding, borders, font size, and vertical alignment to zero. They also reset the display property of certain HTML5 elements to `block`, set the list style of unordered and ordered lists to `none`, and remove the default quotes from blockquotes and quotes. Additionally, the component sets the `box-sizing` property of form elements to `border-box` and sets the `font-family` and `font-weight` properties of form elements to specific values.\n\nThe `Reset` component is used in the larger project to ensure consistency in the styling of HTML elements across different browsers. By applying a set of consistent styles to all HTML elements, the component helps to avoid inconsistencies in the appearance of the application. The component can be used by importing it into other components and rendering it at the top level of the application.\n\nExample usage:\n\n```\nimport React from 'react';\nimport { Reset } from './Reset';\n\nconst App = () => {\n  return (\n    <>\n      <Reset />\n      <div>Hello World!</div>\n    </>\n  );\n};\n\nexport default App;\n```\n## Questions: \n 1. What is the purpose of the `Reset` component?\n    \n    The `Reset` component is used to reset the default styles of HTML elements to ensure consistent styling across different browsers.\n\n2. What is the `Global` component used for?\n    \n    The `Global` component is used to apply global styles to the entire application, rather than just a specific component.\n\n3. What is the purpose of the CSS properties `box-sizing` and `max-width` in this code?\n    \n    The `box-sizing` property is used to include the padding and border of an element in its total width and height, while the `max-width` property is used to ensure that the content of the page does not exceed the width of the viewport.","metadata":{"source":".autodoc/docs/markdown/components/globals/Reset.md"}}],["104",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/globals/Typography.tsx)\n\nThe code above is responsible for defining the typography and font styles for the entire project. It imports the `Global` and `css` components from the `@emotion/react` library and exports two constants, `fontFamily` and `fontFamilyMono`. \n\nThe `Typography` component is a functional component that returns a `Global` component with a `styles` prop that contains CSS rules for defining the font faces and styles. The `@font-face` rule is used to define custom fonts for the project. The `font-family` property is set to the `fontFamily` and `fontFamilyMono` constants, which are defined at the top of the file. \n\nEach `@font-face` rule defines a font family, source, weight, display, and style. The `src` property specifies the location of the font files in the project directory. The `font-weight` property specifies the weight of the font, which can be either 500 or 700. The `font-display` property specifies how the font should be displayed, which is set to `auto` in this case. The `font-style` property specifies the style of the font, which can be either `normal` or `italic`. \n\nThe `html` rule sets the font family to `fontFamily`, which is defined at the top of the file. It also sets the font weight to a custom CSS variable `--font-weight-normal`, which is likely defined elsewhere in the project. Other CSS properties are also set to improve the legibility and rendering of the text. \n\nOverall, this code is responsible for defining the typography and font styles for the entire project. It can be used in conjunction with other components and styles to create a cohesive and consistent design system. \n\nExample usage:\n\n```jsx\nimport React from 'react';\nimport { Typography } from './Typography';\n\nconst App = () => {\n  return (\n    <div>\n      <Typography />\n      <h1>Hello, world!</h1>\n      <p>This is some text.</p>\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn the example above, the `Typography` component is imported and rendered at the top of the `App` component. This ensures that the font styles are applied to all text elements within the `App` component.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines font families and styles for the typography used in the project.\n\n2. What font families are being used in this code?\n   - The code defines two font families: IBM Plex Sans and IBM Plex Mono.\n\n3. What is the significance of the `font-display` property in the `@font-face` rules?\n   - The `font-display` property determines how the font is displayed while it is loading. In this code, the value `auto` is used, which means the browser will use its default behavior for font loading.","metadata":{"source":".autodoc/docs/markdown/components/globals/Typography.md"}}],["105",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/info/index.tsx)\n\nThe code defines a React component called `Info` that renders an information box with an icon, a title, and some content. The component takes several props, including `children` (the content to be displayed), `color` (the color scheme of the box), `title` (an optional title to be displayed above the content), and `noMaxWidth` (an optional flag to disable the maximum width of the content).\n\nThe component is styled using Emotion, a CSS-in-JS library. The `StyledInfo` component defines the overall style of the information box, including its border radius, font size, padding, and background color. The `StyledInfoIcon` component defines the style of the icon, which is a `react-feather` component called `Info`. The `StyledInfoContent` component defines the style of the content container, which is a flexbox with a column direction and a gap between rows. The `StyledInfoText` component defines the style of the title and content text, which are also flexboxes with a column direction and a gap between rows. Finally, the `InfoUl`, `InfoLi`, and `InfoP` components define the styles of unordered lists, list items, and paragraphs that can be used within the content of the information box.\n\nThe `InfoColor` enum defines several color schemes that can be used for the information box, including yellow, grey, white, and green. The `infoColorMap` object maps each color scheme to its corresponding background color, text color, and border color.\n\nOverall, this code provides a reusable and customizable component for displaying information boxes with consistent styling throughout the project. It can be used in various contexts, such as displaying help text, error messages, or notifications. The `Info` component can be imported and used in other React components like this:\n\n```\nimport { Info, InfoColor } from './path/to/Info';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Info color={InfoColor.green} title=\"Title\">\n        <InfoP>Content</InfoP>\n        <InfoUl>\n          <InfoLi>List item 1</InfoLi>\n          <InfoLi>List item 2</InfoLi>\n        </InfoUl>\n      </Info>\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `Info` component?\n   - The `Info` component is a styled component that displays information with an icon and customizable colors.\n\n2. What is the purpose of the `InfoColor` enum and `infoColorMap` object?\n   - The `InfoColor` enum defines the available color options for the `Info` component, and the `infoColorMap` object maps each color option to its corresponding background, text, and border colors.\n\n3. What is the purpose of the `insetBorderColored` function and how is it used?\n   - The `insetBorderColored` function is a helper function that generates a CSS box-shadow property with an inset border and a specified color. It is used in the `StyledInfo` component to create a colored border around the component.","metadata":{"source":".autodoc/docs/markdown/components/info/index.md"}}],["106",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/info/story.tsx)\n\nThe code above is a Storybook story for the `Info` component. Storybook is a tool for developing UI components in isolation, allowing developers to view and interact with components in different states and configurations. The `Info` component is likely a reusable component that displays information to the user.\n\nThe `import` statement at the top of the file imports the `Story` component from the `@storybook/react` package and the `Info` component from a local file. The `export default` statement exports an object that defines the title of the story as \"Info\". The `export const` statement exports a `Story` component that renders the `Info` component with some sample text.\n\nThis code is useful for developers who are working on the `Info` component or any component that uses the `Info` component. By using Storybook, developers can quickly see how the `Info` component looks and behaves in different scenarios without having to navigate to different parts of the application. This can save time and make it easier to identify and fix issues with the component.\n\nHere is an example of how the `Info` component might be used in a larger project:\n\n```jsx\nimport React from 'react';\nimport Info from './Info';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <h1>Welcome to MyComponent</h1>\n      <Info>\n        This is some information about MyComponent. It can be used to display important details or instructions to the user.\n      </Info>\n    </div>\n  );\n}\n\nexport default MyComponent;\n```\n\nIn this example, the `Info` component is used to display information about the `MyComponent` component. This could be used to provide instructions to the user or to explain the purpose of the component. By using the `Info` component, the developer can ensure that the information is displayed consistently and with a consistent style throughout the application.\n## Questions: \n 1. What is the purpose of the `Info` component?\n   - The `Info` component is being imported from the current directory and is used to display information.\n2. What is the `InfoDefaultStory` function doing?\n   - The `InfoDefaultStory` function is a Storybook story that renders the `Info` component with some placeholder text.\n3. What is the `title` property in the default export object used for?\n   - The `title` property is used to define the title of the Storybook story for the `Info` component.","metadata":{"source":".autodoc/docs/markdown/components/info/story.md"}}],["107",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/input/index.tsx)\n\nThe code defines a React component called `Input` that renders an HTML input element with various styles and behaviors. The component accepts a number of props that allow customization of the input's appearance and behavior, such as `type`, `label`, `placeholder`, `valid`, `error`, `onChange`, and `onBlur`. \n\nThe `Input` component is built using Emotion, a CSS-in-JS library that allows styles to be defined as JavaScript objects. The component defines a number of Emotion styles that are used to customize the appearance of the input element based on its state. For example, the `inputStyles` function defines styles for the input element based on whether it is pristine (i.e. has not been interacted with), valid, or has a hint or error message. \n\nThe `Input` component also defines a number of utility functions that are used to normalize the input value based on its type. For example, the `normalizeStrings` function is used to normalize URL and telephone number inputs to ensure they are in a consistent format. \n\nThe `Input` component is designed to be used as a reusable input element throughout the larger project. It can be customized using the various props to suit different use cases, such as text inputs, date pickers, and password fields. The component is also designed to be accessible, with support for ARIA labels and tooltips.\n## Questions: \n 1. What is the purpose of the `Input` component?\n   \n   The `Input` component is a reusable component that renders an input field with various props for customization, such as type, label, placeholder, and validation.\n\n2. What is the purpose of the `useDebounce` hook used in this file?\n   \n   The `useDebounce` hook is used to delay the execution of a function, such as the `onChange` event handler for the input field, until a certain amount of time has passed without any further changes. This can be useful for improving performance and reducing unnecessary re-renders.\n\n3. What is the purpose of the `inputStyles` function?\n   \n   The `inputStyles` function is a helper function that generates CSS styles for the `StyledInput` component based on its props, such as whether it is valid or has a hint. It also includes default styles for the input field, such as border radius and box shadow.","metadata":{"source":".autodoc/docs/markdown/components/input/index.md"}}],["108",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/input/story.tsx)\n\nThis code defines a set of input components that can be used in a larger project. The `Input` component is imported from another file, and the `InputType` enum is defined in the same file. The `useT` hook is also imported from another file, which is used to translate error messages.\n\nThe `Input` component is used to create different types of input fields, such as text, number, email, password, and URL. Each input field has a label, placeholder, and an optional error message. The `Input` component also accepts additional props such as `required`, `step`, `min`, `max`, and `autoComplete`.\n\nThe `StyledTestWrapper` and `StyledCell` components are used to style the input fields. The `StyledTestWrapper` component is a grid container that displays the input fields in two columns. The `StyledCell` component is a grid item that contains an input field.\n\nEach input field is defined as a separate story using the `Story` component from the `@storybook/react` library. Each story is given a name and is wrapped in a `StyledTestWrapper` component. The `InputTextStory`, `InputNumberStory`, `InputTelStory`, `InputPasswordStory`, `InputEmailStory`, `InputUrlStory`, `InputButtonStory`, and `InputLoginStory` stories define different types of input fields.\n\nThe `InputPasswordStory` story is unique in that it defines two password input fields, one for entering a password and one for confirming the password. The `useState` hook is used to manage the state of the password fields, and the `valid` and `error` props are used to display an error message if the passwords do not match.\n\nOverall, this code provides a set of reusable input components that can be used in a larger project. The stories provide examples of how to use each input field and how to style them using the `StyledTestWrapper` and `StyledCell` components.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines several input components with different types and styles using the `Input` component and `styled` from `@emotion/styled`.\n\n2. What is the significance of the `Story` component?\n- The `Story` component is imported from `@storybook/react` and is used to define a story for a component in Storybook, which is a tool for UI development and testing.\n\n3. What is the purpose of the `useT` hook?\n- The `useT` hook is imported from `../../lib/i18n` and is used for internationalization (i18n) to translate text in the application.","metadata":{"source":".autodoc/docs/markdown/components/input/story.md"}}],["109",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/label/index.tsx)\n\nThe code above defines a React component called `Label` that renders a styled HTML label element. The label element is used to associate a text label with an input element, allowing users to click on the label to focus on the input. \n\nThe `Label` component takes in four props: `children`, `htmlFor`, `ariaLabel`, and `id`. The `children` prop is required and represents the text content of the label. The `htmlFor` prop is optional and represents the ID of the input element that the label is associated with. The `ariaLabel` prop is also optional and represents an accessible label for the input element. The `id` prop is also optional and represents the ID of the label element.\n\nThe `Label` component uses the `StyledLabel` component from the `@emotion/styled` library to apply CSS styles to the label element. The `StyledLabel` component sets the font size, line height, font weight, color, and display properties of the label element. The `StyledLabel` component also sets the `flex-direction` property to `row`, which arranges the label and input elements horizontally.\n\nThe `Label` component renders the `StyledLabel` component with the `htmlFor`, `ariaLabel`, and `id` props passed in as attributes to the label element. The `children` prop is rendered as the text content of the label element.\n\nThis `Label` component can be used throughout the larger project to create accessible and styled labels for input elements. For example, it could be used in a form component to label each input field. Here is an example usage of the `Label` component:\n\n```\nimport { Label } from './Label';\n\nfunction MyForm() {\n  return (\n    <form>\n      <Label htmlFor=\"name\">Name:</Label>\n      <input type=\"text\" id=\"name\" />\n      <Label htmlFor=\"email\">Email:</Label>\n      <input type=\"email\" id=\"email\" />\n    </form>\n  );\n}\n```\n\nIn this example, the `Label` component is used to label two input fields with the IDs `name` and `email`. The `htmlFor` prop is used to associate the label with the input element, and the `children` prop is used to set the text content of the label.\n## Questions: \n 1. What is the purpose of the `StyledLabel` component?\n   - The `StyledLabel` component is a styled label element that sets font size, line height, font weight, color, and display properties.\n\n2. What is the purpose of the `Label` component?\n   - The `Label` component is a functional component that renders a `StyledLabel` component with optional `htmlFor`, `ariaLabel`, and `id` props and any child elements.\n\n3. What library is used for styling in this code?\n   - The `styled` function is imported from the `@emotion/styled` library for styling in this code.","metadata":{"source":".autodoc/docs/markdown/components/label/index.md"}}],["110",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/layouts/AppLayout.tsx)\n\nThe code defines the layout of the main application page for the Kulturdaten-frontend project. It imports various components from other files and libraries, including `useBodyLock` and `useActiveRoute` from the `lib` folder, `NavigationProps` and `useNavigationOverlayVisible` from the `navigation` folder, and `mq` and `overlayStyles` from the `globals` folder. \n\nThe `AppLayout` component is the main component in this file, which takes in `header`, `sidebar`, `content`, and `layout` as props. It renders the header, sidebar, and content in their respective slots, and applies CSS styles to position them on the page. The `layout` prop determines whether the page should have an organizer band (a vertical navigation bar on the left side of the page), which is used for logged-in users. \n\nThe `useLayout` function returns the layout type based on the active route, which is determined by the `useActiveRoute` hook. The `appLayouts` object defines the layout types and whether they have an organizer band. \n\nThe `Container` component defines the grid layout of the page, with 4 columns for small screens, 11 columns for medium screens, and 8 columns for large screens. The `OrganizerSlot` component defines the position and style of the organizer band, which is fixed to the left side of the page and has a black background when the user is in admin mode. The `HeaderSlot` and `HeaderSlotSecondary` components define the position and style of the header, with `HeaderSlotSecondary` being used for the secondary header. The `MenuSlot` component defines the position and style of the sidebar, which is fixed to the left side of the page and expands when the user clicks on the menu button. The `ContentSlot` component defines the position and style of the content, which takes up the remaining space on the page. \n\nThe `useEffect` hooks are used to set the `inert` attribute on the `ContentSlot` when the main menu overlay is visible, which prevents the content from being focusable via tabbing. Another `useEffect` hook sets the `role` attribute on the `__next` element to `application`. \n\nOverall, this code defines the layout of the main application page for the Kulturdaten-frontend project, with components for the header, sidebar, content, and organizer band. It uses CSS grid to position the components on the page and applies styles to make the page responsive to different screen sizes.\n## Questions: \n 1. What is the purpose of the `useLayout` function?\n   - The `useLayout` function is used to determine the layout of the app based on the active route.\n\n2. What is the purpose of the `AppLayout` component?\n   - The `AppLayout` component is a layout component that renders the header, sidebar, and content of the app based on the specified layout.\n\n3. What is the purpose of the `OrganizerBand` component?\n   - The `OrganizerBand` component is used to render the organizer band in the app's layout, which contains navigation links for organizers.","metadata":{"source":".autodoc/docs/markdown/components/layouts/AppLayout.md"}}],["111",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/linklist/index.tsx)\n\nThe code defines a React component called `LinkList` that renders a list of links with an input field to add new links. The component is styled using Emotion and uses several other components from the same project, such as `Button`, `Input`, and `Label`. \n\nThe `LinkList` component takes several props, including `links`, `label`, `onChange`, `maxLinks`, and `required`. The `links` prop is an array of strings representing the initial links to be displayed in the list. The `label` prop is a string that is used as a label for the list. The `onChange` prop is a callback function that is called whenever the links in the list are updated. The `maxLinks` prop is a number that specifies the maximum number of links that can be added to the list. The `required` prop is a boolean that specifies whether the input field is required.\n\nThe `LinkList` component uses a reducer to manage the state of the links in the list. The reducer handles four actions: `add`, `update`, `delete`, and `init`. The `add` action adds a new link to the list. The `update` action updates an existing link in the list. The `delete` action removes a link from the list. The `init` action initializes the list with a set of links.\n\nThe `LinkList` component also defines a custom hook called `useLinkList` that returns an object with three properties: `renderedLinkList`, `init`, and `valid`. The `renderedLinkList` property is a React element that renders the `LinkList` component with the specified props. The `init` property is a function that initializes the list with a set of links. The `valid` property is a boolean that indicates whether the links in the list are valid URLs.\n\nOverall, the `LinkList` component provides a reusable way to manage a list of links with an input field for adding new links. It is flexible enough to be used in a variety of contexts, such as a form for adding links to a resource.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `LinkList` that renders a list of links with add, update, and delete functionality, and provides a hook called `useLinkList` that returns the rendered `LinkList` component along with a `valid` boolean and an `init` function.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several modules from external libraries, including `@emotion/styled`, `react`, `lib/i18n`, `lib/uid`, `lib/validations`, and `globals/Constants`.\n\n3. What is the purpose of the `useMemo` and `useEffect` hooks in this code?\n- The `useMemo` hook is used to memoize the `links` prop passed to the `LinkList` component, and the `externalValueDefined` state variable. The `useEffect` hook is used to initialize the `linksState` of the `LinkList` component with the `links` prop passed to it, and to call the `onChange` prop function whenever the `linksState` changes.","metadata":{"source":".autodoc/docs/markdown/components/linklist/index.md"}}],["112",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/linklist/story.tsx)\n\nThe code above is a React component that renders a list of links. It uses the `useLinkList` hook to generate the list of links based on the parameters passed to it. The component is also used as a story in Storybook, a tool for building UI components in isolation.\n\nThe `useLinkList` hook takes an object with the following properties:\n\n- `links`: an array of URLs to be displayed as links\n- `label`: a string that describes the list of links\n- `onChange`: a callback function that is called whenever the list of links is changed\n- `maxLinks`: an optional number that specifies the maximum number of links that can be displayed\n\nThe `useCallback` hook is used to memoize the `onChange` function so that it is only recreated when the `links` array changes. This can help improve performance by preventing unnecessary re-renders.\n\nThe `renderedLinkList` property returned by `useLinkList` is an array of React elements that represent the links. These elements are then rendered by the `X` component using the `{renderedLinkList}` syntax.\n\nThe `LinkListDefaultStory` is a Storybook story that renders the `X` component. This allows developers to preview the component in isolation and test its functionality.\n\nOverall, this code provides a reusable component for rendering lists of links with customizable labels and maximum link counts. It also demonstrates the use of Storybook for building and testing UI components.\n## Questions: \n 1. What is the purpose of the `useLinkList` hook being imported?\n   - The `useLinkList` hook is being used to render a list of links with a label and a maximum number of links, and to provide a callback function for when the links are changed.\n2. What is the significance of the `X` component?\n   - The `X` component is the main component being rendered, and it utilizes the `useLinkList` hook to generate a list of links with the specified properties.\n3. What is the purpose of the `LinkListDefaultStory` export?\n   - The `LinkListDefaultStory` export is a Storybook story that renders the `X` component, allowing developers to preview and test the link list component in isolation.","metadata":{"source":".autodoc/docs/markdown/components/linklist/story.md"}}],["113",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/LocaleSwitch.tsx)\n\nThe code defines a React component called `LocaleSwitch` that renders a select input for switching between different language locales. The component is styled using the `styled` function from the `@emotion/styled` package and the `css` function from the `@emotion/react` package. The styling is based on the `switchVariant` prop, which can be one of three values defined in the `LocaleSwitchVariant` enum: `default`, `minimal`, or `settings`.\n\nThe component uses several hooks from the `lib` directory of the project. The `useLocale` hook returns the currently active locale, while the `useSwitchLocale` hook returns a function for changing the active locale. The `useT` hook returns a translation function for translating text based on the active locale.\n\nThe component renders a `Select` component from the `../select` module, which is also part of the project. The `Select` component is passed several props, including the `label`, `labelPosition`, `ariaLabel`, `ariaLabelledby`, `variant`, `id`, `value`, `icon`, and `onChange`. The `label` prop is set to a translated string, while the `value` prop is set to the currently active locale. The `onChange` prop is set to a function that calls the `switchLocale` function with the selected locale value.\n\nThe `Select` component renders a list of `option` elements based on the `locales` object defined in the `config/locales` module of the project. Each `option` element has a value equal to the locale key and displays the locale name as its text content.\n\nThe `LocaleSwitch` component is exported as the default export of the module and can be used in other parts of the project to provide a language switching feature. The `switchVariant` prop can be used to customize the appearance of the component based on the context in which it is used.\n## Questions: \n 1. What is the purpose of the `LocaleSwitch` component?\n   - The `LocaleSwitch` component is used to allow users to switch between different language locales on the website.\n2. What are the different variants of the `LocaleSwitch` component?\n   - The different variants of the `LocaleSwitch` component are `default`, `minimal`, and `settings`.\n3. What is the purpose of the `useSwitchLocale` hook?\n   - The `useSwitchLocale` hook is used to update the active locale when the user selects a new language from the `LocaleSwitch` component.","metadata":{"source":".autodoc/docs/markdown/components/navigation/LocaleSwitch.md"}}],["114",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/Menu/MenuIcon.tsx)\n\nThis code defines a set of React components that represent icons for a menu in a larger project. The icons are defined as SVGs and are styled using Emotion. The icons are exported as a single `MenuIcon` component that takes a `type` prop, which is an enum of possible icon names. \n\nThe `MenuIcon` component uses the `type` prop to dynamically render the appropriate icon component. The icon components are defined as separate React functional components, each representing a different icon. The icons are defined using SVG paths and shapes, and are styled using CSS. \n\nThe `LocationSvg`, `OfferSvg`, and `OrganizerSvg` components each use the `usePseudoUID` hook from the `uid` module to generate a unique ID for a linear gradient used in the icon's styling. The `useState` hook is used to store the generated ID. \n\nThe `StartSvg`, `LocationSvg`, `OfferSvg`, `OrganizerSvg`, and `UserSvg` components each define an SVG path or shape that represents the icon. These components are used as children of the `MenuIcon` component, which renders the appropriate icon based on the `type` prop. \n\nOverall, this code provides a set of reusable icon components that can be used in the larger project's menu system. By using a single `MenuIcon` component that dynamically renders the appropriate icon, the code reduces the amount of boilerplate code needed to render each icon individually.\n## Questions: \n 1. What is the purpose of the `usePseudoUID` hook?\n- The `usePseudoUID` hook generates a unique ID that can be used as a prefix for other IDs in the component.\n\n2. What is the purpose of the `MenuIcon` component?\n- The `MenuIcon` component displays an SVG icon based on the `type` prop passed to it, which corresponds to one of the `MenuIconName` enum values.\n\n3. How are the SVG icons styled?\n- The SVG icons are styled using Emotion's `styled` function, which applies CSS styles to the `svg` element inside the `StyledMenuicon` component.","metadata":{"source":".autodoc/docs/markdown/components/navigation/Menu/MenuIcon.md"}}],["115",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/Menu/MenuLink.tsx)\n\nThe code defines two React components, `InternalMenuLink` and `MenuLink`, which are used to render links in the application's navigation menu. \n\n`InternalMenuLink` is used for internal links within the application, and takes in `title` and `href` props to specify the link's text and destination. It also uses the `useIsRouteStringActive` hook from the `routing` module to determine if the link should be styled as active based on the current route. If the link is active, it is underlined and has a grey background. Otherwise, it has no underline and a white background. The link also includes a `File` icon from the `react-feather` library.\n\n`MenuLink` is a higher-level component that can render both internal and external links. It takes in the same `title` and `href` props as `InternalMenuLink`, as well as an optional `type` prop that specifies whether the link is internal or external. If the `type` prop is not provided, it defaults to `MenuLinkType.internal`. If the `type` prop is `MenuLinkType.internal`, `MenuLink` renders an `InternalMenuLink` component with the provided props. If the `type` prop is `MenuLinkType.external`, `MenuLink` renders a simple anchor tag with the provided `title` and `href` props, and adds the `rel=\"noopener noreferrer\"` and `target=\"_blank\"` attributes to open the link in a new tab and prevent security vulnerabilities.\n\nThese components are used throughout the application to render links in the navigation menu. For example, a developer might use `InternalMenuLink` to render a link to the user's profile page within the application, and use `MenuLink` to render a link to an external website. The components provide consistent styling and behavior for all links in the menu, and make it easy to switch between internal and external links as needed.\n## Questions: \n 1. What is the purpose of the `useIsRouteStringActive` function imported from `../../../lib/routing`?\n- The `useIsRouteStringActive` function is used to determine if the current route matches the provided `href` string.\n\n2. What is the purpose of the `MenuLinkType` enum?\n- The `MenuLinkType` enum is used to specify the type of link, either internal or external.\n\n3. What is the purpose of the `MenuLink` component?\n- The `MenuLink` component is a reusable component that can render either an internal or external link based on the `type` prop passed to it. It uses the `InternalMenuLink` component for internal links and a styled anchor tag for external links.","metadata":{"source":".autodoc/docs/markdown/components/navigation/Menu/MenuLink.md"}}],["116",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/Menu/MenuSection.tsx)\n\nThe code defines a React component called `MenuSection` that renders a section of a menu with a title, an optional icon, and a list of items. The component is styled using the `styled` function from the `@emotion/styled` library.\n\nThe `MenuSection` component takes several props:\n\n- `title`: a string that represents the title of the section.\n- `icon`: a React element that represents an icon to be displayed next to the title.\n- `items`: an array of React elements that represent the items in the section.\n- `headOptions`: an object that contains options for styling the section header, such as the background color, text color, and whether the text should be uppercase.\n- `variant`: an enum that represents the variant of the section, which can be either \"default\" or \"minimal\".\n- `button`: a React element that represents a button to be displayed in the section header.\n\nThe `MenuSection` component renders a `StyledSection` component that contains a `StyledSectionHead` component and a `StyledSectionContent` component. The `StyledSection` component is styled with a background color, font size, line height, font weight, border radius, and box shadow. The `variant` prop is used to conditionally apply a box shadow to the section if the variant is \"default\".\n\nThe `StyledSectionHead` component is styled with a flexbox layout, padding, and a box shadow. The `headOptions` prop is used to conditionally apply a background color, text color, and text transform to the section header.\n\nThe `StyledSectionTitle` component is styled with padding and flex grow to allow the title to take up the remaining space in the header.\n\nThe `StyledSectionIcon` component is styled with padding and margin to position the icon next to the title.\n\nThe `StyledSectionContent` component is styled with a font size and line height.\n\nThe `StyledSectionItem` component is an empty component that is used to wrap each item in the section.\n\nOverall, the `MenuSection` component provides a reusable and customizable way to render a section of a menu with a consistent style and layout. It can be used in the larger project to display various types of menu items, such as links, buttons, or other components.\n## Questions: \n 1. What is the purpose of the `MenuSection` component?\n- The `MenuSection` component is used to render a section of a menu with a title, icon, and list of items.\n\n2. What is the purpose of the `MenuSectionVariant` enum?\n- The `MenuSectionVariant` enum is used to define the different styles that the `MenuSection` component can have, such as `default` or `minimal`.\n\n3. What is the purpose of the `headOptions` prop in the `SectionProps` interface?\n- The `headOptions` prop is used to pass in options for styling the section header, such as background color, text color, and whether or not to uppercase the text.","metadata":{"source":".autodoc/docs/markdown/components/navigation/Menu/MenuSection.md"}}],["117",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/Menu/MenuSectionDivider.tsx)\n\nThe code above defines a styled component called `MenuSectionDivider` using the `styled` function from the `@emotion/styled` library. The component is a simple `div` element with a bottom border of 1 pixel in width and a color defined as `var(--grey-400)`. \n\nThis component is likely used as a visual separator between sections of a menu in the larger project. By defining it as a styled component, it can be easily reused throughout the project with consistent styling. \n\nHere is an example of how this component could be used in a menu:\n\n```\nimport React from 'react';\nimport { MenuSectionDivider } from './MenuSectionDivider';\n\nconst Menu = () => {\n  return (\n    <div>\n      <ul>\n        <li>Section 1</li>\n        <li>Section 2</li>\n      </ul>\n      <MenuSectionDivider />\n      <ul>\n        <li>Section 3</li>\n        <li>Section 4</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Menu;\n```\n\nIn this example, the `MenuSectionDivider` component is used to visually separate the second and third sections of the menu. \n\nOverall, this code serves a small but important role in the larger project by providing a reusable styled component for visually separating sections of a menu.\n## Questions: \n 1. What is the purpose of the `@emotion/styled` import?\n   - The `@emotion/styled` import is used to create styled components in React.\n\n2. What does the `MenuSectionDivider` component do?\n   - The `MenuSectionDivider` component creates a styled `div` element with a bottom border of 1 pixel and a color of `var(--grey-400)`.\n\n3. What is the significance of the `var(--grey-400)` value?\n   - The `var(--grey-400)` value is a CSS variable that represents a shade of grey with a specific level of opacity. It is likely used throughout the project to maintain consistent styling.","metadata":{"source":".autodoc/docs/markdown/components/navigation/Menu/MenuSectionDivider.md"}}],["118",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/Menu/index.tsx)\n\nThe code defines a menu component that can be used in the larger project to display a menu with different types of items such as links, buttons, folders, and dividers. The component takes in a `menuData` prop which is an object containing information about the menu such as its title, sections, and additional content. \n\nThe `MenuData` type defines the shape of the `menuData` object and includes properties such as `key`, `expandable`, `title`, `List`, `AdditionalContent`, and `sections`. The `sections` property is an array of `MenuSectionData` objects which contain information about the sections of the menu. Each `MenuSectionData` object has a `title`, an optional `icon`, an array of `items`, an optional `button`, and optional `headOptions` and `variant` properties. \n\nThe `items` array contains objects of type `MenuItem` which can be of type `link`, `button`, `folder`, or `divider`. Depending on the type of the item, the component renders a `MenuLink`, a `Button`, a `MenuSectionDivider`, or a `MenuFolder`. \n\nThe `Menu` component renders the menu based on the `menuData` prop. It maps over the `sections` array and renders a `MenuSection` component for each section. The `MenuSection` component renders the section title, icon, and items. The `Menu` component also renders the `List` and `AdditionalContent` components if they are provided in the `menuData` prop. \n\nOverall, this code provides a flexible and reusable menu component that can be used throughout the project with different types of items and sections.\n## Questions: \n 1. What is the purpose of the `Menu` component?\n- The `Menu` component is used to render a menu based on the `menuData` prop passed to it.\n\n2. What types of menu items are supported by this code?\n- This code supports four types of menu items: `link`, `folder`, `button`, and `divider`.\n\n3. What is the purpose of the `MenuData` and `MenuSectionData` types?\n- The `MenuData` type is used to define the overall structure of a menu, including its title, sections, and any additional content. The `MenuSectionData` type is used to define the structure of a single section within a menu, including its title, items, and any additional options.","metadata":{"source":".autodoc/docs/markdown/components/navigation/Menu/index.md"}}],["119",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/NavigationContext.tsx)\n\nThe code defines a React context called `NavigationContext` and a provider component called `NavigationContextProvider`. The context provides state and functions related to navigation and overlays for the application. The provider component wraps its children with the context and manages the state and functions.\n\nThe `NavigationContext` object contains the following properties:\n\n- `registerOverlay`: a function that registers an overlay and returns an object with an `id` property.\n- `removeOverlay`: a function that removes an overlay by its `id`.\n- `setOverlayOpen`: a function that sets the open state of an overlay by its `id`.\n- `overlayOpen`: a boolean that indicates whether any overlay is currently open.\n- `menuExpanded`: a boolean that indicates whether the navigation menu is expanded.\n- `setMenuExpanded`: a function that sets the expanded state of the navigation menu.\n- `activeOrganizerId`: a string that represents the currently active organizer.\n- `setActiveOrganizerId`: a function that sets the currently active organizer.\n- `headerOrganizerBandCollapsed`: a boolean that indicates whether the header organizer band is collapsed.\n- `setHeaderOrganizerBandCollapsed`: a function that sets the collapsed state of the header organizer band.\n\nThe `NavigationContextProvider` component initializes the state of the context properties using React hooks. It also defines a reducer function called `linksReducer` that manages the state of the overlays. The reducer function handles four types of actions: `register`, `open`, `close`, and `remove`. The `register` action adds a new overlay to the state with an initial open state of `false`. The `open` action sets the open state of an overlay to `true`. The `close` action sets the open state of an overlay to `false`. The `remove` action removes an overlay from the state.\n\nThe `NavigationContextProvider` component also defines two callback functions: `registerOverlay` and `setOverlayOpen`. The `registerOverlay` function registers a new overlay and returns an object with an `id` property. The `setOverlayOpen` function sets the open state of an overlay by its `id`.\n\nOverall, this code provides a centralized way to manage navigation and overlays for the application. Other components can use the `NavigationContext` object to access and modify the state and functions related to navigation and overlays. For example, a component that needs to open an overlay can call the `registerOverlay` function to get an `id` and then call the `setOverlayOpen` function with that `id` to open the overlay.\n## Questions: \n 1. What is the purpose of the `NavigationContext` and what values does it provide?\n- The `NavigationContext` is a React context that provides values related to navigation, such as overlay registration and management, menu expansion, active organizer ID, and header organizer band collapse.\n\n2. What is the purpose of the `linksReducer` function and what actions does it handle?\n- The `linksReducer` function is a reducer that handles actions related to overlay registration and management. It handles actions for registering an overlay, opening an overlay, closing an overlay, and removing an overlay.\n\n3. What is the purpose of the `NavigationContextProvider` component and what props does it take?\n- The `NavigationContextProvider` component is a provider component that wraps its children with the `NavigationContext` context. It takes a single prop `children`, which is a ReactNode representing the children components that will have access to the context values.","metadata":{"source":".autodoc/docs/markdown/components/navigation/NavigationContext.md"}}],["120",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/OrganizerBand/OrganizerBandItem.tsx)\n\nThe code defines a React component called `OrganizerBandItem` that renders a clickable item in an organizer band. The organizer band is a horizontal list of items that can be used to navigate between different sections of a website or application. The `OrganizerBandItem` component takes several props, including `children` (the text to display in the item), `active` (whether the item is currently selected), `layout` (the layout of the organizer band), `noBorder` (whether to display a border around the item), `icon` (the name of an icon to display in the item), `href` (the URL to navigate to when the item is clicked), `onClick` (a function to call when the item is clicked), `logo` (an image to display in the item), `asButton` (whether to render the item as a button), `adminModeActive` (whether the item is in admin mode), and `margin` (the margin to apply to the item).\n\nThe component is composed of several styled components defined using the `styled` function from the `@emotion/styled` package. The `StyledOrganizerBandItemLogo` component is a container for the icon or logo displayed in the item. It has a fixed height and width, and can have a border around it. The `StyledOrganizerBandItem` component is the main container for the item. It has a variable width depending on the layout of the organizer band, and can have a border around it. The `StyledOrganizerBandItemText` component is a container for the text displayed in the item. It has a fixed height and variable width depending on the layout of the organizer band. The `StyledSitemapIcon` component is a container for the sitemap icon displayed in the item.\n\nThe `OrganizerBandItem` component uses the `useRef` hook to create a reference to the `li` element that contains the item. It also uses the `useMemo` hook to memoize the logo renditions for performance optimization. The component conditionally renders an icon or logo based on the `icon` and `logo` props. If neither prop is provided, it renders the first letter of the `children` prop. If the `layout` prop is set to `OrganizerBandLayout.narrow`, it renders the `children` prop in a `MouseTooltip` component that displays a tooltip when the item is hovered over. If the `layout` prop is set to `OrganizerBandLayout.wide`, it aligns the text to the left and truncates it with an ellipsis if it is too long.\n\nOverall, the `OrganizerBandItem` component is a flexible and customizable component that can be used to create a variety of clickable items in an organizer band. It can display icons, logos, or text, and can be styled with borders, colors, and margins. It can also be used to navigate to different sections of a website or application, or to trigger custom functions when clicked.\n## Questions: \n 1. What is the purpose of the `OrganizerBandItem` component?\n- The `OrganizerBandItem` component is used to render an item in an organizer band, which is a horizontal list of items typically used for navigation or filtering.\n\n2. What is the significance of the `active` prop in the `StyledOrganizerBandItem` and `StyledOrganizerBandItemLogo` components?\n- The `active` prop is used to determine the styling of the item and its logo when it is currently selected or active.\n\n3. What is the purpose of the `MouseTooltip` component?\n- The `MouseTooltip` component is used to display a tooltip when the user hovers over the item, showing the full text of the item if it is truncated due to limited space.","metadata":{"source":".autodoc/docs/markdown/components/navigation/OrganizerBand/OrganizerBandItem.md"}}],["121",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/OrganizerBand/index.tsx)\n\nThe code defines the `OrganizerBand` component, which is a navigation bar that displays a list of organizers. The component is used in the larger project to allow users to switch between different organizers and to create new organizers. \n\nThe component imports several hooks and functions from other files in the project. These include `useLanguage` and `useLocale` from `routing.ts`, `getTranslation` from `translations.ts`, and `routes` from `routes.ts`. The component also imports several other components, including `OrganizerBandItem`, `StandardLink`, and `SkipLinkMainContent`.\n\nThe `OrganizerBand` component takes a `layout` prop, which determines the layout of the navigation bar. The component then uses several hooks to get information about the current user and the current router state. For example, it uses `useOrganizerId` to get the ID of the currently active organizer, and `useUserOrganizerLists` to get a list of organizers that the user owns or contributes to.\n\nThe component then renders a list of `OrganizerBandItem` components, one for each organizer in the user's list. Each `OrganizerBandItem` component displays the name and logo of the organizer, and allows the user to switch to that organizer by clicking on the item. The component also includes a \"Create Organizer\" button that allows the user to create a new organizer.\n\nIf the user is in \"admin mode\", the component displays an additional item that allows the user to leave admin mode. The component also includes a \"Skip to main content\" button that allows users to skip the navigation bar and go directly to the main content of the page.\n\nOverall, the `OrganizerBand` component is an important part of the larger project's navigation system. It allows users to switch between different organizers and to create new organizers, and it provides a consistent user interface for these actions.\n## Questions: \n 1. What is the purpose of the `OrganizerBand` component?\n- The `OrganizerBand` component is used to display a list of organizers and provide functionality for creating and managing organizers.\n\n2. What is the significance of the `adminModeActive` prop in the `StyledOrganizerBand` component?\n- The `adminModeActive` prop is used to conditionally apply styles to the `StyledOrganizerBand` component when the admin mode is active.\n\n3. What is the purpose of the `SkipLinkMainContent` component?\n- The `SkipLinkMainContent` component is used to provide a skip link for screen readers to skip to the main content of the page.","metadata":{"source":".autodoc/docs/markdown/components/navigation/OrganizerBand/index.md"}}],["122",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/TitleBar.tsx)\n\nThe code defines a React component called `TitleBar` that renders a title bar with an optional action button. The component takes in several props including `title`, `action`, `secondary`, `secondaryPresent`, and `reversed`. \n\nThe `StyledTitleBar` component is a styled div that sets the background color and box shadow of the title bar. The `StyledTitleBarContainer` component is a styled div that sets the layout of the title bar container. It is a flex container with space between the items and can be reversed if the `reversed` prop is set to true. \n\nThe `StyledTitle` component is a styled h1 tag that sets the font size, line height, font weight, and padding of the title. It also sets the order and text alignment of the title based on the `reversed` and `hasAction` props. If the `skeleton` prop is set to true, it renders a placeholder title with a grey background. \n\nThe `StyledAction` component is a styled div that sets the height and margin of the action button container. \n\nThe `TitleBar` component renders the `StyledTitleBar` and `StyledTitleBarContainer` components with the `title` and `action` props. If the `action` prop is defined, it renders the `StyledAction` component with the `action` prop. \n\nThe `secondary` and `secondaryPresent` props are used to determine the background color and box shadow of the title bar based on the breakpoint. The `reversed` prop is used to determine the layout of the title bar container. \n\nThis component can be used in the larger project as a reusable title bar component with an optional action button. It can be customized with different background colors, box shadows, and layouts based on the props passed in. \n\nExample usage:\n\n```\n<TitleBar title=\"My Title\" action={<Button>Click Me</Button>} secondary={true} reversed={true} />\n```\n## Questions: \n 1. What is the purpose of the `TitleBar` component?\n- The `TitleBar` component is used to display a title and an optional action element, with customizable styling options such as a secondary background color and reversed layout.\n\n2. What is the significance of the `mq` function and the `Breakpoint` enum?\n- The `mq` function is used to apply CSS styles based on the current screen size, using the `Breakpoint` enum to define specific breakpoints. This allows for responsive design and layout adjustments.\n\n3. What is the purpose of the `insetBorder` and `contentGrid` functions?\n- The `insetBorder` function generates a CSS box shadow with specific border properties, while the `contentGrid` function generates a CSS grid layout with a specified number of columns. These functions are used to create consistent styling across the `TitleBar` component.","metadata":{"source":".autodoc/docs/markdown/components/navigation/TitleBar.md"}}],["123",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/header/Header.tsx)\n\nThe code defines two React components, `HeaderMain` and `HeaderSecondary`, which are used to render the main and secondary headers of the website respectively. The components use various other components and hooks to render the header elements, such as the `HeaderMenuLink`, `LocaleSwitch`, `UserMenu`, and `OrganizerBand` components. \n\nThe `HeaderMain` component takes in several props, including the title of the page, an optional custom link, an array of menu items, and a `WrappedUser` object representing the current user. It renders the main header of the website, which includes the site title, a menu bar with links to various pages, and a user menu. The `HeaderSecondary` component is similar, but is used for pages with a different layout and may include an `OrganizerBand` component instead of a site title.\n\nThe `HeaderMain` component uses the `useBreakpointOrWider` hook to determine whether the screen width is at least `Breakpoint.mid`, and renders the header accordingly. If the screen is wide enough, the site title is displayed on the left side of the header, along with the menu bar and user menu on the right. If the screen is too narrow, only the menu bar is displayed. The `HeaderSecondary` component is always displayed in the same way, with the site title or `OrganizerBand` on the left and the user menu on the right.\n\nThe `HeaderMain` component also uses the `useActiveRoute` and `useT` hooks to determine the current active route and translate the display name of the route. It also uses the `useOrganizer` hook to retrieve information about the current organizer, and the `useLanguage` hook to determine the current language of the website. The `HeaderOrganizerMenu` component is used to display the organizer name and logo in the header, and can be collapsed or expanded by the user.\n\nOverall, these components are used to render the header of the website, including the site title, menu bar, user menu, and organizer logo. They are used in conjunction with other components and hooks to provide a responsive and customizable header for the website.\n## Questions: \n 1. What is the purpose of the `HeaderMain` component?\n- The `HeaderMain` component is responsible for rendering the main header of the website, including the title, menu items, and user menu.\n\n2. What is the `useCollapsable` hook used for?\n- The `useCollapsable` hook is used to create a collapsible section of the header that displays the organizer band.\n\n3. What is the purpose of the `HeaderSecondary` component?\n- The `HeaderSecondary` component is responsible for rendering a secondary header that appears on certain pages of the website, such as those with an organizer band.","metadata":{"source":".autodoc/docs/markdown/components/navigation/header/Header.md"}}],["124",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/header/HeaderBackLink.tsx)\n\nThe code defines a React functional component called `HeaderBackLink` that renders a styled link with a chevron left icon and a title. The component takes two props: `title` and `href`, which are used to set the title and URL of the link, respectively. \n\nThe link is created using the `Link` component from the `next/link` library, which allows for client-side navigation between pages in a Next.js application. The `passHref` prop is passed to `Link` to ensure that the `href` prop is passed to the underlying `a` element.\n\nThe link is styled using the `StyledA` component from the `@emotion/styled` library. The styles include removing the default text decoration, setting margins and padding, displaying the link as a flex container with centered items, setting the font size and weight, and adding a border radius. The link has a transparent background by default, but changes to a light grey when hovered over. The `span` element within the link is styled with a bottom border to create an underline effect for the title. The `svg` element for the chevron icon is also styled with a margin and fixed width and height.\n\nThe `HeaderBackLink` component can be used in the larger project to create a consistent back button/link for navigating between pages. By passing in the `title` and `href` props, the link can be customized for each page. The use of `Link` ensures that the link is optimized for client-side navigation in a Next.js application. The use of `@emotion/styled` allows for easy customization of the link's styles. \n\nExample usage:\n\n```\n<HeaderBackLink title=\"Home\" href=\"/\" />\n```\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component called `HeaderBackLink` that renders a link with a chevron icon and a title, and applies some styling to it.\n\n2. What dependencies are being imported?\n   This code imports `Link` and `styled` from the `next/link` and `@emotion/styled` packages respectively, as well as the `ChevronLeft` icon from the `react-feather` package.\n\n3. What props does the `HeaderBackLink` component accept?\n   The `HeaderBackLink` component accepts two props: `title`, which is a string representing the link title, and `href`, which is a string representing the link URL.","metadata":{"source":".autodoc/docs/markdown/components/navigation/header/HeaderBackLink.md"}}],["125",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/header/HeaderLink.tsx)\n\nThe code above defines a React functional component called `HeaderLink`. This component is responsible for rendering a link that is used in the header of the application. The link is created using the `Link` component from the `next/link` library.\n\nThe `HeaderLink` component takes in a single prop called `children`, which is expected to be a React element representing an anchor tag. This element is then passed to the `Link` component as its child.\n\nInside the `HeaderLink` component, two hooks are used to retrieve data needed to construct the link. The first hook is `useLocale` which retrieves the current locale of the application. The second hook is `useOrganizerId` which retrieves the ID of the current organizer.\n\nThe `Link` component is then used to create the link. The `href` prop of the `Link` component is set to a URL generated by calling the `routes.dashboard` function with an object containing the current locale and organizer ID as query parameters. The `passHref` prop is also set to `true` to ensure that the child element passed to the `Link` component receives the `href` attribute.\n\nOverall, the `HeaderLink` component is a reusable component that generates a link to the dashboard page of the application. It uses hooks to retrieve the necessary data and the `Link` component to generate the link. This component can be used in the header of the application to provide easy access to the dashboard page. \n\nExample usage:\n\n```\nimport { HeaderLink } from './HeaderLink';\n\nconst Header = () => {\n  return (\n    <header>\n      <nav>\n        <ul>\n          <li>\n            <HeaderLink>\n              <a>Dashboard</a>\n            </HeaderLink>\n          </li>\n          <li>\n            <a href=\"/about\">About</a>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n```\n## Questions: \n 1. What is the purpose of the `useLocale` and `useOrganizerId` functions imported from `../../../lib/routing` and `../../../lib/useOrganizer` respectively?\n   - `useLocale` is used to retrieve the current locale of the application, while `useOrganizerId` is used to retrieve the ID of the current organizer.\n2. What is the expected type of the `children` prop passed to the `HeaderLink` component?\n   - The expected type of the `children` prop is a React element with an HTML anchor element as its root.\n3. What is the purpose of the `routes.dashboard` function called in the `href` prop of the `Link` component?\n   - The `routes.dashboard` function generates a URL for the dashboard page of the application, with the current locale and organizer ID included as query parameters.","metadata":{"source":".autodoc/docs/markdown/components/navigation/header/HeaderLink.md"}}],["126",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/header/HeaderMenuLink.tsx)\n\nThe code defines a React component called `HeaderMenuLink` that renders a link in the header menu of a web application. The link can be either internal or external, and can have an icon displayed next to it. The component is used in the larger project to create a consistent and reusable header menu across the application.\n\nThe component imports several dependencies, including `React`, `Link` from Next.js, `styled` from Emotion, and icons from the `react-feather` library. It also imports a custom hook called `useIsRouteStringActive` from a file located in the `lib/routing` directory.\n\nThe `HeaderMenuLink` component takes several props, including `title`, `href`, `active`, `icon`, `onClick`, and `disabled`. The `type` prop is optional and defaults to `MenuLinkType.internal`. The `HeaderMenuLink` component renders an `InternalMenuLink` component if `type` is `MenuLinkType.internal`, or an external link if `type` is `MenuLinkType.external`.\n\nThe `InternalMenuLink` component renders a link that is either a `Link` component from Next.js or a regular `a` tag, depending on whether the link is disabled or not. The `InternalMenuLink` component also sets the `active` prop based on whether the current route matches the `href` prop. If the link is disabled, the `onClick` prop is not called and the link is not clickable.\n\nThe `StyledA` component defines the styles for the link, including the font size, font weight, padding, border, and background color. The `StyledHeaderMenuLinkIcon` component defines the styles for the icon displayed next to the link.\n\nOverall, the `HeaderMenuLink` component provides a reusable and customizable way to render links in the header menu of a web application. It handles both internal and external links, and allows for icons to be displayed next to the links. The component also handles disabling links and setting the active state based on the current route.\n## Questions: \n 1. What is the purpose of the `useIsRouteStringActive` hook imported from `../../../lib/routing`?\n- The `useIsRouteStringActive` hook is used to determine if the current route matches a given string.\n\n2. What is the purpose of the `HeaderMenuLink` component?\n- The `HeaderMenuLink` component is a reusable component that can be used to render links in a header menu. It can render both internal and external links, and can include an optional icon.\n\n3. What is the purpose of the `focusStyles` and `focusBlackStyles` constants imported from `../../globals/Constants`?\n- The `focusStyles` and `focusBlackStyles` constants define the styles to be applied when an element is in focus. They are used to ensure that the links in the header menu are accessible and easy to navigate.","metadata":{"source":".autodoc/docs/markdown/components/navigation/header/HeaderMenuLink.md"}}],["127",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/header/UserMenu.tsx)\n\nThe `UserMenu` component is a dropdown menu that displays user-related options such as user settings, admin mode, and logout. It is part of the larger `kulturdaten-frontend` project and is used in the header of the application.\n\nThe component imports various hooks and components from the project's codebase, including `useT` for translations, `useLocale` for getting the current locale, `useAdminMode` for checking if the user is in admin mode, and `useUser` for getting user information and handling logout. It also imports the `HeaderMenuLink` component for rendering links in the dropdown menu, and the `Button` and `DropdownMenu` components for styling.\n\nThe `UserMenu` component takes in a `WrappedUser` object as a prop, which contains information about the logged-in user. It then uses the imported hooks to get the necessary information and render the dropdown menu. The menu displays the user's email address, and if the user is a superuser, it also displays a link to the admin page. The user can also access their settings page and log out of the application.\n\nThe component uses the `useMemo` hook to determine if the current layout has an organizer band, which affects the styling of the dropdown menu button. It also uses the `useBreakpointOrWider` hook to determine if the screen size is mid-sized or wider, which affects the button color.\n\nOverall, the `UserMenu` component provides a convenient way for users to access their account information and perform user-related actions in the application.\n## Questions: \n 1. What is the purpose of the `UserMenu` component?\n- The `UserMenu` component is a dropdown menu that displays user information and options such as settings, admin access, and logout.\n\n2. What libraries and contexts are being imported and used in this file?\n- This file imports and uses libraries such as React, useMemo, and Button from the `button` component. It also imports and uses contexts such as UserContext and AdminContext.\n\n3. What is the significance of the `requestedDeletion` variable?\n- The `requestedDeletion` variable is a boolean value that is used to determine whether or not the user has requested to delete their account. If it is false, then the user is able to access settings and admin options.","metadata":{"source":".autodoc/docs/markdown/components/navigation/header/UserMenu.md"}}],["128",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/index.tsx)\n\nThe code is a collection of React hooks and components that provide navigation functionality for the Kulturdaten-frontend project. The main purpose of this code is to provide a navigation menu and header for the application. The code is divided into two main parts: the `NavigationProps` interface and the `useNavigation` hook.\n\nThe `NavigationProps` interface defines the structure of the navigation menu. It takes an array of `menus`, each of which contains a `key`, a `menu` component, a `title`, and an optional `expandable` flag. The `defaultMenuKey` property specifies the default menu to display. The `title` property specifies the title of the navigation menu. The `Link` property is a React component that is used to render links in the header. The `subMenuKey` property is an optional key that specifies the sub-menu to display.\n\nThe `useNavigation` hook takes a `NavigationStructure` object, a `title` string, a `Link` component, and a `Layouts` object. It returns an object with two properties: `header` and `sidebar`. The `header` property contains two React elements: `main` and `secondary`. The `sidebar` property contains a React element that represents the current menu.\n\nThe `useNavigation` hook uses several other hooks to provide navigation functionality. The `useBreakpointOrWider` hook is used to determine the current breakpoint of the application. The `useCategory` hook is used to get the current category of the application. The `useUser` hook is used to get the current user of the application. The `useLocale` hook is used to get the current locale of the application. The `useRouter` hook is used to get the current router of the application. The `useLanguage` hook is used to get the current language of the application. The `useActiveRoute` hook is used to get the current active route of the application. The `useOrganizerId` hook is used to get the current organizer ID of the application. The `useOrganizer` hook is used to get the current organizer of the application.\n\nThe `useNavigationOverlayVisible` hook is used to determine whether the navigation overlay is visible or not. It uses the `NavigationContext` to get the current state of the navigation menu and the `useBreakpointOrWider` hook to determine the current breakpoint of the application.\n\nOverall, this code provides a flexible and extensible navigation system for the Kulturdaten-frontend project. It allows for the creation of custom menus and headers and provides hooks for accessing and manipulating the current state of the application.\n## Questions: \n 1. What is the purpose of the `useNavigation` hook?\n- The `useNavigation` hook is used to generate the header and sidebar navigation components based on the provided structure, title, link, and layout.\n\n2. What is the `NavigationProps` interface used for?\n- The `NavigationProps` interface is used to define the props that are passed to the `useNavigation` hook, including the menus, default menu key, title, link, and sub-menu key.\n\n3. What is the `useNavigationOverlayVisible` hook used for?\n- The `useNavigationOverlayVisible` hook is used to determine whether the navigation overlay should be visible based on the current state of the menu expansion and the screen size.","metadata":{"source":".autodoc/docs/markdown/components/navigation/index.md"}}],["129",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/stories.tsx)\n\nThe code defines a navigation menu for the Kulturdaten.Berlin project. It exports a `NavigationStory` component that renders the complete navigation menu and a `HeaderStory` component that renders the header of the navigation menu. It also defines a `TestLink` component that wraps a link element and a `StyledTestContent` component that styles the content of the navigation menu.\n\nThe navigation menu is defined by the `testMenuStructure` object, which contains an array of menus. Each menu has a `key`, a `title`, and an array of `sections`. Each section has a `title`, an optional `icon`, an optional `headOptions` object that styles the section header, an optional `button` element, and an array of `items`. Each item has a `type` (either `link` or `folder`) and an `action` object that contains the `title`, `href`, and `active` properties for links and the `label` and `menuKey` properties for folders.\n\nThe `useNavigation` hook is used to generate the header and sidebar components of the navigation menu. It takes the `testMenuStructure` object, the title of the project, the `TestLink` component, and the `Layouts.loggedIn` layout as arguments. It returns an object with `header` and `sidebar` properties that contain the components for the header and sidebar of the navigation menu.\n\nThe `X` component renders the complete navigation menu using the `AppLayout` component from the `../layouts/AppLayout` module. It passes the `header` and `sidebar` components generated by the `useNavigation` hook to the `AppLayout` component, along with a `StyledTestContent` component that renders a grid of test content boxes.\n\nThe `HeaderStory` component renders the header of the navigation menu using the `HeaderMain` component from the `./header/Header` module. It passes the `testMenuStructure.header.loggedIn.menuItems` array, the `Layouts.loggedIn` layout, the title of the project, the `TestLink` component, and a dummy `user` object to the `HeaderMain` component.\n\nOverall, this code defines a navigation menu for the Kulturdaten.Berlin project and provides components for rendering the complete navigation menu and the header of the navigation menu. It uses the `useNavigation` hook to generate the components for the navigation menu based on the `testMenuStructure` object.\n## Questions: \n 1. What is the purpose of the `NavigationStructure` object?\n- The `NavigationStructure` object defines the structure and content of the navigation menu, including the header and menus.\n\n2. What is the purpose of the `X` component?\n- The `X` component renders the complete navigation menu and content layout using the `AppLayout` component and the `useNavigation` hook.\n\n3. What is the purpose of the `TestLink` component?\n- The `TestLink` component is a custom link component that wraps around the children components and adds a `href` attribute to them.","metadata":{"source":".autodoc/docs/markdown/components/navigation/stories.md"}}],["130",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/tabs/index.tsx)\n\nThe code defines a React component called `Tabs` that renders a horizontal navigation bar with clickable tabs. The component takes an array of `links` as a prop, where each link is an object with a `title` and an `href`. The `isActive` and `disabled` properties can also be set to indicate whether a tab is currently active or disabled, respectively.\n\nThe component is styled using the `styled` function from the `@emotion/styled` library, which allows for writing CSS-in-JS. The `StyledTabs` component defines the outer container for the navigation bar, while the `StyledTabsContainer` component defines the container for the individual tabs. The `StyledTab` component defines the individual tab, and the `StyledTabLink` component defines the link within each tab.\n\nThe `StyledTabsContainer` component uses CSS grid to lay out the tabs in a row on smaller screens, and in a grid on larger screens. The number of columns in the grid is determined by the `itemCount` prop, which is set to the length of the `links` array.\n\nThe `StyledTabLink` component uses CSS to style the link within each tab. The `isActive` prop is used to style the active tab, while the `disabled` prop is used to disable a tab. The `z-index` property is used to ensure that the active tab appears on top of the other tabs.\n\nThe `Tabs` component maps over the `links` array to render each tab. If a tab is disabled, it is rendered as a `div` instead of a link. Otherwise, the `Link` component from the `next/link` library is used to create a client-side navigation link.\n\nOverall, the `Tabs` component provides a reusable navigation bar that can be easily customized and integrated into other components in the larger project.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a Tabs component that renders a navigation bar with clickable tabs, where each tab is a link to a different page.\n\n2. What is the role of the `isActive` and `disabled` props in the `StyledTabLink` component?\n- The `isActive` prop determines whether the current tab is active, and if so, applies a different style to it. The `disabled` prop determines whether the tab is disabled and cannot be clicked.\n\n3. What is the purpose of the `mq` function and the `Breakpoint` enum?\n- The `mq` function is a utility function that generates media queries based on the current breakpoint. The `Breakpoint` enum defines the different breakpoints used in the app, such as `mid` and `widish`, which are used to adjust the layout of the tabs depending on the screen size.","metadata":{"source":".autodoc/docs/markdown/components/navigation/tabs/index.md"}}],["131",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/navigation/tabs/story.tsx)\n\nThe code above is a set of Storybook stories for the `Tabs` component of the `kulturdaten-frontend` project. Storybook is a tool used for developing and testing UI components in isolation. The `Tabs` component is a UI element that displays a set of clickable links that toggle the display of different content sections. \n\nThe code exports four different stories for the `Tabs` component, each with a different set of links. The `testTabLinks` array contains an array of objects, each representing a link in the `Tabs` component. Each link object has a `title` property, which is the text displayed in the link, an `href` property, which is the URL the link points to, and an optional `isActive` property, which determines whether the link is currently active. \n\nThe `TabsDefaultStory` story renders the `Tabs` component with all four links from `testTabLinks`. The `TabsThreeItemsStory` and `TabsTwoItemsStory` stories render the `Tabs` component with only the first three and first two links from `testTabLinks`, respectively. The `TabsManyItemsStory` story renders the `Tabs` component with a larger set of links, created by concatenating `testTabLinks` with slices of itself. \n\nEach story is defined as a function that returns a JSX element representing the `Tabs` component with a specific set of links. The `storyName` property is used to set the name of each story as it appears in the Storybook UI. \n\nThese stories can be used to visually test and develop the `Tabs` component in isolation from the rest of the project. By rendering the component with different sets of links, developers can ensure that the component is flexible and can handle different use cases. Additionally, the stories can serve as documentation for other developers who may need to use the `Tabs` component in their own code.\n## Questions: \n 1. What is the purpose of the `Tabs` component?\n   - The `Tabs` component is used to render a set of tab links with optional active states.\n\n2. What data is being passed to the `Tabs` component?\n   - The `Tabs` component is being passed an array of tab link objects, each with a title, href, and optional isActive boolean.\n\n3. What is the purpose of the `TabsDefaultStory`, `TabsThreeItemsStory`, `TabsTwoItemsStory`, and `TabsManyItemsStory` functions?\n   - These functions are used to define different stories for the `Tabs` component with varying numbers of tab links, which can be used for testing and demonstration purposes.","metadata":{"source":".autodoc/docs/markdown/components/navigation/tabs/story.md"}}],["132",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/overlay/OverlayContainer.tsx)\n\nThe code above is a styled component that creates an overlay container with a flexible column layout. This component is used in the Kulturdaten Frontend project to create a container that can be used to display overlays on top of other content.\n\nThe `styled` function is imported from the `@emotion/styled` package, which is a CSS-in-JS library that allows developers to write CSS styles using JavaScript syntax. The `OverlayContainer` component is then defined using the `styled.div` function, which creates a styled `div` element.\n\nThe `OverlayContainer` component has several CSS properties applied to it. The `display` property is set to `flex`, which allows the container to be flexible and adjust to the size of its contents. The `flex-direction` property is set to `column`, which arranges the contents of the container in a vertical column. The `height` property is set to `100%`, which sets the height of the container to be the same as its parent element. The `min-height` property is also set to `100%`, which ensures that the container will always be at least as tall as its parent element.\n\nThis component can be used in the Kulturdaten Frontend project to create overlays that are displayed on top of other content. For example, if the project has a map component that displays information about cultural events, the `OverlayContainer` component could be used to create a modal overlay that displays additional information about a specific event when the user clicks on a marker on the map.\n\nHere is an example of how the `OverlayContainer` component could be used in the Kulturdaten Frontend project:\n\n```\nimport React from 'react';\nimport { OverlayContainer } from './OverlayContainer';\n\nconst EventOverlay = ({ event }) => {\n  return (\n    <OverlayContainer>\n      <h2>{event.title}</h2>\n      <p>{event.description}</p>\n    </OverlayContainer>\n  );\n};\n\nexport default EventOverlay;\n```\n\nIn this example, the `EventOverlay` component is defined and takes an `event` prop as input. The `OverlayContainer` component is used to create a container for the event information, which is displayed using `h2` and `p` elements. This overlay could be displayed on top of a map component when the user clicks on a marker for a specific event.\n## Questions: \n 1. What is the purpose of the `@emotion/styled` import?\n   - The `@emotion/styled` import is used to create styled components in React.\n\n2. What is the purpose of the `OverlayContainer` component?\n   - The `OverlayContainer` component is used to create a container with a flexbox layout that takes up the full height of its parent element.\n\n3. Why is `min-height` set to `100%` in the `OverlayContainer` component?\n   - Setting `min-height` to `100%` ensures that the container will always take up at least the full height of its parent element, even if there is not enough content to fill the container.","metadata":{"source":".autodoc/docs/markdown/components/overlay/OverlayContainer.md"}}],["133",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/overlay/OverlayTitleBar.tsx)\n\nThe code defines a React component called `OverlayTitleBar` that renders a title bar for an overlay. The component takes in three props: `title`, `sticky`, and `actions`. \n\nThe `title` prop is a string that represents the title of the overlay. The `sticky` prop is a boolean that determines whether the title bar should be sticky or not. If `sticky` is true, the title bar will be fixed to the top of the screen when the user scrolls. The `actions` prop is an array of React elements that represent actions that can be performed on the overlay.\n\nThe component is styled using the `styled` function from the `@emotion/styled` library. The `StyledOverlayTitleBar` component is a styled `div` that has a white background, a box shadow, and rounded corners. It also has a flexbox layout with a row direction and space between the items. If the `sticky` prop is true, the `position` property is set to `sticky` and the `top` and `left` properties are set to `0`.\n\nThe `StyledOverlayTitleBarTitle` component is a styled `div` that represents the title of the overlay. It has a font size of `var(--font-size-400)`, a line height of `var(--line-height-400)`, and a font weight of `700`.\n\nThe `StyledOverlayTitleBarActions` component is a styled `div` that represents the actions that can be performed on the overlay. It has a flexbox layout with a row direction and space between the items.\n\nThe `StyledOverlayTitleBarAction` component is a styled `div` that represents an individual action that can be performed on the overlay. It has a margin left of `0.75rem` and a padding of `0.375rem 0`.\n\nThe `OverlayTitleBar` component renders the `StyledOverlayTitleBar` component with the `sticky` prop passed in. It also renders the `StyledOverlayTitleBarTitle` component with the `title` prop passed in. If the `actions` prop is not null, it renders the `StyledOverlayTitleBarActions` component with each action in the `actions` array rendered as a `StyledOverlayTitleBarAction` component.\n\nThis component can be used in the larger project to provide a consistent and customizable title bar for overlays. The `title` prop can be used to set the title of the overlay, while the `actions` prop can be used to add custom actions to the title bar. The `sticky` prop can be used to make the title bar sticky if needed.\n## Questions: \n 1. What is the purpose of the `OverlayTitleBar` component?\n- The `OverlayTitleBar` component is a React functional component that renders a title bar with optional actions and a sticky position.\n\n2. What is the purpose of the `mq` function imported from `../globals/Constants`?\n- The `mq` function is used to define media queries based on the current breakpoint defined in the `WindowService` module.\n\n3. What is the purpose of the `StyledOverlayTitleBarAction` component?\n- The `StyledOverlayTitleBarAction` component is a styled component that defines the style for an action element within the `OverlayTitleBar` component.","metadata":{"source":".autodoc/docs/markdown/components/overlay/OverlayTitleBar.md"}}],["134",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/overlay/index.tsx)\n\nThe code defines an overlay component that can be used to display content on top of the main content of a web page. The overlay is triggered by a button or other user interaction and can be closed by the user. The overlay is implemented using styled components and is composed of several sub-components, including a background, a close button, and the content to be displayed.\n\nThe `Overlay` component takes two optional props: `isOpen` and `setIsOpen`. If `isOpen` is true, the overlay is displayed, and if `setIsOpen` is provided, it is called when the user closes the overlay. The component uses the `useT` hook from the `i18n` library to provide translations for the close button and other text.\n\nThe `useOverlay` hook is a convenience function that wraps the `Overlay` component and provides a way to manage the `isOpen` state. It takes two arguments: the content to be displayed in the overlay, and an optional initial value for `isOpen`. It returns an object with three properties: `renderedOverlay`, which is the `Overlay` component with the provided content and state management; `isOpen`, which is the current state of the overlay; and `setIsOpen`, which is a function that can be called to update the state of the overlay.\n\nThe code also defines several styled components that are used to implement the overlay. These include `StyledOverlay`, which is the outer container for the overlay; `StyledOverlayContentWrapper`, which contains the close button and the content to be displayed; `StyledOverlayContent`, which is the container for the content; `StyledOverlayBackground`, which is a semi-transparent background that covers the main content when the overlay is displayed; and `StyledOverlayCloseButton`, which is the button that the user clicks to close the overlay.\n\nOverall, this code provides a reusable overlay component that can be used to display content on top of the main content of a web page. The `useOverlay` hook makes it easy to manage the state of the overlay, and the styled components provide a flexible way to customize the appearance of the overlay.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a reusable overlay component and a hook for managing its state.\n\n2. What are the styled components used in this code and what are their styles?\n- The styled components used in this code are `StyledOverlay`, `StyledOverlayContentWrapper`, `StyledOverlayContent`, `StyledOverlayBackground`, and `StyledOverlayCloseButton`. Their styles define the positioning, sizing, and styling of the overlay and its contents.\n\n3. What is the purpose of the `useOverlay` hook and what does it return?\n- The `useOverlay` hook is used to manage the state of the overlay component. It takes in `children` and `initialIsOpen` props and returns an object with `renderedOverlay`, `isOpen`, and `setIsOpen` properties. `renderedOverlay` is the rendered overlay component, `isOpen` is a boolean indicating whether the overlay is currently open, and `setIsOpen` is a function for updating the `isOpen` state.","metadata":{"source":".autodoc/docs/markdown/components/overlay/index.md"}}],["135",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/overlay/story.tsx)\n\nThis code defines a set of components and functions related to overlays in the kulturdaten-frontend project. Overlays are UI elements that appear on top of the main content and provide additional information or functionality. \n\nThe code imports several dependencies, including styled components, Storybook, and React. It defines a few styled components that are used to create the appearance of the overlay content. The `OverlayExample` component is the main component that renders the overlay. It takes two boolean props, `renderTitlebar` and `stickyTitlebar`, which determine whether to show a title bar at the top of the overlay and whether it should be sticky (i.e., remain visible when the user scrolls). \n\nThe `OverlayExample` component uses the `useOverlay` hook to manage the state of the overlay. This hook takes two arguments: the content to be displayed in the overlay and a boolean indicating whether the overlay is initially open. The content is defined as a JSX element that includes the title bar (if `renderTitlebar` is true) and the main content of the overlay. The main content is a grid of boxes, each containing the text \"Test Content\". \n\nThe `OverlayExample` component also renders a button that opens the overlay when clicked. When the overlay is open, it is displayed on top of the main content, and the `renderedOverlay` variable is set to the content of the overlay. The `overlayOpen` variable is obtained from the `NavigationContext` and is used to display whether the overlay is currently open or closed. \n\nFinally, the code defines three Storybook stories that demonstrate the different configurations of the `OverlayExample` component. These stories show the overlay with a sticky title bar, a non-sticky title bar, and no title bar at all. \n\nOverall, this code provides a flexible and reusable way to create overlays in the kulturdaten-frontend project. By defining the appearance and behavior of the overlay in a single component, it makes it easy to add overlays to different parts of the application and customize them as needed.\n## Questions: \n 1. What is the purpose of the `useOverlay` hook being imported from `'.'`?\n   - The `useOverlay` hook is used to manage the state of the overlay component and its visibility.\n2. What is the purpose of the `OverlayTitleBar` component being imported from `'./OverlayTitleBar'`?\n   - The `OverlayTitleBar` component is used to render a title bar with optional actions for the overlay component.\n3. What is the purpose of the `NavigationContext` being imported from `'../navigation/NavigationContext'`?\n   - The `NavigationContext` is used to access the state of the navigation component and determine if the overlay is currently open or closed.","metadata":{"source":".autodoc/docs/markdown/components/overlay/story.md"}}],["136",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/404/index.tsx)\n\nThe code above defines a React functional component called `Page404`. This component is used to render a 404 error page for the Kulturdaten Frontend project. \n\nThe `Page404` component is imported from the `CategoryEntryPage` module located in the `lib/categories` directory. This suggests that the 404 page is related to the categorization of entries in the Kulturdaten Frontend project. \n\nThe `Page404` component returns a simple JSX element that displays the text \"404\". This is the content that will be displayed on the 404 error page. \n\nThis component can be used in the larger project by importing it into other components or pages that need to display a 404 error page. For example, if a user navigates to a non-existent page or resource, the router in the Kulturdaten Frontend project can redirect them to the `Page404` component to display the appropriate error message. \n\nHere is an example of how the `Page404` component could be used in a router configuration:\n\n```\nimport { Route, Switch } from 'react-router-dom';\nimport { Page404 } from './components/Page404';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/about\" component={AboutPage} />\n      <Route path=\"/contact\" component={ContactPage} />\n      <Route component={Page404} />\n    </Switch>\n  );\n}\n```\n\nIn this example, the `Page404` component is used as a fallback route. If none of the other routes match the user's request, they will be redirected to the `Page404` component to display the 404 error message.\n## Questions: \n 1. What is the purpose of the CategoryEntryPage import?\n   - The CategoryEntryPage import is used to define the props that the Page404 component expects to receive.\n\n2. Why is the Page404 component a functional component?\n   - The Page404 component is a functional component because it does not need to maintain any state or use lifecycle methods.\n\n3. What does the <div>404</div> JSX code represent?\n   - The <div>404</div> JSX code represents the content that will be displayed on the page when the user encounters a 404 error.","metadata":{"source":".autodoc/docs/markdown/components/pages/404/index.md"}}],["137",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/admin/organizers.tsx)\n\nThe `AdminOrganizersPage` component is a React functional component that renders a page for managing organizers in the kulturdaten-frontend project. The component imports various hooks and components from different files in the project to achieve its functionality.\n\nThe component first imports the `Head` component from the `next/head` module, which is used to set the page title. It also imports various hooks such as `useRouter`, `useEffect`, `useCategories`, `useT`, `useLocale`, `useOrganizerId`, `useBreakpointOrWider`, `useAdminMode`, `useDownload`, and `useUser` from different files in the project.\n\nThe `useUser` hook is used to get the current user and their permissions, while the `useRouter` hook is used to get the current route. The `useLocale` hook is used to get the current locale, and the `useOrganizerId` hook is used to get the current organizer ID. The `useBreakpointOrWider` hook is used to determine if the screen width is at least medium-sized, and the `useAdminMode` hook is used to start the admin mode. The `useDownload` hook is used to download data, and the `useCategories` hook is used to get the categories for the project.\n\nThe `useEffect` hook is used to redirect non-superuser users to the dashboard. If the user is not a superuser, they are redirected to the dashboard route.\n\nThe component then renders the `EntryHeader` component, which displays the page title and a dropdown menu with export options. The `EntryFormWrapper` component is used to wrap the `OrganizerList` component, which displays a list of organizers. The `OrganizerList` component is passed various props such as `expandable`, `expanded`, `customEntryOnClick`, and `Context`.\n\nOverall, the `AdminOrganizersPage` component is a high-level component that renders a page for managing organizers in the kulturdaten-frontend project. It imports various hooks and components from different files in the project to achieve its functionality.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file defines a React functional component for the admin organizers page of the Kulturdaten-frontend project.\n\n2. What external libraries or dependencies does this code file use?\n- This code file imports several modules from Next.js, React, and other custom modules within the project.\n\n3. What is the role of the `useEffect` hook in this code file?\n- The `useEffect` hook is used to redirect non-superuser users to the dashboard page of the project. It runs on component mount and whenever the `isSuperuser`, `locale`, `organizerId`, `router`, or `user?.id` values change.","metadata":{"source":".autodoc/docs/markdown/components/pages/admin/organizers.md"}}],["138",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/auth/Login.tsx)\n\nThe code above defines a React functional component called `LoginPage`. This component is responsible for rendering the login page of the application. It imports several components from other files, including `AuthContent`, `AuthHeadline`, and `AuthWrapper` from the `auth` directory, `LoginForm` from the `auth/Login` directory, and `Info` from the `info` directory.\n\nThe `LoginPage` component takes an optional `info` prop, which is an object that contains information to be displayed on the page. If the `info` prop is provided, the `Info` component is rendered with the `info` prop passed as a prop to it. The `Info` component is responsible for displaying a message to the user, such as a success message after a successful login.\n\nThe `LoginPage` component also renders the `AuthWrapper` component, which is responsible for rendering the background image of the login page. The `AuthContent` component is then rendered inside the `AuthWrapper` component. The `AuthContent` component contains the main content of the login page, including the `AuthHeadline` component and the `LoginForm` component.\n\nThe `AuthHeadline` component renders a legend with the text \"login.headline\" passed to it as a prop. The `LoginForm` component is responsible for rendering the login form, which includes fields for the user to enter their email and password.\n\nOverall, the `LoginPage` component is an important part of the application's authentication flow. It renders the login page and handles the display of success messages after a successful login. It also imports and uses several other components from other files, making it a modular and reusable component in the larger project.\n## Questions: \n 1. What is the purpose of the `LoginPage` component?\n   - The `LoginPage` component is responsible for rendering the login form and any associated information or messages.\n\n2. What is the `useT` hook used for?\n   - The `useT` hook is used to access the translation function provided by the `i18n` library, allowing for localized text to be displayed in the component.\n\n3. What is the `image` prop used for in the `AuthWrapper` component?\n   - The `image` prop is used to specify the image source for the background image of the authentication wrapper component. In this case, it is set to `loginImage`, which is imported from a file located in the `public/img` directory.","metadata":{"source":".autodoc/docs/markdown/components/pages/auth/Login.md"}}],["139",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/auth/Register.tsx)\n\nThe code above defines a React functional component called `RegisterPage`. This component is used to render a registration page for users to sign up for the application. \n\nThe component imports two modules: `AuthWrapper` and `RegisterForm`. `AuthWrapper` is a higher-order component that provides authentication functionality to its child components. It takes an image object as a prop, which is used to display an image on the registration page. The `RegisterForm` component is a form that allows users to input their registration information, such as their email and password.\n\nThe `RegisterPage` component returns the `AuthWrapper` component with the `RegisterForm` component as its child. The `AuthWrapper` component is passed an image object as a prop, which is used to display an image on the registration page. The `RegisterForm` component is rendered inside the `AuthWrapper` component and allows users to input their registration information.\n\nThis code is part of the larger `kulturdaten-frontend` project, which is a web application for cultural events and institutions in Berlin. The `RegisterPage` component is used to provide a registration page for users to sign up for the application. This component can be used in conjunction with other components to create a complete user authentication system for the application.\n\nExample usage:\n\n```jsx\nimport { RegisterPage } from './components/auth/RegisterPage';\n\nfunction App() {\n  return (\n    <div>\n      <RegisterPage />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `AuthWrapper` component?\n   - The `AuthWrapper` component is used to wrap the `RegisterForm` component and provide authentication functionality.\n\n2. What is the source of the `registerImage` variable?\n   - The `registerImage` variable is sourced from the `public/img/chris-curry-WU1DEBbWz5I-unsplash.jpg` file.\n\n3. What is the purpose of the `RegisterPage` component?\n   - The `RegisterPage` component is a React functional component that renders the `AuthWrapper` component with the `RegisterForm` component as its child. It is used to display the registration page for the application.","metadata":{"source":".autodoc/docs/markdown/components/pages/auth/Register.md"}}],["140",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/auth/ResetPassword.tsx)\n\nThe code above defines two React functional components, `ResetPasswordPage` and `RequestPasswordResetPage`, that are used to render the reset password and request password reset pages respectively in the Kulturdaten-frontend project. \n\nBoth components use the `AuthWrapper` component from the `../../auth/AuthWrapper` module to provide a consistent layout and styling for the pages. The `AuthWrapper` component takes an image prop that is used as the background image for the page. In this case, the `resetPasswordImage` imported from `../../../public/img/heye-jensen-uVIpeJE9X9c-unsplash.jpg` is used as the background image for both pages.\n\nThe `ResetPasswordPage` component renders the `ResetPasswordForm` component from the `../../auth/ResetPassword` module. This form is used to allow users to reset their password by entering their email address and a new password.\n\nThe `RequestPasswordResetPage` component renders the `RequestPasswordResetForm` component from the `../../auth/RequestPasswordReset` module. This form is used to allow users to request a password reset by entering their email address.\n\nOverall, these components provide a user-friendly interface for resetting and requesting password resets in the Kulturdaten-frontend project. They are used in conjunction with other authentication-related components and modules to provide a secure and seamless user experience. \n\nExample usage:\n\n```jsx\nimport { ResetPasswordPage, RequestPasswordResetPage } from './authPages';\n\nfunction App() {\n  return (\n    <div>\n      <ResetPasswordPage />\n      <RequestPasswordResetPage />\n    </div>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of the `AuthWrapper` component?\n- The `AuthWrapper` component is used to wrap the `ResetPasswordForm` and `RequestPasswordResetForm` components and provide a consistent layout and styling for authentication-related pages.\n\n2. Where is the `resetPasswordImage` imported from?\n- The `resetPasswordImage` is imported from the `public/img` directory and is likely an image used as a background for the authentication pages.\n\n3. What is the difference between the `ResetPasswordPage` and `RequestPasswordResetPage` components?\n- The `ResetPasswordPage` component renders the `ResetPasswordForm` component, which allows a user to reset their password. The `RequestPasswordResetPage` component renders the `RequestPasswordResetForm` component, which allows a user to request a password reset email.","metadata":{"source":".autodoc/docs/markdown/components/pages/auth/ResetPassword.md"}}],["141",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/Address.tsx)\n\nThe code defines a custom hook called `useAddressForm` that returns an object with properties and methods used to render and manage a form for entering an address. The hook takes in an object of type `AddressFormHookProps` that contains various configuration options for the form, such as the category, query, and title.\n\nThe hook uses several other custom hooks from the `lib` directory, such as `useEntry`, `useDistrictList`, and `useMutateList`, to fetch and manage data related to the address. It also uses the `useT` hook to access translations.\n\nThe rendered form consists of several `Input` and `Select` components that allow the user to enter the street address, zip code, city, and district (if applicable). The form also includes validation logic to ensure that required fields are filled out and that the address is valid.\n\nThe hook returns an object with several properties and methods, including `renderedForm`, `submit`, `pristine`, `reset`, `valid`, and `requirementFulfillment`. These properties and methods can be used to render the form, submit the form data, check if the form is pristine (i.e. has not been modified), reset the form to its initial state, check if the form is valid, and check if the form fulfills a certain requirement.\n\nOverall, this code is an important part of the larger `kulturdaten-frontend` project as it provides a reusable and customizable form for entering addresses, which is likely used in various parts of the application.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a custom hook called `useAddressForm` that returns a rendered form and functions for submitting and resetting the form, as well as checking its validity and requirement fulfillment. The form is used for inputting address information for a specific category of entries.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several modules from the project's own `lib` directory, including `api`, `categories`, `i18n`, and `uid`. It also imports several components from the project's own `components` directory, including `EntryFormHead`, `Input`, `Select`, and various form-related components.\n\n3. What are some of the key features or functionality of this code?\n- Some of the key features of this code include: \n  - Dynamically generating a form based on the provided `category`, `query`, `loaded`, `tooltip`, `customRequired`, `title`, `district`, and `id` props.\n  - Initializing the form with an `initialAddress` value based on the `entry` data fetched from the API.\n  - Updating the form's `address` state based on user input and validating its required fields.\n  - Checking whether the form's `address` is fulfilled based on its required fields and whether it is in Berlin (if `district` is enabled).\n  - Submitting the form's `address` data to the API and updating the `entry` and `mutateList` data if successful.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/Address.md"}}],["142",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/Arrival.tsx)\n\nThe code defines a custom hook called `useArrivalForm` that returns an object with properties used to render and submit a form for updating a location's arrival information. The hook takes an object with `category` and `query` properties as input.\n\nThe hook uses several other hooks and functions from the project's `lib` and `GenericForm` directories to create the form. It first calls `useEntry` to retrieve the current location entry and `useGenericFormStructure` to generate the form structure based on the `locationArrival` configuration object. It also uses `useApiCall` to make API requests.\n\nThe hook then sets up several state variables and effects to manage the form's behavior. It uses `useRef` to create a reference to the form element, `useState` to track the form's validity, and `useMemo` to store the initial service fields and the current service fields as arrays of `ServiceField` objects. It also defines a `pristine` variable that compares the initial and current service fields to determine if the form has been changed.\n\nThe hook returns an object with several properties. `renderedForm` is a JSX element that renders the form with the `renderedForm` property generated by `useGenericFormStructure`. `submit` is an async function that submits the form data to the API if the form is valid. `pristine` is a boolean that indicates if the form has been changed. `valid` is a boolean that indicates if the form is currently valid. `reset` is a function that does nothing, and `state` is the current state of the form.\n\nOverall, this code provides a reusable hook for generating and submitting a form for updating a location's arrival information. It uses several other hooks and functions from the project to manage the form's behavior and state.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a custom hook called `useArrivalForm` that returns a rendered form, submit function, and other form-related properties for a specific category of data.\n\n2. What external dependencies does this code rely on?\n- This code imports several functions and types from external modules, including `useEffect`, `useMemo`, `useRef`, `useState`, `useApiCall`, `useEntry`, and `GenericFormState`.\n\n3. What is the role of the `initialServiceFields` and `serviceFieldsState` variables?\n- `initialServiceFields` is a memoized value that represents the current service fields associated with a location entry, while `serviceFieldsState` is a memoized value that represents the current state of the form's service fields. These variables are used to initialize and update the form's state based on the current data in the system.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/Arrival.md"}}],["143",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/Description.tsx)\n\nThe code defines two React hooks, `useDescription` and `useTeaserForm`, which are used to create forms for inputting descriptions and teasers for cultural events. \n\n`useDescription` takes in several props, including the category and language of the event, a title for the form, and a maximum length for the description. It returns an object containing a React element for rendering the form, a `submit` function for submitting the form data to an API, a `pristine` boolean indicating whether the form has been modified, a `valid` boolean indicating whether the form data is valid, a `textLength` number indicating the length of the description text, and a `reset` function for resetting the form. \n\n`useTeaserForm` is similar to `useDescription`, but is used specifically for creating a form for inputting a teaser for the event. It takes in the category and query for the event, and returns an object containing a React element for rendering the form, a `submit` function for submitting the form data to an API, a `pristine` boolean indicating whether the form has been modified, a `valid` boolean indicating whether the form data is valid, and a `reset` function for resetting the form. \n\nThe code also defines several styled components for rendering the forms, as well as utility functions for working with rich text and making API calls.\n## Questions: \n 1. What is the purpose of the `useDescription` hook?\n    \n    The `useDescription` hook is used to create a rich text editor for a specific language and category, with options for setting a title, tooltip, placeholder, and maximum length. It returns an object with properties for the rendered editor, submission function, pristine state, validity state, text length, and reset function.\n\n2. What is the difference between the `useDescriptionForm` and `useTeaserForm` hooks?\n    \n    The `useDescriptionForm` hook is used to create a form with multiple rich text editors for a category, one for each language and language variant. It returns an object with properties for the rendered form, submission function, pristine state, reset function, and validity state. The `useTeaserForm` hook is used to create a form with two rich text editors for a category, one for the German language and one for the English language, specifically for creating a teaser. It returns an object with properties for the rendered form, submission function, pristine state, reset function, and validity state.\n\n3. What is the purpose of the `showdown` library in this code?\n    \n    The `showdown` library is used to convert Markdown syntax to HTML in the rich text editor. It is used to initialize a `converter` object in the `useDescription` hook, which is used to convert the Markdown text to HTML when rendering the editor and to convert the HTML text to Markdown when submitting the form.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/Description.md"}}],["144",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/Links.tsx)\n\nThe code defines a custom hook called `useLinksForm` that returns an object with properties and methods used to render and handle a form for managing links associated with a particular category entry. The hook takes an object as an argument with properties `category`, `query`, and `loaded`. \n\nThe hook uses several other custom hooks and functions imported from other files in the project. `useApiCall` is a custom hook that returns a function for making API calls. `useEntry` is a custom hook that returns an object with properties `entry` and `mutate` used to fetch and update a category entry. `useLinkList` is a custom hook that returns an object with properties and methods used to render and handle a list of links. `useT` is a custom hook that returns a function for translating text.\n\nThe hook first initializes some state variables using `useState` and `useMemo`. `initialLinks` is set to an array of URLs extracted from the `links` property of the `entry` object. `links` is set to `initialLinks`, and `linksFromApi` is set to `initialLinks` as well. `pristine` is set to `true` if `links` is equal to `initialLinks`, and `false` otherwise.\n\nThe hook then calls `useLinkList` with an object containing the initial links and a callback function to update the `links` state variable. The resulting object contains a `renderedLinkList` property that is used to render the list of links in the form, an `init` method used to initialize the list with the initial links, and a `valid` property indicating whether the list is valid.\n\nThe hook also defines an effect that updates the `links` state variable and calls the `init` method when the `initialLinks` or `linksFromApi` variables change.\n\nFinally, the hook returns an object with properties and methods used to render and handle the form. The `renderedForm` property contains JSX that renders the form with the link list. The `submit` method makes an API call to update the `links` property of the category entry with the new links. The `pristine` property indicates whether the form has been modified. The `reset` method resets the form to its initial state. The `valid` property indicates whether the form is valid.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a custom hook called `useLinksForm` that returns a form for managing links related to a specific category entry.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several external libraries and dependencies, including React, `useApiCall` and `useEntry` from a custom `api` library, `useT` from a custom `i18n` library, and `useLinkList` from a custom `linklist` library.\n\n3. What is the expected behavior of the `submit` function returned by `useLinksForm`?\n- The `submit` function attempts to update the links for the current category entry using the `call` function from the `api` library. If the update is successful, the `mutate` function from `useEntry` is called to update the cached entry data.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/Links.md"}}],["145",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/MainContact.tsx)\n\nThe code defines a custom hook called `useMainContactForm` that returns an object with properties and methods used to render and manage a form for an organizer's main contact information. The hook takes in an object of `MainContactFormHookProps` type that includes the category, query, loaded, customRequired, and id. \n\nThe hook uses several other hooks and functions from the project's `lib` and `config` directories to manage the form's state and behavior. For example, it uses `useEntry` to fetch the organizer's main contact information from the API and `useMutateList` to update the list of organizers when the main contact information is updated. \n\nThe `useMainContactForm` hook returns an object with the following properties:\n\n- `renderedForm`: a JSX element that renders the form with input fields for the main contact's name, email, street address, and city/zip code. \n- `submit`: an asynchronous function that updates the main contact information in the API and updates the list of organizers if necessary. \n- `pristine`: a boolean value that indicates whether the form has been modified since it was loaded. \n- `reset`: a function that resets the form to its initial state. \n- `valid`: a boolean value that indicates whether the form is currently valid based on its input values. \n- `requirementFulfillment`: an object that indicates whether the form fulfills a certain requirement (in this case, the main contact information). \n\nOverall, this code is an important part of the project's frontend because it allows organizers to manage their contact information through a user-friendly form. The `useMainContactForm` hook can be used in other parts of the project where organizer information is displayed or edited.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a custom hook called `useMainContactForm` that returns a form for editing an organizer's main contact information.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several modules from the project's `lib` and `config` directories, as well as the `react` library.\n\n3. What are some of the key features or functionality of this code?\n- The `useMainContactForm` hook retrieves an organizer's main contact information from the API and populates a form with the data.\n- The form allows the user to edit the main contact's name, email, and address information.\n- The hook also includes validation logic to ensure that required fields are filled out and that email addresses are valid.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/MainContact.md"}}],["146",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/Name.tsx)\n\nThe code defines two React hooks, `useName` and `useNameForm`, which are used to create a form for entering a name in either German or English. The form is used in the context of a larger project for managing cultural data, and is specific to certain categories of data (e.g. locations, offers, organizers).\n\nThe `useName` hook takes several props, including the category of data being edited, the language of the name being entered, and the current value of the name. It returns an object containing a React form component, an `onSubmit` function for handling form submissions, and several other properties related to the state of the form.\n\nThe `useNameForm` hook is a higher-level hook that uses `useName` to create a form for entering names in both German and English. It takes several props, including the category of data being edited, the query parameters for the current page, and the title of the form. It returns an object containing a rendered form component, a `submit` function for submitting the form, and several other properties related to the state of the form.\n\nThe `Name` component is a functional component that renders an input field for entering a name. It takes several props, including the label for the input field, the current value of the input field, and a function for handling form submissions. It also includes logic for setting the initial value of the input field and checking whether the input field is required.\n\nOverall, this code is used to create a form for entering names in either German or English, which is used in the context of a larger project for managing cultural data. The form is specific to certain categories of data, and includes logic for handling form submissions and checking whether input fields are required.\n## Questions: \n 1. What is the purpose of the `useName` hook?\n- The `useName` hook is used to manage the name input field for a specific category entry, including handling form submission and updating the entry's name in the API.\n\n2. What is the significance of the `pristine` variable?\n- The `pristine` variable is used to determine whether the name input field has been modified since it was last loaded from the API. This is used to determine whether the form needs to be submitted to update the entry's name.\n\n3. What is the purpose of the `useNameForm` function?\n- The `useNameForm` function is a higher-level hook that uses the `useName` hook to create a form for managing the name input field for a specific category entry in both German and English. It also handles form submission and validation.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/Name.md"}}],["147",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/Tags.tsx)\n\nThe code defines a custom hook called `useEntryTags` that returns an object with properties and methods used to manage the tags associated with a category entry. The hook takes an object with three optional parameters: `category`, `query`, and `tooltip`. \n\nThe hook uses several other hooks and functions from the project's `lib` and `components` directories. These include `useTags`, `useEntry`, `useApiCall`, and `useT`. \n\nThe `useTags` hook returns an array of tag objects that can be used to populate a `Tags` component. The `useEntry` hook returns an object with an `entry` property that contains data about the current category entry, as well as a `mutate` function that can be used to update the entry data. The `useApiCall` hook returns a function that can be used to make API calls to the backend server. The `useT` hook returns a translation function that can be used to translate text strings.\n\nThe `useEntryTags` hook uses the `useMemo` hook to memoize the initial tags associated with the entry, as well as a boolean value indicating whether the selected tags have been modified from their initial state. It also uses the `useState` hook to manage the currently selected tags and the tags retrieved from the API. \n\nThe `useEffect` hook is used to update the selected tags and tags from the API when the initial tags change. \n\nThe `useEntryTags` hook returns an object with four properties: `renderedForm`, `pristine`, `valid`, and `submit`. \n\nThe `renderedForm` property returns a JSX element that renders a `Tags` component with the `tagOptions` and `selectedTags` properties. If `tagOptions` is not yet available, a `ComponentLoader` is rendered instead. \n\nThe `pristine` property returns a boolean value indicating whether the selected tags have been modified from their initial state. \n\nThe `valid` property is always `true`, indicating that the form is always valid. \n\nThe `submit` property returns an async function that updates the entry data with the selected tags if they have been modified from their initial state. The function uses the `useApiCall` hook to make an API call to the backend server to update the entry data. If the call is successful, the `mutate` function is called to update the entry data in the `useEntry` hook. \n\nOverall, this code provides a reusable hook that can be used to manage the tags associated with a category entry in the larger project. It uses several other hooks and functions from the project's `lib` and `components` directories to retrieve and update the entry data, as well as to render the form.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a custom hook called `useEntryTags` that returns a form for selecting tags related to a category entry, and handles updating those tags via an API call.\n\n2. What external dependencies does this code rely on?\n- This code relies on several external dependencies, including React, `useMemo`, `useState`, `useEffect`, `useApiCall`, `useEntry`, `useTags`, `EntryFormHead`, `Tags`, `FormGrid`, `FormItem`, `FormItemWidth`, `CategoryEntry`, and `ComponentLoader`.\n\n3. What data is being manipulated by this code?\n- This code manipulates data related to category entries and tags, including the `entry` and `mutate` variables returned by `useEntry`, the `tagOptions` returned by `useTags`, and the `selectedTags` and `tagsFromApi` states managed by `useState`. It also updates the `relations.tags` property of an entry via an API call when the form is submitted.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/Tags.md"}}],["148",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/Teaser.tsx)\n\nThe code defines a React component and two hooks related to setting and updating a teaser text for a cultural event. The `Teaser` component is a form that allows the user to input a teaser text for the event. The `useTeaser` hook is used to manage the state of the teaser text and submit changes to the backend API. The `useTeaserForm` hook is a higher-level hook that uses the `useTeaser` hook to create a form with three `Teaser` components for different languages (German, English, and simplified German).\n\nThe `Teaser` component takes several props, including `label`, `tooltip`, `ariaLabel`, `onSubmit`, `pristine`, `setPristine`, `value`, `setValue`, `teaser`, `placeholder`, `required`, and `valid`. It renders a `Textarea` component that displays the current value of the teaser text and allows the user to edit it. When the form is submitted, the `onSubmit` function is called, which updates the teaser text in the backend API.\n\nThe `useTeaser` hook takes several props, including `category`, `query`, `language`, `label`, `placeholder`, `tooltip`, `ariaLabel`, and `loaded`. It uses the `useEntry` hook to retrieve the current event data from the backend API and extract the current teaser text for the specified language. It also uses the `useApiCall` hook to submit changes to the backend API. The hook returns an object with several properties, including `form`, `onSubmit`, `pristine`, `reset`, `valid`, and `value`. The `form` property is a `Teaser` component that is pre-populated with the current teaser text. The `onSubmit` function is called when the form is submitted and updates the teaser text in the backend API. The `pristine` property indicates whether the teaser text has been modified since it was last retrieved from the backend API. The `reset` function resets the teaser text to its original value. The `valid` property indicates whether the form is currently valid.\n\nThe `useTeaserForm` hook takes several props, including `category`, `placeholder`, `query`, and `loaded`. It uses the `useTeaser` hook to create three `Teaser` components for different languages and returns an object with several properties, including `renderedForm`, `submit`, `pristine`, `reset`, and `valid`. The `renderedForm` property is a form that contains the three `Teaser` components. The `submit` function submits changes to the backend API for all three languages. The `pristine` property indicates whether any of the `Teaser` components have been modified since they were last retrieved from the backend API. The `reset` function resets all three `Teaser` components to their original values. The `valid` property indicates whether the form is currently valid.\n\nOverall, this code provides a way for users to set and update teaser texts for cultural events in multiple languages. It uses React hooks and components to manage the state of the form and submit changes to the backend API. The `useTeaserForm` hook provides a higher-level interface for managing the form across multiple languages.\n## Questions: \n 1. What is the purpose of the `Teaser` component?\n   - The `Teaser` component is a form component that allows users to input and submit a teaser text for a specific entry.\n2. What is the `useTeaser` hook used for?\n   - The `useTeaser` hook is used to manage the state and functionality of the `Teaser` component, including setting the initial value, handling form submission, and updating the teaser text in the database.\n3. What is the `useTeaserForm` hook used for?\n   - The `useTeaserForm` hook is used to generate and manage multiple instances of the `Teaser` component for different languages, and to handle form submission for all instances at once.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/Teaser.md"}}],["149",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/TypeSubject.tsx)\n\nThe code defines a custom hook called `useEntryTypeSubjectForm` that returns an object with properties and methods used to render and handle a form for selecting types and subjects related to a category entry. \n\nThe hook takes an object as an argument with the following properties:\n- `category`: an object representing the category of the entry being edited\n- `query`: an object representing the query parameters used to fetch the entry being edited\n- `loaded`: a boolean indicating whether the entry has been loaded\n- `title`: a string representing the title of the form\n- `required`: a boolean indicating whether the form is required\n- `id`: a string representing the ID of the form\n\nThe hook uses several other hooks and functions to implement its functionality:\n- `useEntry`: a custom hook that fetches an entry of a given category and query\n- `useApiCall`: a custom hook that returns a function used to make API calls\n- `useT`: a custom hook that returns a function used for internationalization\n- `useMemo`: a React hook that memoizes the results of a function call\n- `useState`: a React hook that returns a state variable and a function to update it\n- `useEffect`: a React hook that runs a function after rendering\n\nThe hook returns an object with the following properties:\n- `renderedForm`: a JSX element representing the rendered form\n- `submit`: an asynchronous function that submits the form data to the API\n- `pristine`: a boolean indicating whether the form data has been changed\n- `reset`: a function that resets the form data to its initial state\n- `valid`: a boolean indicating whether the form data is valid\n- `requirementFulfillment`: an object representing the fulfillment of a requirement for the form\n\nThe `renderedForm` property returns a JSX element that renders a `TypesSubjects` component, which is a custom component that displays a list of types and subjects related to the category entry being edited. The `TypesSubjects` component takes several props, including `options`, `value`, `onChange`, `pristine`, `setPristine`, and `required`. \n\nThe `submit` function sends an API request to update the entry with the selected types and subjects. The function first filters the selected types to ensure they are valid, then filters the selected subjects to ensure they are related to the selected types. If the API request is successful, the `mutate` function is called to update the entry.\n\nThe `pristine` property is a boolean that is true if the form data has not been changed, and false otherwise. The `reset` function resets the form data to its initial state, and the `valid` property is a boolean that is true if the form data is valid, and false otherwise.\n\nOverall, this code defines a custom hook that provides functionality for selecting types and subjects related to a category entry, and handles the submission of the form data to the API. It is used in the larger project to provide a user interface for editing category entries.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a custom hook called `useEntryTypeSubjectForm` that returns an object with properties and methods for rendering and submitting a form related to entry types and subjects.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several custom hooks and components from the project's `lib` and `EntryForm` directories, as well as the `react` library.\n\n3. What is the expected input to the `useEntryTypeSubjectForm` hook?\n- The `useEntryTypeSubjectForm` hook expects an object with properties `category`, `query`, `loaded`, `title`, `required`, and `id`. These properties are used to fetch and display data related to the form.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/TypeSubject.md"}}],["150",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/form/index.tsx)\n\nThe code above defines several interfaces and types related to the entry form functionality of the kulturdaten-frontend project. \n\nThe `EntryFormProps` interface defines the properties that are required for rendering an entry form for a specific category. This includes the category itself and the query parameters used to filter the entries.\n\nThe `EntryFormHookProps` interface extends `EntryFormProps` and adds additional properties that are used to customize the behavior and appearance of the form. These include whether the form has been loaded, a tooltip to display, the form title, whether the field is required, an ID for the form, whether to hide the title, a placeholder for the input field, and a reference to the HTML element.\n\nThe `EntryFormHook` type is a function that takes in `EntryFormHookProps` and returns an object with several properties and methods related to the form. These include the rendered form as a React element, a `submit` method that returns a promise, a `pristine` boolean indicating whether the form has been modified, a `reset` method to reset the form, a `valid` boolean indicating whether the form is currently valid, and a `requirementFulfillment` property that indicates whether the form fulfills the requirements for the category.\n\nOverall, this code defines the interfaces and types necessary for creating and customizing entry forms for different categories in the kulturdaten-frontend project. These forms can be used to add new entries or edit existing ones, and the `EntryFormHook` type provides a convenient way to interact with and manipulate the form data.\n## Questions: \n 1. What is the purpose of the `EntryFormProps` interface?\n   - The `EntryFormProps` interface defines the props that are passed to the `EntryFormHook` function, including the category and query.\n\n2. What is the `EntryFormHook` type used for?\n   - The `EntryFormHook` type is a function type that takes in props of type `EntryFormHookProps` and returns an object with various properties and methods related to the rendered form.\n\n3. What is the `RequirementFulfillment` type used for?\n   - The `RequirementFulfillment` type is imported from a file located at `../../../../config/categories` and is used as a possible value for the `requirementFulfillment` property of the object returned by the `EntryFormHook` function. It likely relates to fulfilling certain requirements or criteria for the given category.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/form/index.md"}}],["151",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/formComponents.tsx)\n\nThe code in this file provides a set of styled components for use in forms in the `kulturdaten-frontend` project. \n\nThe `FormWrapper` component is the main component in this file. It wraps around a form and takes in several props, including `children`, `id`, `requirement`, and `requirementNotInFormItem`. The `children` prop is the form content, while the `id` prop is an optional ID for the form. The `requirement` prop is an object that contains a boolean value for whether the form is required or not, and the `requirementNotInFormItem` prop is a boolean value that determines whether the form requirement should be displayed outside of the form item. \n\nThe `FormRequiredInfo` component is used to display the form requirement information. It takes in a `fulfilled` prop, which is a boolean value that determines whether the form requirement has been fulfilled or not. \n\nThe `FormGrid` component is a styled component that displays the form items in a grid layout. It takes in a `noTopPadding` prop, which is a boolean value that determines whether the top padding should be removed. \n\nThe `FormItem` component is a styled component that wraps around a form item. It takes in several props, including `children`, `width`, `childWidth`, `alignSelf`, `childrenFlexGrow`, `alignEnd`, `css`, `lang`, and `id`. The `children` prop is the content of the form item, while the `width` prop is an enum that determines the width of the form item. The `childWidth` prop is an optional string that determines the width of the child element of the form item. The `alignSelf` prop is an optional string that determines the alignment of the form item. The `childrenFlexGrow` prop is an optional string that determines the flex-grow value of the child element of the form item. The `alignEnd` prop is a boolean value that determines whether the form item should be aligned to the end. The `css` prop is an optional serialized style that can be used to add additional styles to the form item. The `lang` prop is an optional string that determines the language of the form item. The `id` prop is an optional ID for the form item. \n\nThe other components in this file are styled components that are used within the main components. \n\nOverall, this file provides a set of reusable styled components for forms in the `kulturdaten-frontend` project. These components can be used to create consistent and visually appealing forms throughout the project.\n## Questions: \n 1. What is the purpose of the `FormWrapper` component and how is it used?\n   \n   The `FormWrapper` component is used to wrap form elements and can optionally take a `requirement` prop to indicate whether the form is required or not. It also accepts a `requirementNotInFormItem` prop to indicate whether the requirement should be displayed outside of the form item. \n\n2. What is the purpose of the `FormItem` component and how is it used?\n   \n   The `FormItem` component is used to wrap form elements within the `FormWrapper` component and allows for customization of the width, alignment, and flex properties of the form item's children. It can also take a `lang` prop to indicate the language of the form item.\n\n3. What is the purpose of the `FormRequiredInfo` component and how is it used?\n   \n   The `FormRequiredInfo` component is used to display a checkmark or X icon indicating whether a required form element has been fulfilled or not. It is used within the `FormWrapper` component and takes a `fulfilled` prop to indicate whether the requirement has been fulfilled or not. It can also take a `marginBottom` prop to indicate whether it should have a bottom margin.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/formComponents.md"}}],["152",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/media.tsx)\n\nThe code defines two custom hooks, `useMediaUploadForm` and `useMediaForm`, which are used to handle media uploads and updates in the larger project. \n\n`useMediaUploadForm` is used to upload media files to the server. It takes in four arguments: `category`, `query`, `disabled`, `maxFiles`, and `maxFileSizeInKb`. `category` and `query` are used to fetch the current entry data from the server. `disabled` is a boolean value that determines whether the upload functionality is disabled. `maxFiles` is the maximum number of files that can be uploaded, and `maxFileSizeInKb` is the maximum size of each file in kilobytes. The hook returns an object with a `renderedForm` property, which is a JSX element containing a `DropZone` component and an `Info` component. The `DropZone` component is used to drag and drop files for upload, while the `Info` component displays any errors that occur during the upload process.\n\n`useMediaForm` is used to handle media updates. It takes in an object with two properties, `category` and `query`, which are used to fetch the current entry data from the server. The hook returns an object with four properties: `renderedForm`, `pristine`, `submit`, and `valid`. `renderedForm` is a JSX element containing a `MediaList` component and a `DropZone` component. The `MediaList` component displays a list of uploaded media files, while the `DropZone` component is used to upload new media files. `pristine` is a boolean value that determines whether the form has been modified. `submit` is a function that is called when the form is submitted, and `valid` is a boolean value that determines whether the form is valid.\n\nOverall, these hooks are used to handle media uploads and updates in the larger project, and provide a convenient way to manage media files in the application.\n## Questions: \n 1. What is the purpose of the `useMediaUploadForm` function?\n- The `useMediaUploadForm` function is used to handle the uploading of media files for a specific category and query, and returns a rendered form, as well as information about its validity and whether it has been modified.\n\n2. What is the significance of the `mediaNotPristineList` state variable?\n- The `mediaNotPristineList` state variable is used to keep track of which media items have been modified by the user, and is used to determine which media items need to be updated when the form is submitted.\n\n3. What is the purpose of the `submitMediaList` function?\n- The `submitMediaList` function is used to update any media items that have been modified by the user, by making API calls to update their attributes. It is called when the form is submitted.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/media.md"}}],["153",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/useEntryHeader.tsx)\n\nThe code defines a React hook called `useEntryHeader` that returns a React element. This hook is used to render the header of an entry form. The hook takes in several props, including the category and query of the entry, the title of the form, and whether the form is in a wide layout or minimal variant. \n\nThe hook uses several other hooks and functions to retrieve and manipulate data. For example, it uses the `useTabs` hook to retrieve the tabs associated with the category of the entry. It also uses the `useEntry` hook to retrieve the data associated with the entry, and the `useLanguage` and `useLocale` hooks to retrieve the language and locale of the user. \n\nThe hook also includes several conditional statements that check whether the user is authorized to access the entry. If the user is not authorized, the hook redirects the user to the appropriate page. \n\nThe hook also includes a dropdown menu that allows the user to export the entry data in different formats, as well as delete the entry if the user is authorized to do so. \n\nOverall, this hook is an important part of the entry form component, as it provides the header and menu functionality for the form. It also demonstrates the use of several other hooks and functions to retrieve and manipulate data.\n## Questions: \n 1. What is the purpose of the `useEntryHeader` function?\n- The `useEntryHeader` function is used to render the header of an entry form, including the title, subtitle, tabs, and menu.\n\n2. What libraries and hooks are being used in this file?\n- The file is importing and using several libraries and hooks, including `styled` from `@emotion/styled`, `useRouter` and `useEffect` from `next/router`, `useDownload` from `../../../lib/api/download`, and `useT`, `useLanguage`, and `useLocale` from `../../../lib/i18n`.\n\n3. What is the purpose of the `speakerFunction` and when is it called?\n- The `speakerFunction` is not defined in this file, so it is unclear what its purpose is or when it is called.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/useEntryHeader.md"}}],["154",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/useSaveDate.ts)\n\nThe code above is a custom React hook that is used to format and return a date string for a given CategoryEntry object. The CategoryEntry object is imported from the `general` module of the project's API types. The `useDate` hook is imported from the `date` module of the project's `lib` directory.\n\nThe `useSaveDate` hook takes a single argument, `entry`, which is a CategoryEntry object. The hook then uses the `useDate` hook to get the current date and time. It then checks if the `entry` object has an `updatedAt` attribute. If it does, the hook formats the `updatedAt` date using the `date` hook's `DateFormat.dateTime` format. If the `entry` object does not have an `updatedAt` attribute, the hook returns `undefined`.\n\nThis hook can be used in various components throughout the project to display the last updated date of a CategoryEntry. For example, it could be used in a list of CategoryEntries to show when each entry was last updated. \n\nHere is an example of how this hook could be used in a component:\n\n```\nimport React from 'react';\nimport { CategoryEntry } from '../../../lib/api/types/general';\nimport { useSaveDate } from './useSaveDate';\n\ninterface Props {\n  entry: CategoryEntry;\n}\n\nconst EntryListItem: React.FC<Props> = ({ entry }) => {\n  const formattedDate = useSaveDate(entry);\n\n  return (\n    <div>\n      <h2>{entry.data.attributes.title}</h2>\n      <p>Last updated: {formattedDate}</p>\n    </div>\n  );\n};\n\nexport default EntryListItem;\n```\n\nIn this example, the `useSaveDate` hook is used to format the `updatedAt` date of the `entry` object passed in as a prop. The formatted date is then displayed in the component's JSX.\n## Questions: \n 1. What is the purpose of the `CategoryEntry` type imported from `../../../lib/api/types/general`?\n- The `CategoryEntry` type is likely used to define the structure of data objects related to categories in the application's API.\n\n2. What is the `useSaveDate` function used for?\n- The `useSaveDate` function takes a `CategoryEntry` object as input and returns a formatted date string representing the object's `updatedAt` attribute.\n\n3. What is the `DateFormat` type imported from `../../../lib/date` used for?\n- The `DateFormat` type is likely used to define the format of date strings used in the application, and is used as an argument to the `date` function imported from the same module.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/useSaveDate.md"}}],["155",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/helpers/useSpeaker.tsx)\n\nThe code above exports a function called `speakerFunction` that creates a new HTML paragraph element and appends it to the document body. The function takes a single argument `txt` which is a string that will be displayed in the paragraph element. \n\nThe function first creates a new paragraph element using the `document.createElement` method and assigns it to the variable `el`. It then generates a unique ID for the element by concatenating the string \"speak-\" with the current timestamp using `Date.now()`. This ID is then set as an attribute on the element using `el.setAttribute(\"id\", id)`.\n\nThe `aria-live` attribute is also set on the element to \"assertive\" using `el.setAttribute(\"aria-live\", \"assertive\")`. This attribute is used to indicate to assistive technologies that the content of the element may change dynamically and should be announced to the user.\n\nThe element is then appended to the document body using `document.body.appendChild(el)`.\n\nThe element's `maxHeight` style property is set to \"0\" using `el.style.maxHeight = \"0\"`. This is done to ensure that the element is not visible on the page.\n\nAfter a delay of 100 milliseconds, the `innerHTML` property of the element is set to the value of the `txt` argument using `document.getElementById(id).innerHTML = txt`. This causes the text to be displayed in the element.\n\nFinally, after a delay of 3000 milliseconds, the element is removed from the document body using `document.body.removeChild(document.getElementById(id))`.\n\nThis function can be used in the larger project to display messages or notifications to the user. The `aria-live` attribute ensures that the message is announced to users of assistive technologies, while the delay before the message is displayed and the delay before it is removed from the page can be adjusted to control the duration of the message. \n\nExample usage:\n\n```\nspeakerFunction(\"Your changes have been saved.\");\n```\n## Questions: \n 1. **What is the purpose of this function?** \nThis function creates a new paragraph element with a unique ID and adds it to the document body. It then sets a timeout to update the innerHTML of the element with the provided text after 100ms, and another timeout to remove the element from the document after 3000ms.\n\n2. **What is the parameter `txt` and what type of data does it expect?** \n`txt` is a string parameter that is expected to contain the text that will be displayed in the created paragraph element.\n\n3. **What is the purpose of setting `aria-live` attribute to \"assertive\"?** \nThe `aria-live` attribute is used to indicate to assistive technologies (such as screen readers) that the content of the element may change dynamically and should be announced to the user. Setting it to \"assertive\" means that the announcement should be made immediately and take precedence over other content.","metadata":{"source":".autodoc/docs/markdown/components/pages/helpers/useSpeaker.md"}}],["156",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/location/accessibility.tsx)\n\nThe code defines a React functional component called `LocationAccessibilityPage` that renders a form for editing the accessibility information of a location. The component imports several helper functions and components from other files in the project.\n\nThe `useAccessibilityForm` hook is used to generate the form fields and handle form submission. It uses the `useEntry` hook to retrieve the current location data from the API and the `useGenericFormStructure` hook to generate the form fields based on the `locationAccessibility` configuration object. The hook also handles form validation and submission using the `useApiCall` hook to send a PATCH request to update the location data.\n\nThe `LocationAccessibilityPage` component renders the form generated by the `useAccessibilityForm` hook along with a header and a \"Save\" button. It also uses the `usePublish` hook to handle publishing the location data and the `useConfirmExit` hook to warn the user if they attempt to leave the page with unsaved changes.\n\nOverall, this code provides a reusable form component for editing the accessibility information of a location in the larger project.\n## Questions: \n 1. What is the purpose of the `useAccessibilityForm` hook?\n- The `useAccessibilityForm` hook is used to handle the form state and submission for the location accessibility page.\n\n2. What is the role of the `LocationAccessibilityPage` component?\n- The `LocationAccessibilityPage` component is responsible for rendering the header, form, and save button for the location accessibility page, as well as handling confirmation of unsaved changes before exiting the page.\n\n3. What is the purpose of the `usePublish` hook?\n- The `usePublish` hook is used to handle the publish state and submission for the location accessibility page, and calls the `onPublish` function when the publish button is clicked.","metadata":{"source":".autodoc/docs/markdown/components/pages/location/accessibility.md"}}],["157",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/location/list.tsx)\n\nThe `LocationListPage` component is a React functional component that renders a list of locations based on the user's selected filters and sorting options. The component is part of the larger `kulturdaten-frontend` project and imports various modules from the project's `config`, `lib`, and `components` directories.\n\nThe component uses the `useRouter` hook from the `next/router` module to access the current route and the `useContext` hook to access the `EntryListContext` context, which provides information about the current list of entries being displayed. The component also uses various other hooks, such as `useMemo`, `useState`, and `useEffect`, to manage state and perform side effects.\n\nThe `LocationListPage` component renders a `LocationList` component from the `components/EntryList` directory, which displays a list of locations based on the data returned from the `useList` hook. The `useList` hook takes several arguments, including the current page, number of entries per page, filters, and sorting options, and returns a paginated list of locations based on those parameters.\n\nThe component also uses the `useBreakpointOrWider` hook from the `lib/WindowService` module to determine whether the user's screen size is mid-sized or wider. If the screen size is mid-sized or wider and the list of locations is not empty, the component uses the `router.replace` method to navigate to the details page for the first location in the list. Otherwise, the component renders the `LocationList` component with the `expanded` prop set to `false`.\n\nOverall, the `LocationListPage` component provides a way for users to view and filter a list of locations and navigate to the details page for each location. It is a key part of the `kulturdaten-frontend` project's user interface and data management system.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file defines a React functional component for rendering a page that displays a list of locations.\n\n2. What external libraries or APIs does this code file use?\n- This code file imports several modules from the project's own codebase, as well as from the Next.js and React libraries.\n- It also imports types and functions from an external API module located in the project's `lib` directory.\n\n3. What is the significance of the `useMemo` hook in this code file?\n- The `useMemo` hook is used to memoize the results of certain function calls, such as `getFilters` and `getSortKey`, so that they are only recomputed when their dependencies change. This can help improve performance by avoiding unnecessary re-renders.","metadata":{"source":".autodoc/docs/markdown/components/pages/location/list.md"}}],["158",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/location/media.tsx)\n\nThe `LocationMediaPage` component is a React functional component that renders a form for creating or editing a media entry for a location in the Kulturdaten-frontend project. It imports several hooks and components from other files in the project to handle various aspects of the form.\n\nThe component takes in two props: `category` and `query`, which are used to fetch the location entry data from the API and to specify the category of the media entry being created or edited. The `useEntryHeader` hook is used to render the header for the location entry, and the `useEntry` hook is used to fetch the location entry data and provide it to the form.\n\nThe `useSaveDate` hook is used to format the date of the media entry, and the `useMediaForm` hook is used to handle the form submission and validation. The `useConfirmExit` hook is used to display a warning message if the user tries to leave the page with unsaved changes.\n\nThe `usePublish` hook is used to handle the publishing of the media entry, and the `Save` component is used to display a button for saving the media entry. The `StyledEntryFormContainer` and `EntryFormWrapper` components are used to style the form.\n\nOverall, this component is an important part of the Kulturdaten-frontend project as it allows users to create and edit media entries for locations. It demonstrates the use of several hooks and components from other files in the project to handle various aspects of the form, and can be easily customized to handle other types of entries in the future.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file defines a React functional component called `LocationMediaPage` that renders a form for creating or editing a media entry for a specific category.\n\n2. What are some of the dependencies used in this code file?\n- This code file imports several hooks from React, including `useCallback`, `useContext`, `useEffect`, `useMemo`, and `useState`. It also imports various other modules from the project's codebase, such as `ApiCall`, `CategoryEntry`, and `WindowContext`.\n\n3. What is the role of the `useConfirmExit` hook in this code file?\n- The `useConfirmExit` hook is used to display a confirmation dialog when the user attempts to leave the page without saving changes to the form. It takes in a boolean value indicating whether changes have been made to the form, a message to display in the dialog, and a callback function to reset the form if the user chooses to stay on the page.","metadata":{"source":".autodoc/docs/markdown/components/pages/location/media.md"}}],["159",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/location/service.tsx)\n\nThe code defines a React functional component called `LocationServicePage` that renders a form for editing a location service. The form is built using the `useServiceForm` hook, which returns an object containing the rendered form, form state, and functions for submitting and resetting the form. The `useServiceForm` hook uses other hooks and functions to fetch and update the location service data.\n\nThe `LocationServicePage` component also uses other hooks and functions to render the page header, handle form submission, and display a confirmation dialog when the user tries to leave the page with unsaved changes. The component also renders a `Save` button that triggers the form submission and a `Publish` button that triggers a separate publish action.\n\nThe `useServiceForm` hook fetches the location service data using the `useEntry` hook from the `categories` library. It then uses the `useGenericFormStructure` hook to generate a form structure based on the location service data. The form structure is an object that maps form field names to their current values. The `useGenericFormStructure` hook also returns a `dispatch` function that can be used to update the form state.\n\nThe `useServiceForm` hook also defines a `submit` function that sends a PUT request to update the location service data. The request is sent using the `useApiCall` hook from the `api` library. The `submit` function first checks if the form is valid and has unsaved changes. If so, it sends the PUT request with the updated form data. If the request is successful, it calls the `mutate` function returned by the `useEntry` hook to update the location service data.\n\nThe `useServiceForm` hook also defines a `pristine` variable that indicates whether the form has unsaved changes. It does this by comparing the current form state to the initial location service data fetched by the `useEntry` hook.\n\nOverall, this code provides a reusable form component for editing location service data. It uses various hooks and functions from the `categories`, `api`, and `lib` libraries to fetch and update the data and handle form submission and validation. The `LocationServicePage` component uses this form component and other hooks and functions to render a complete page for editing and publishing location service data.\n## Questions: \n 1. What is the purpose of the `useServiceForm` hook?\n- The `useServiceForm` hook is used to handle the form submission and validation for a specific category and query.\n\n2. What is the role of the `LocationServicePage` component?\n- The `LocationServicePage` component is responsible for rendering the entry header, form, and save button for a specific category and query, as well as handling the confirmation dialog when the user tries to exit the page with unsaved changes.\n\n3. What external libraries or APIs are being used in this code?\n- This code is using several external libraries and APIs, including React, the `useEntry` hook from the `categories` library, the `useGenericFormStructure` hook from the `GenericForm` component, the `useApiCall` hook from the `api` library, and the `useT` hook from the `i18n` library. It is also using the `locationService` and `locationServiceUpdateFactory` APIs from the `api/routes/location` module.","metadata":{"source":".autodoc/docs/markdown/components/pages/location/service.md"}}],["160",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/offer/audience.tsx)\n\nThe `OfferAudiencePage` component is a React functional component that renders a form for editing the audience and peak hours of an offer. It imports several helper functions and components from other files in the project.\n\nThe `useAudienceForm` hook is used to generate a form for editing the audience of the offer. It uses the `useGenericFormStructure` hook to generate a form based on the `offerAudience` configuration object. The `useApiCall` hook is used to make API calls to update the offer's audience. The `useEffect` hook is used to initialize the form with the current audience data from the offer. The `useMemo` hook is used to calculate the `valid` and `pristine` states of the form based on its current state and the initial audience data.\n\nThe `usePeakHoursForm` hook is used to generate a form for editing the peak hours of the offer. It uses the `useHoursField` hook to generate a form field for entering peak hours. The `useApiCall` hook is used to make API calls to update the offer's peak hours. The `useEffect` hook is used to initialize the form with the current peak hours data from the offer. The `useMemo` hook is used to calculate the `valid` and `pristine` states of the form based on its current state and the initial peak hours data.\n\nThe `OfferAudiencePage` component renders the forms generated by the `useAudienceForm` and `usePeakHoursForm` hooks, along with a `Save` button for saving changes to the offer. It also uses the `usePublish` hook to render a publish button for publishing the offer. The `useConfirmExit` hook is used to warn the user if they attempt to leave the page with unsaved changes. The `useState` hook is used to keep track of the `loaded` and `valid` states of the component. The `useEffect` hook is used to set the `loaded` state to `true` after a short delay to allow the component to render properly. The `useMemo` hook is used to calculate the `pristine` state of the component based on the `pristine` states of the audience and peak hours forms.\n## Questions: \n 1. What is the purpose of the `usePeakHoursForm` hook?\n- The `usePeakHoursForm` hook is used to handle the form for updating peak hours for an offer.\n\n2. What is the purpose of the `useAudienceForm` hook?\n- The `useAudienceForm` hook is used to handle the form for updating audience fields for an offer.\n\n3. What is the purpose of the `onSave` function?\n- The `onSave` function is called when the user clicks the \"Save\" button and it triggers the submission of both the audience and peak hours forms.","metadata":{"source":".autodoc/docs/markdown/components/pages/offer/audience.md"}}],["161",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/offer/categorization.tsx)\n\nThe code defines a React component called `OfferCategorizationPage` that renders a form for categorizing an offer. The form is composed of three sub-forms: `mainTypeForm`, `formTypeSubject`, and `renderedTagsForm`. The `mainTypeForm` sub-form allows the user to select the main type of the offer from a list of options. The `formTypeSubject` sub-form allows the user to select the topics associated with the offer. The `renderedTagsForm` sub-form allows the user to add tags to the offer.\n\nThe `OfferCategorizationPage` component uses several hooks to manage the state of the form. The `useEntry` hook is used to retrieve the offer data from the backend API. The `useEntryTypeSubjectForm` and `useEntryTags` hooks are used to manage the state of the `formTypeSubject` and `renderedTagsForm` sub-forms, respectively. The `useOfferMainTypeForm` hook is used to manage the state of the `mainTypeForm` sub-form.\n\nThe `useOfferMainTypeForm` hook takes an object as an argument that contains the category, query, loaded, required, and id properties. The `useEntry` hook is used to retrieve the offer data from the backend API. The `useApiCall` hook is used to make an API call to update the offer data when the form is submitted. The `useState` hook is used to manage the state of the `types` and `typesFromApi` variables, which represent the main types associated with the offer. The `usePseudoUID` hook is used to generate a unique ID for the `Tags` component. The `useMemo` hook is used to memoize the `valid`, `initialTypes`, `pristine`, and `fulfilled` variables. The `useEffect` hook is used to update the `typesFromApi` variable when the `initialTypes` or `types` variables change.\n\nThe `OfferCategorizationPage` component uses the `useConfirmExit` hook to display a confirmation dialog when the user tries to leave the page without saving changes. The `usePublish` hook is used to manage the state of the publish button and to handle the publishing of the offer.\n\nOverall, the `OfferCategorizationPage` component provides a user-friendly interface for categorizing an offer and ensures that the required fields are filled out before the offer can be published.\n## Questions: \n 1. What is the purpose of the `useOfferMainTypeForm` hook?\n- The `useOfferMainTypeForm` hook is used to handle the form for selecting the main type of an offer.\n\n2. What is the significance of the `pristine` variable?\n- The `pristine` variable is used to determine if the form has been changed or not. If it is `true`, then the form has not been changed.\n\n3. What is the purpose of the `useConfirmExit` hook?\n- The `useConfirmExit` hook is used to display a confirmation message when the user tries to leave the page without saving changes to the form.","metadata":{"source":".autodoc/docs/markdown/components/pages/offer/categorization.md"}}],["162",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/offer/list.tsx)\n\nThe `OfferListPage` component is a React functional component that renders a list of offers based on the current category page. It imports various hooks and components from different files in the project to achieve this functionality.\n\nThe component first imports the `useRouter` hook from the `next/router` module, which is used to access the current route and query parameters. It also imports the `useContext` hook from React, which is used to access the `EntryListContext` object, which contains information about the current list of entries being displayed.\n\nThe component then imports various other hooks and components from different files in the project, such as `useCategories` from `../../../config/categories`, `OfferList` from `../../EntryList/OfferList`, and `AppWrapper` from `../../wrappers/AppWrapper`.\n\nThe `OfferListPage` component uses the `useList` hook to fetch the list of offers based on the current category page and other parameters such as the current page number, number of entries per page, sorting key, and filters. It also uses the `useOrganizerId` hook to get the current organizer ID, which is used as a filter parameter when fetching the list of offers.\n\nThe component then uses the `useEffect` hook to update the route and query parameters based on the current list of offers when the component mounts or when the list of offers changes. If the screen size is mid or wider and the list of offers is not empty, the component updates the route and query parameters to display the details of the last viewed offer or the first offer in the list. The `setListEvaluated` function is used to indicate that the list has been evaluated and can be displayed.\n\nFinally, the component returns the `OfferList` component wrapped in the `AppWrapper` component if the list has been evaluated and the screen size is not mid or wider. Otherwise, it returns an empty string.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file defines a React functional component for rendering a page that displays a list of offers.\n\n2. What external libraries or dependencies does this code use?\n- This code file imports several modules from external libraries, including `next/router`, `react`, and `react-dom`.\n\n3. What is the significance of the `useMemo` hook in this code?\n- The `useMemo` hook is used to memoize the results of certain function calls, such as `getFilters`, `getCurrentPage`, and `getSortKey`, so that they are only re-evaluated when their dependencies change. This can help improve performance by avoiding unnecessary re-renders.","metadata":{"source":".autodoc/docs/markdown/components/pages/offer/list.md"}}],["163",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/offer/media.tsx)\n\nThe `OfferMediaPage` component is a React functional component that renders a form for creating or editing media entries in the context of a specific category. It is part of the larger `kulturdaten-frontend` project and uses several helper functions and hooks to manage state and handle user interactions.\n\nThe component takes in a `CategoryEntryPage` object as props, which includes the category and query parameters needed to fetch the corresponding entry data. It then uses the `useEntryHeader` and `useEntry` hooks to render the header and retrieve the entry data, respectively. The `useSaveDate` hook is used to format the date of the entry for display.\n\nThe component also uses the `useMediaForm` hook to manage the state of the media form, including handling form submission and validation. The `useConfirmExit` hook is used to prompt the user with a confirmation message if they attempt to leave the page with unsaved changes. The `usePublish` hook is used to render the publish button and handle the `onPublish` callback when the button is clicked.\n\nThe `onSave` function is a callback that is called when the save button is clicked. It calls the `submit` function from the `useMediaForm` hook to submit the form data to the server.\n\nThe component renders the publish button, entry header, save button, and media form in that order. The `renderedPublish` and `renderedEntryHeader` variables are JSX elements returned by the `usePublish` and `useEntryHeader` hooks, respectively. The `renderedForm` variable is a JSX element returned by the `useMediaForm` hook and is wrapped in `StyledEntryFormContainer` and `EntryFormWrapper` components for styling purposes.\n\nOverall, the `OfferMediaPage` component provides a reusable form for creating or editing media entries in the context of a specific category. It uses several helper functions and hooks to manage state and handle user interactions, making it a modular and extensible component within the larger `kulturdaten-frontend` project.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file defines a React functional component called `OfferMediaPage` that renders a form for creating or editing media entries in a specific category.\n\n2. What are some of the custom hooks used in this code file?\n- The code file uses several custom hooks such as `useEntryHeader`, `useSaveDate`, `useMediaForm`, `useT`, `useConfirmExit`, and `usePublish` to manage state and functionality within the component.\n\n3. What is the significance of the `loaded` state variable?\n- The `loaded` state variable is used to delay the rendering of the media form until the component has fully loaded and the entry data has been retrieved from the API. This helps to prevent issues with form data being overwritten or lost during the initial render.","metadata":{"source":".autodoc/docs/markdown/components/pages/offer/media.md"}}],["164",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/organizer/categorization.tsx)\n\nThe `OrganizerCategorizationPage` component is a React functional component that renders a form for creating or editing an organizer entry in the Kulturdaten-frontend project. It imports several helper functions and components from other files in the project, including `useEntry` for fetching the organizer data, `useEntryHeader` for rendering the header of the entry form, `useSaveDate` for formatting the date of the entry, `useEntryTypeSubjectForm` and `useEntryTags` for rendering the form fields for the organizer type and tags, and `usePublish` for handling the publishing of the entry.\n\nThe component takes two props: `category` and `query`, which are used by the `useEntry` hook to fetch the organizer data. The component first fetches the organizer data using the `useEntry` hook and formats the date using the `useSaveDate` hook. It then renders the entry header using the `useEntryHeader` hook.\n\nThe component also sets up state using the `useState` hook to keep track of whether the form has loaded, and uses the `useContext` hook to get the `rendered` property from the `WindowContext`. It then sets up two memoized variables using the `useMemo` hook: `isPublished` and `typeSubjectRequired`. `isPublished` checks whether the organizer entry has been published, and `typeSubjectRequired` checks whether the organizer type is required based on whether the entry has been published or whether the organizer already has a type.\n\nThe component then sets up two more memoized variables: `shouldWarn` and `valid`. `shouldWarn` checks whether the organizer type form has been changed and whether the organizer data has been loaded, and `valid` checks whether both the organizer type and tags forms are valid.\n\nThe component then sets up a `useConfirmExit` hook to warn the user if they try to exit the form without saving changes. It also sets up an `onSave` function that submits the organizer type and tags forms if they have been changed.\n\nFinally, the component renders the publish button using the `usePublish` hook, the entry header, the save button, and the organizer type and tags forms.\n\nOverall, this component is an important part of the Kulturdaten-frontend project as it allows users to create and edit organizer entries, and handles the publishing of those entries.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file is a React functional component that represents the Organizer Categorization Page of the Kulturdaten Frontend project.\n\n2. What are the dependencies of this code file?\n- This code file imports various modules from the project's lib and components directories, including API routes and types, localization functions, form helpers, and publishing functions.\n\n3. What is the main functionality of this code file?\n- The main functionality of this code file is to render a form for categorizing and tagging an organizer entry, with options for saving and publishing the entry. It also includes logic for handling form submission, validation, and confirmation of unsaved changes.","metadata":{"source":".autodoc/docs/markdown/components/pages/organizer/categorization.md"}}],["165",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/organizer/list.tsx)\n\nThe `OrganizerListPage` component is a React functional component that renders a page displaying a list of organizers. It imports various utility functions and components from other files in the project, including `useRouter` and `useContext` from the `next/router` and `react` packages respectively. \n\nThe component uses the `useCategories` hook to retrieve the list of available categories, and the `useLocale` hook to determine the current locale. It also uses the `useBreakpointOrWider` hook to determine whether the current viewport width is at least the `mid` breakpoint. \n\nThe component then retrieves various parameters related to the organizer list from the `EntryListContext` context, including the current page, number of entries per page, sort key, order, filters, and last entry ID. It also uses the `useOrganizerId` hook to retrieve the ID of the currently selected organizer. \n\nThe component then uses the `useList` hook to retrieve the list of organizers based on the retrieved parameters. If the viewport width is at least the `mid` breakpoint and the list has at least one entry, the component uses the `router.replace` function to update the URL with the ID of the last entry in the list, as well as the ID of the currently selected organizer and a `sub` parameter indicating that the \"info\" tab should be displayed. \n\nFinally, the component renders an `AppWrapper` component that wraps an `OrganizerList` component. If the viewport width is less than the `mid` breakpoint, the `OrganizerList` component is rendered with the `expanded` prop set to `false`, indicating that only the first few entries should be displayed. Otherwise, an empty string is rendered. \n\nOverall, the `OrganizerListPage` component provides a way to display a list of organizers and navigate between them using the URL. It also provides responsive behavior to ensure that the list is displayed appropriately on different viewport sizes.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React functional component for rendering a page that displays a list of organizers, with options for filtering and sorting the list.\n\n2. What external libraries or APIs does this code use?\n   - This code imports several modules from the project's own codebase, as well as the `next/router` and `react` libraries. It also uses the `WindowService` module and the `OrganizerList` and `CategoryPage` types from the project's `lib` directory.\n\n3. What is the significance of the `listEvaluated` state variable?\n   - The `listEvaluated` state variable is used to determine whether the `useEffect` hook should execute. When `listEvaluated` is `false`, the component returns `null`, and when it is `true`, the component renders the `AppWrapper` and `OrganizerList` components. The `useEffect` hook updates `listEvaluated` to `true` when the `list` variable is defined and not `null`.","metadata":{"source":".autodoc/docs/markdown/components/pages/organizer/list.md"}}],["166",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/organizer/media.tsx)\n\nThe code defines two custom hooks, `useLogoUploadForm` and `useLogoForm`, and a React functional component, `OrganizerMediaPage`. \n\n`useLogoUploadForm` is a hook that returns a form for uploading a logo image. It takes in three arguments: `category` (a `Category` object), `query` (a `ParsedUrlQuery` object), and `disabled` (a boolean indicating whether the form should be disabled). It returns an object with a `renderedForm` property, which is a JSX element representing the form, and other properties such as `valid`, `pristine`, `reset`, and `submit`. The form contains a `DropZone` component for uploading image files, and an `Info` component for displaying error messages. The hook also uses other hooks such as `useEntry`, `useMediaUpload`, and `useUser` to handle the upload process.\n\n`useLogoForm` is a hook that returns a form for editing a logo image. It takes in one argument, an object with `category` and `query` properties. It returns an object with a `renderedForm` property, which is a JSX element representing the form, and other properties such as `valid`, `pristine`, `reset`, and `submit`. The form contains a `MediaList` component for displaying the current logo image and allowing the user to select a new one, and other components such as `EntryFormHead` and `FormGrid`. The hook also uses other hooks such as `useEntry`, `useApiCall`, `useT`, `useConfirmScreen`, and `useUser` to handle the editing process.\n\n`OrganizerMediaPage` is a functional component that renders a page for editing an organizer's media, including logo image and other media items. It takes in two props, `category` and `query`, which are used by the `useEntryHeader` and `useEntry` hooks to retrieve and display the organizer's information. The component also uses other hooks such as `useSaveDate`, `useMediaForm`, `useLogoForm`, `usePublish`, and `useConfirmExit` to handle the form submissions, saving, and confirmation dialogs. The component renders a `Save` button, two `StyledEntryFormContainer` components containing the logo and media forms, and other components such as `EntryFormWrapper` and `Info`.\n## Questions: \n 1. What is the purpose of the `useLogoUploadForm` hook?\n- The `useLogoUploadForm` hook is used to handle the uploading of a logo image file for an organizer entry.\n\n2. What is the difference between `mediaPristine` and `logoPristine`?\n- `mediaPristine` and `logoPristine` are both boolean values that indicate whether the media form and logo form, respectively, have been modified since they were last reset. The difference between them is that `mediaPristine` refers to the media form and `logoPristine` refers to the logo form.\n\n3. What is the purpose of the `useConfirmExit` hook?\n- The `useConfirmExit` hook is used to display a confirmation message to the user if they attempt to leave the page while there are unsaved changes in the media or logo forms. It allows the user to either stay on the page and continue editing or leave the page and discard the changes.","metadata":{"source":".autodoc/docs/markdown/components/pages/organizer/media.md"}}],["167",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/organizer/team.tsx)\n\nThe code defines a React functional component called `OrganizerTeamPage` that renders a team management page for an organizer. The component imports various helper functions and components from other files in the project. \n\nThe `useEffect`, `useMemo`, and `useState` hooks are imported from the React library. The `useApiCall` hook is imported from the `api` module, which is a custom library for making API calls. The `Category`, `CategoryEntryPage`, and `useEntry` functions are imported from the `categories` module, which is a custom library for handling different types of entries in the project. The `Save` component, `StyledEntryFormContainer`, and `EntryFormWrapper` components are imported from the `EntryForm` module, which is a custom library for rendering forms for different types of entries. The `useEntryHeader` function is imported from the `helpers` module, which contains various helper functions for rendering entry headers. The `EntryFormHook` type is imported from the `form` module, which is a custom library for handling form submissions. The `EntryFormHead`, `FormGrid`, `FormItem`, and `FormItemWidth` components are imported from the `formComponents` module, which is a custom library for rendering form components. The `TeamList` component is imported from the `Team` module, which is a custom library for rendering team-related components. The `Organizer`, `OrganizerRole`, `OrganizerRolePending`, `OrganizerShow`, `OrganizerDelete`, and `OrganizerUpdate` types are imported from the `api/types/organizer` and `api/routes/organizer` modules, which are custom libraries for handling organizer-related API calls. The `Textarea` component is imported from the `textarea` module, which is a custom library for rendering text areas. The `ParsedUrlQuery` type is imported from the `querystring` module, which is a built-in Node.js module for parsing query strings. The `Role` and `User` types are imported from the `api/types` module, which is a custom library for defining API types. The `Info` and `InfoColor` components are imported from the `info` module, which is a custom library for rendering informational components. The `useConfirmExit` and `useUserIsOwner` hooks are imported from the `lib` module, which is a custom library for handling various utility functions.\n\nThe `maxInvites` constant is defined as the maximum number of invites that can be sent at once. The `regex` constant is defined as a regular expression for validating email addresses.\n\nThe `useTeamAddForm` function is defined as a custom hook that takes an object with `category` and `query` properties as arguments. The hook returns a JSX element that renders a form for adding team members to an organizer. The form contains a text area for entering email addresses, a button for submitting the form, and an informational component for displaying hints and error messages. The hook uses the `useState` hook to manage the state of the text area and the `usePseudoUID` hook to generate unique IDs for form elements. The hook uses the `useMemo` hook to compute the validity and array of email addresses from the text area input. The hook uses the `useApiCall` and `useEntry` hooks to make API calls for updating the organizer's team members and fetching the organizer's data.\n\nThe `useTeamForm` function is defined as a custom hook that takes an object with `category` and `query` properties as arguments. The hook returns an object with `renderedForm`, `pristine`, `valid`, `reset`, and `submit` properties. The `renderedForm` property is a JSX element that renders a form for managing an organizer's team members. The form contains a `TeamList` component for displaying the current team members and a button for submitting the form. The `pristine` property is a boolean value that indicates whether the form has been modified. The `valid` property is a boolean value that indicates whether the form is valid. The `reset` property is a function that resets the form to its initial state. The `submit` property is an async function that submits the form data to the server and updates the organizer's team members. The hook uses the `useState` hook to manage the state of the team members and the `useUserIsOwner` hook to check if the current user is the owner of the organizer. The hook uses the `useMemo` hook to compute the initial state of the team members and the `useEffect` hook to update the state of the team members when the organizer's data changes. The hook uses the `useApiCall` and `useEntry` hooks to make API calls for updating the organizer's team members and fetching the organizer's data.\n\nThe `OrganizerTeamPage` component is defined as a functional component that takes an object with `category` and `query` properties as arguments. The component renders a team management page for an organizer. The page contains a header, a form for adding team members, and a form for managing team members. The component uses the `useEntryHeader`, `useEntry`, `useSaveDate`, `useUserIsOwner`, and `useConfirmExit` hooks to render the header, fetch the organizer's data, format the save date, check if the current user is the owner of the organizer, and handle form submission confirmation. The component uses the `Save` component to render a save button for the form. The component uses the `StyledEntryFormContainer` and `EntryFormWrapper` components to wrap the forms. The component uses the `useTeamAddForm` and `useTeamForm` hooks to render the forms for adding and managing team members.\n## Questions: \n 1. What is the purpose of the `useTeamAddForm` function?\n- The `useTeamAddForm` function is used to render a form for adding team members to an organizer's team.\n\n2. What is the purpose of the `useTeamForm` function?\n- The `useTeamForm` function is used to render a form for managing an organizer's team, including adding, editing, and deleting team members.\n\n3. What is the purpose of the `OrganizerTeamPage` component?\n- The `OrganizerTeamPage` component is used to display the team management functionality for an organizer, including the `useTeamAddForm` and `useTeamForm` forms, as well as a save button and confirmation message for unsaved changes.","metadata":{"source":".autodoc/docs/markdown/components/pages/organizer/team.md"}}],["168",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/sitemap/wrapper.tsx)\n\nThe code defines a React component called `SitemapContainer` that renders a sitemap for the website. The sitemap is organized into different sections, each containing a list of links. The links are generated dynamically based on the current user's permissions and the data available in the system.\n\nThe component imports several utility functions and components from other files in the project. These include functions for handling translations, routing, and API requests. The component also imports several styles from the `@emotion/styled` library.\n\nThe `SitemapContainer` component uses several hooks to retrieve data from the system. These hooks include `useLanguage`, `useT`, `useUserOrganizerLists`, `useOrganizerId`, `useCategories`, `useLocale`, `useList`, `useRouter`, and `useMemo`. These hooks are used to retrieve information about the current user, the available categories, and the data in the system.\n\nThe component then uses this data to generate a list of links for each section of the sitemap. The links are generated dynamically based on the data available in the system. For example, the component generates links to offers, locations, and organizers based on the data available in the system.\n\nThe component also includes several helper functions for generating links and handling user interactions. These functions include `dahboardLinks`, `offerLinks`, `locationLinks`, `organizerLinks`, and `toggleNestedNavigation`. These functions are used to generate links for each section of the sitemap and to handle user interactions with the sitemap.\n\nOverall, the `SitemapContainer` component is an important part of the website's navigation system. It provides users with a comprehensive view of the available content on the website and allows them to easily navigate to different sections of the site.\n## Questions: \n 1. What is the purpose of the `SitemapContainer` component?\n- The `SitemapContainer` component is responsible for rendering a sitemap of the website, including links to different pages and categories.\n\n2. What libraries and hooks are being used in this file?\n- The file is importing several libraries including `next/link`, `@emotion/styled`, and `react`. It is also using several custom hooks such as `useT`, `useLanguage`, `useLocale`, `useOrganizerId`, `useUserOrganizerLists`, `useList`, and `useRouter`.\n\n3. What is the purpose of the `offersLocationsToggled` state and how is it being used?\n- The `offersLocationsToggled` state is being used to keep track of whether or not the nested navigation for each offer or location category is currently toggled open or closed. It is being used to conditionally render the nested links and to set the focus on the first link when the nested navigation is toggled open.","metadata":{"source":".autodoc/docs/markdown/components/pages/sitemap/wrapper.md"}}],["169",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/user/SettingsHeader.tsx)\n\nThe code above defines a React functional component called `SettingsHeader`. This component is responsible for rendering the header section of the settings page in the Kulturdaten-frontend application. \n\nThe component imports several hooks and components from other files in the project. The `useUser` hook is used to retrieve the current user's information, while the `useT` and `useLocale` hooks are used for internationalization purposes. The `useActiveRoute` hook is used to determine which tab is currently active, and the `UserContext` is used to check if the user is inactive. The `EntryHeader` and `Tabs` components are also imported from other files in the project.\n\nThe `SettingsHeader` component returns an `EntryHeader` component with a title, subtitle, and tabs. The title is set to the translated string 'settings.title', while the subtitle is set to the current user's email address. The tabs are rendered using the `Tabs` component, which takes an array of link objects as a prop. Each link object has a title, href, isActive, and disabled property. The title is the text that appears on the tab, the href is the URL that the tab links to, isActive is a boolean that determines if the tab is currently active, and disabled is a boolean that determines if the tab is disabled.\n\nThe `SettingsHeader` component renders two tabs: 'Persönliche Einstellungen' and 'Entwickler:innen-Einstellungen'. The first tab links to the user settings page, while the second tab links to the developer settings page. The `isActive` property is set based on the current active route, which is determined using the `useActiveRoute` hook. The `disabled` property of the second tab is set to `userInactive`, which is a boolean value that is retrieved from the `UserContext`.\n\nOverall, the `SettingsHeader` component is a small but important part of the Kulturdaten-frontend application. It provides a header section for the settings page, which includes tabs for navigating between different settings pages. The component uses several hooks and components from other files in the project to retrieve and display the necessary information.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines a React functional component called `SettingsHeader` that renders an `EntryHeader` component with a title, subtitle, and tabs for navigating between personal and developer settings.\n\n2. What libraries or dependencies does this code use?\n   - This code imports several functions and components from other files in the project, including `useContext`, `Routes`, `useT`, `useActiveRoute`, `useLocale`, `EntryHeader`, `Tabs`, `UserContext`, and `useUser`.\n\n3. What data does this code use or manipulate?\n   - This code uses data from the `user` object returned by the `useUser` hook, as well as the `activeRoute` and `userInactive` variables returned by other hooks. It also renders a title and subtitle using translated strings from the `useT` hook.","metadata":{"source":".autodoc/docs/markdown/components/pages/user/SettingsHeader.md"}}],["170",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/user/deletion.tsx)\n\nThe code defines a React component called `UserDeletionPage` that renders a form for cancelling a user's account deletion request. The form includes a `CancelDeletionComponent` component that displays information about the user's account deletion request and a button to cancel the request. The form also includes a logout button.\n\nThe `CancelDeletionComponent` component uses several hooks to retrieve and display information about the user's account deletion request. The `useUser` hook retrieves information about the currently logged-in user, including the deletion request timestamp. The `useDate` hook formats the deletion request timestamp into a human-readable date string. The `useApiCall` hook provides a function for making API calls to the server. The `useRouter` hook provides access to the Next.js router object, which is used to navigate to other pages in the application. The `useLocale` hook retrieves the current locale of the application. The `useOrganizerId` hook retrieves the ID of the current organizer.\n\nThe `CancelDeletionComponent` component renders a `DashboardTile` component that displays information about the user's account deletion request, including the date of the request and the user's email address. The component also renders a `Button` component that, when clicked, cancels the user's account deletion request by making an API call to the server. If the API call is successful, the component updates the user's information and navigates to the dashboard page for the current organizer.\n\nThe `UserDeletionPage` component uses the `useContext` hook to retrieve information about the user's account deletion request from the `UserContext` object. If the user has not requested account deletion, the component navigates to the dashboard page for the current locale. Otherwise, the component renders the `CancelDeletionComponent` component inside an `EntryFormWrapper` component.\n\nOverall, this code provides a way for users to cancel their account deletion requests and continue using the application. It demonstrates how to use several React hooks to retrieve and display information from the server and how to navigate between pages in a Next.js application.\n## Questions: \n 1. What is the purpose of the `CancelDeletionComponent` component?\n- The `CancelDeletionComponent` component is responsible for rendering a form that allows a user to cancel their account deletion request.\n\n2. What libraries and hooks are being used in this file?\n- The file is importing and using several libraries and hooks, including `styled` from `@emotion/styled`, `useT` from `../../../lib/i18n`, `useContext`, `useEffect`, and `useMemo` from `react`, `useRouter` and `useLocale` from `next/router` and `../../../lib/routing`, respectively, and `useApiCall` and `useOrganizerId` from `../../../lib/api`.\n\n3. What happens when the user clicks the cancel deletion button?\n- When the user clicks the cancel deletion button, an API call is made to update the user's account information with an `abortDeletionRequest` flag. If the API call is successful, the user's information is mutated and the page is redirected to the dashboard after a short delay. If the API call fails, an error message is displayed.","metadata":{"source":".autodoc/docs/markdown/components/pages/user/deletion.md"}}],["171",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/user/developer.tsx)\n\nThe code defines two React functional components: `UserApiTokens` and `UserDeveloperPage`. \n\n`UserApiTokens` is a form that allows users to create and manage API tokens. It imports several components from the project's codebase, including `EntryFormHead`, `FormGrid`, `FormItem`, `Input`, `Textarea`, `Button`, `Info`, and `AppTokenList`. \n\nThe form has three input fields: `name`, `description`, and `url`. `name` is a required field that must be unique among all existing API tokens. `description` and `url` are optional fields. The form also has a submit button that is disabled until the `name` field is valid. When the form is submitted, it sends a POST request to the server to create a new API token with the specified attributes. If the request is successful, the form is reset and the list of API tokens is updated. \n\n`UserDeveloperPage` is a page that displays two components: `UserApiTokens` and a list of links to documentation. It imports `SettingsHeader`, `EntryFormWrapper`, `StyledEntryFormContainer`, `EntryFormHead`, `FormGrid`, `FormItem`, `DashboardLinkList`, and `StandardLinkType` from the project's codebase. \n\nThe `SettingsHeader` component is a header that displays the title \"Developer Settings\". The `EntryFormWrapper` component is a wrapper that applies some styles to its children. The `StyledEntryFormContainer` component is a container that applies some more styles to its children. The `EntryFormHead` component is a header that displays a title and an optional tooltip. The `FormGrid` and `FormItem` components are used to lay out the form fields. The `DashboardLinkList` component is a list of links that can be either internal or external. \n\nOverall, this code provides a user interface for creating and managing API tokens, as well as links to documentation for developers. It is part of a larger project that likely involves interacting with an API.\n## Questions: \n 1. What is the purpose of this code?\n- This code is responsible for rendering a form for creating and listing API tokens for a user.\n\n2. What libraries or frameworks are being used in this code?\n- This code is using several libraries and frameworks such as React, React hooks, and styled components.\n\n3. What is the role of the `useApiCall` hook in this code?\n- The `useApiCall` hook is used to make API calls to create and delete app tokens. It is imported from the `lib/api` module.","metadata":{"source":".autodoc/docs/markdown/components/pages/user/developer.md"}}],["172",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/pages/user/settings.tsx)\n\nThe `UserSettingsPage` component is responsible for rendering the user settings page of the Kulturdaten-frontend application. It imports various components from different files and uses them to build the page.\n\nThe `useT` hook is used to get the translation function from the i18n library. The `usePseudoUID` hook generates a unique ID for the component. The `UserContext` is used to get the `acceptedTerms` value, which is used to conditionally render the `Terms` component.\n\nThe `SettingsHeader` component is rendered at the top of the page. It contains the title of the page and a back button.\n\nThe `EntryFormWrapper` component is used to wrap the form elements. It provides some styling and layout for the form.\n\nThe `Terms` component is conditionally rendered if the user has not accepted the terms and conditions. It contains the terms and conditions text and a checkbox to accept them.\n\nThe `UserPasswordUpdate` component is used to allow the user to update their password.\n\nThe `StyledEntryFormContainer` component is used to wrap the `LocaleSwitch` and `DashboardLinkList` components. It provides some styling and layout for these components.\n\nThe `EntryFormHead` component is used to render the title of the form section. It takes a `title` prop and an `id` prop.\n\nThe `LocaleSwitch` component is used to allow the user to switch between different languages. It takes a `switchVariant` prop and a `labelledBy` prop.\n\nThe `DashboardLinkList` component is used to render a list of links. It takes a `links` prop, which is an array of objects containing the link `type`, `title`, and `href`.\n\nThe `DeleteUser` component is used to allow the user to delete their account.\n\nOverall, the `UserSettingsPage` component is an important part of the Kulturdaten-frontend application as it allows users to manage their account settings. It provides a user-friendly interface for updating passwords, accepting terms and conditions, changing languages, and accessing legal information.\n## Questions: \n 1. What is the purpose of the `UserSettingsPage` component?\n- The `UserSettingsPage` component is responsible for rendering the user settings page, which includes components for updating the user's password, accepting terms, selecting a language, and displaying legal information.\n\n2. What is the `LocaleSwitch` component used for?\n- The `LocaleSwitch` component is used to allow the user to switch between different languages on the settings page.\n\n3. What is the `DashboardLinkList` component used for?\n- The `DashboardLinkList` component is used to display a list of links related to legal information, such as legal notices, terms, and media licenses.","metadata":{"source":".autodoc/docs/markdown/components/pages/user/settings.md"}}],["173",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/placeholderfield/index.tsx)\n\nThe code above defines a React component called `PlaceholderField` that renders a label and some text in a styled container. The component takes two props: `label` and `text`, both of which are strings.\n\nThe component is built using the `styled` function from the `@emotion/styled` library to create three styled components: `StyledPlaceholderField`, `StyledPlaceholderFieldLabel`, and `StyledPlaceholderFieldText`. These components define the styles for the container, label, and text, respectively. \n\nThe `PlaceholderField` component then renders these three styled components, along with the `Label` component from another file. The `Label` component is used to wrap the `label` prop, which adds additional styling to the label text.\n\nThis component can be used throughout the project to display placeholder text and labels in a consistent and styled manner. For example, it could be used in a form to display default values for input fields. \n\nHere is an example usage of the `PlaceholderField` component:\n\n```\n<PlaceholderField label=\"Name\" text=\"John Doe\" />\n```\n\nThis would render a container with the label \"Name\" and the text \"John Doe\" inside it, styled according to the styles defined in the component.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a React component called PlaceholderField that displays a label and text in a styled container.\n\n2. What is the role of the Label component imported from '../label'?\n   The Label component is used to display the label text in the PlaceholderField component.\n\n3. What is the significance of the StyledPlaceholderField, StyledPlaceholderFieldLabel, and StyledPlaceholderFieldText components?\n   These components define the styling for the PlaceholderField component, including margin, font size, and line height.","metadata":{"source":".autodoc/docs/markdown/components/placeholderfield/index.md"}}],["174",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/select/index.tsx)\n\nThe code defines a React component called `Select` that renders a styled `select` element with various styles and options. The component takes in several props, including `children`, `id`, `value`, `onChange`, `label`, `labelPosition`, `defaultValue`, `size`, `variant`, `icon`, `ariaLabel`, `disabled`, `placeholder`, `required`, and `ariaLabelledby`. \n\nThe `Select` component uses Emotion to style the `select` element and its container. The `select` element is styled based on the `size` and `variant` props, with different styles for different sizes and variants. The `icon` prop can be used to add an icon to the left of the `select` element. The `label` prop can be used to add a label to the `select` element, with the `labelPosition` prop determining whether the label is positioned to the left or above the `select` element. \n\nThe `Select` component also handles state and events for the `select` element. If an `onChange` prop is provided, the `Select` component will call that function when the `select` element's value changes. If no `onChange` prop is provided, the `Select` component will handle state internally using the `useState` hook. \n\nOverall, the `Select` component provides a flexible and customizable way to render styled `select` elements in a React application. It can be used in various parts of the larger project to allow users to select options from a dropdown menu.\n## Questions: \n 1. What is the purpose of the `Select` component?\n- The `Select` component is a reusable React component that renders a select input with various styles and variants.\n\n2. What are the different variants available for the `Select` component?\n- The different variants available for the `Select` component are `default`, `minimal`, `formList`, and `header`.\n\n3. What is the purpose of the `valid` prop in the `Select` component?\n- The `valid` prop is used to indicate whether the select input has a valid value or not, and it affects the styling of the component. If `valid` is `false`, the component will display an error state.","metadata":{"source":".autodoc/docs/markdown/components/select/index.md"}}],["175",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/select/story.tsx)\n\nThis code defines a set of stories for the `Select` component, which is used in the larger `kulturdaten-frontend` project. The `Select` component is a form control that allows users to select from a list of options. The stories are defined using the `Storybook` library, which is a tool for developing and testing UI components in isolation.\n\nThe code defines four different stories for the `Select` component, each with a different set of props. The first story, `SelectDefaultStory`, renders three `Select` components with default props, each with a different set of options. The second story, `SelectDisabledStory`, renders two `Select` components with the `disabled` prop set to `true`. The third story, `SelectMinimalStory`, renders nine `Select` components with the `variant` prop set to `minimal`, each with a different set of options and background colors. The fourth story, `SelectBigStory`, renders three `Select` components with the `size` prop set to `big`. The fifth story, `SelectMinimalBigStory`, renders nine `Select` components with both the `variant` and `size` props set.\n\nEach `Select` component is wrapped in a `StyledTestWrapper` component, which is a custom styled component that defines a grid layout with padding and row gap. The `StyledTestWrapper` component takes two optional props, `background` and `color`, which are used to set the background color and text color of the component.\n\nThe `Select` component itself is imported from the `.` module, which is a shorthand for the `./index.tsx` file in the same directory. The `Select` component takes several props, including `id`, `label`, `icon`, `variant`, and `size`. The `id` prop is used to set the `id` attribute of the `select` element, which is used for associating the `select` element with a `label` element. The `label` prop is used to render a label element above the `select` element. The `icon` prop is used to render an icon element to the left of the `select` element. The `variant` prop is used to set the visual style of the `select` element, with `default` and `minimal` options available. The `size` prop is used to set the size of the `select` element, with `default` and `big` options available.\n\nOverall, this code provides a set of stories for the `Select` component, which can be used to test and develop the component in isolation. The stories cover a range of use cases and props, allowing developers to see how the component behaves in different scenarios.\n## Questions: \n 1. What is the purpose of the `Select` component and what props does it accept?\n- The `Select` component is used to render a dropdown select input. It accepts props such as `id`, `label`, `variant`, `size`, and `icon`.\n2. What is the purpose of the `StyledTestWrapper` component and what props does it accept?\n- The `StyledTestWrapper` component is a styled div used to wrap the `Select` components in the storybook examples. It accepts optional props for `background` and `color`.\n3. What are the different storybook examples provided for the `Select` component?\n- There are four different storybook examples provided for the `Select` component: `SelectDefaultStory`, `SelectDisabledStory`, `SelectMinimalStory`, and `SelectBigStory`. Each example showcases different combinations of props such as `variant` and `size`.","metadata":{"source":".autodoc/docs/markdown/components/select/story.md"}}],["176",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/statusbar/index.tsx)\n\nThis code defines a React component called `StatusBar` that displays a status bar with a label and a flag indicating the status of a publication. The component takes a `status` prop, which is an enum value of type `PublishedStatus` that can be either \"draft\" or \"published\". The component also takes an optional `date` prop, which is not used in this code.\n\nThe `StatusBar` component uses several styled components defined using the `styled` function from the `@emotion/styled` package. These styled components define the layout and styling of the status bar and its components. The `StyledStatusBar` component defines the overall layout of the status bar, including a border and a horizontal layout with the label on the left and the flag on the right. The `StyledStatusBarFlag` component defines the styling of the flag, including its background color and text. The `StatusBarLabel` component defines the styling of the label, and the `StyledStatusBarInfo` component defines the styling of the empty space between the label and the flag.\n\nThe `statusBarStatuses` object is a mapping of `PublishedStatus` enum values to objects containing the background color and text key for each status. This object is used by the `useStatusBarFlag` hook to determine the background color and text for the flag based on the `status` prop passed to the `StatusBar` component.\n\nThe `useStatusBarFlag` hook is a custom hook that takes a `status` argument and returns a React element representing the flag with the appropriate background color and text. The hook uses the `useT` hook from the `lib/i18n` module to translate the text key for the current language.\n\nFinally, the `StatusBar` component renders the label, empty space, and flag using the styled components defined earlier, and uses the `useStatusBarFlag` hook to render the flag with the appropriate background color and text based on the `status` prop.\n\nThis code is used in the larger project to display the status of a publication in various parts of the user interface, such as the publication detail page and the publication list page. The `StatusBar` component can be easily reused in other parts of the project by passing a different `status` prop. The `useStatusBarFlag` hook can also be reused to display the flag in other parts of the project.\n## Questions: \n 1. What is the purpose of the `StatusBar` component?\n   - The `StatusBar` component is used to display the status of a publication (either \"draft\" or \"published\") along with an associated label and flag.\n\n2. What is the `useStatusBarFlag` hook used for?\n   - The `useStatusBarFlag` hook is used to generate the flag element for the `StatusBar` component based on the publication status (either \"draft\" or \"published\").\n\n3. What is the purpose of the `statusBarStatuses` object?\n   - The `statusBarStatuses` object is used to define the background color and text key for each possible publication status (either \"draft\" or \"published\") for use in generating the flag element with the `useStatusBarFlag` hook.","metadata":{"source":".autodoc/docs/markdown/components/statusbar/index.md"}}],["177",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/statusbar/story.tsx)\n\nThe code above is a React component that renders a status bar with two different statuses: published and draft. The component is part of a larger project called Kulturdaten Frontend, which is a web application that provides information about cultural events in Berlin.\n\nThe component imports the `styled` function from the `@emotion/styled` library, which is used to create a custom styled component called `StyledTestWrapper`. This component is a `div` element that has a grid layout with one column and a padding of 1.5rem. It also has two optional props: `background` and `color`, which can be used to set the background color and text color of the component.\n\nThe component also imports the `StatusBar` component from a file located in the same directory. This component takes two props: `date` and `status`. The `date` prop is a string that represents the date and time when the event was published or drafted. The `status` prop is an enum that can have two values: `PublishedStatus.published` and `PublishedStatus.draft`.\n\nFinally, the component exports a `StatusBarStory` component that uses the `StyledTestWrapper` component to render two instances of the `StatusBar` component with different props. This component is used in a Storybook story, which is a tool for developing and testing UI components in isolation.\n\nOverall, this code provides a reusable and customizable status bar component that can be used to display the publication status of cultural events in the Kulturdaten Frontend project. The `StyledTestWrapper` component allows for easy customization of the background and text color of the status bar, while the `StatusBar` component provides the necessary functionality to display the publication status and date of the event.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a story for the Status Bar component and renders two instances of the component with different status values.\n\n2. What is the significance of the StyledTestWrapper component?\n- The StyledTestWrapper component is a styled div that provides styling for the Status Bar component and allows for customization of background and text color.\n\n3. What is the source of the PublishedStatus enum?\n- The PublishedStatus enum is imported from the '../../lib/api/types/general' module, which suggests that it is defined in a separate file and used throughout the project for defining publication status.","metadata":{"source":".autodoc/docs/markdown/components/statusbar/story.md"}}],["178",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/table/TableLink.tsx)\n\nThe code defines a styled component called `TableLink` that renders a link with a table-like appearance. The link can be either active or inactive, and can be forbidden (i.e. disabled). The component takes in several props, including `children` (the content of the link), `href` (the URL the link should navigate to), `isActive` (a boolean indicating whether the link is currently active), `onClick` (a function to be called when the link is clicked), and `forbidden` (a boolean indicating whether the link is forbidden).\n\nThe `TableLink` component is composed of two styled components: `StyledTableLink` and `StyledTableLinkText`. `StyledTableLink` is the outermost component and renders the link itself. It has several CSS properties, including a `box-shadow` that creates an inset border on the bottom of the link. If the link is active, it also adds a vertical line to the left of the link and underlines the link text. If the link is forbidden, it reduces the opacity of the link and changes the cursor to `not-allowed`.\n\n`StyledTableLinkText` is a child component of `StyledTableLink` and is responsible for rendering the link text. If the link is active, it underlines the text.\n\nThe `TableLink` component conditionally renders a `Link` component from the `next/link` library if a `href` prop is provided. This allows the link to be server-side rendered and improves performance. If no `href` prop is provided, it simply renders the `StyledTableLink` component.\n\nOverall, this code provides a reusable component for rendering links in a table-like format with various states (active, inactive, forbidden). It can be used throughout the project wherever such links are needed. An example usage of the `TableLink` component might look like this:\n\n```\n<TableLink href=\"/about\" isActive={true}>About Us</TableLink>\n```\n## Questions: \n 1. What is the purpose of the `TableLink` component?\n- The `TableLink` component is a React functional component that renders a link with customizable properties such as `href`, `isActive`, `onClick`, and `forbidden`.\n\n2. What is the significance of the `StyledTableLink` and `StyledTableLinkText` styled components?\n- The `StyledTableLink` and `StyledTableLinkText` styled components define the styles for the link and its text respectively, including hover effects, underlining, and box shadow.\n\n3. What is the purpose of the `insetBorder` function imported from `../globals/Constants`?\n- The `insetBorder` function is used to generate a CSS box shadow property with customizable parameters for top, right, bottom, and left borders. In this code, it is used to create a bottom border for the link.","metadata":{"source":".autodoc/docs/markdown/components/table/TableLink.md"}}],["179",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/table/index.tsx)\n\nThe code defines a reusable `Table` component that can be used to display tabular data. The component takes in an array of `columns` and an array of `content` as props. The `columns` array defines the column headers and their properties, such as `title`, `width`, and `sort`. The `content` array defines the rows of data to be displayed.\n\nThe `Table` component uses `styled-components` to define the styles for the table, rows, and cells. It also uses the `useMemo` hook to calculate the total number of columns based on the `width` property of each column.\n\nThe `Table` component renders the table using a combination of `div` elements and CSS grid. It also uses the `TableContext` and `TableContextProvider` components to pass down the `narrow` prop to child components.\n\nThe `Table` component also includes a `placeholder` prop that can be used to display a message when there is no data to be displayed.\n\nOverall, this code provides a flexible and reusable way to display tabular data in a consistent and customizable way. It can be used in various parts of the `kulturdaten-frontend` project to display data in a table format.\n## Questions: \n 1. What is the purpose of the `Table` component?\n- The `Table` component is used to render a table with customizable columns and content.\n\n2. What is the significance of the `TableContext` and `TableContextProvider` components?\n- The `TableContext` and `TableContextProvider` components are used to provide a context for the `Table` component, specifically to determine whether the table should be rendered in a narrow or wide format.\n\n3. What is the purpose of the `StyledCellSort` component?\n- The `StyledCellSort` component is used to render a clickable button that allows the user to sort the table by a specific column.","metadata":{"source":".autodoc/docs/markdown/components/table/index.md"}}],["180",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/table/story.tsx)\n\nThis code defines two stories for a Table component using the Storybook library. The Table component is imported from a local file, and the Storybook Story component is imported from the Storybook React package. \n\nThe first story, `TableDefaultStory`, renders a Table component with default styling and a set of columns and content. The columns are defined as an array of objects, each with a `title` property that specifies the column header text and an optional `bold` property that, if true, makes the header text bold. The `content` prop is an array of objects, each with a `contents` property that is itself an array of strings representing the cell values for that row. \n\nThe second story, `TableNarrowStory`, is identical to the first except that it adds a `narrow` prop to the Table component, which applies a narrower style to the table cells. \n\nThese stories are intended to showcase the Table component and its various styling options to developers working on the larger project. By using Storybook, developers can easily see how the component looks and behaves in different scenarios without having to navigate to different parts of the application. \n\nHere is an example of how the `TableDefaultStory` might be used in the larger project:\n\n```\nimport React from 'react';\nimport { Table } from './Table';\nimport { fetchTableData } from './api';\n\nfunction MyTableComponent() {\n  const [tableData, setTableData] = React.useState([]);\n\n  React.useEffect(() => {\n    fetchTableData().then(data => setTableData(data));\n  }, []);\n\n  return (\n    <Table\n      columns={[\n        { title: 'Name', bold: true },\n        { title: 'Age' },\n        { title: 'Location' },\n      ]}\n      content={tableData}\n    />\n  );\n}\n```\n\nIn this example, the `MyTableComponent` fetches data from an API and renders a Table component with the fetched data. The `columns` prop specifies the column headers, and the `content` prop is set to the fetched data. This component could be used in various parts of the application to display tabular data.\n## Questions: \n 1. What is the purpose of this code?\n   - This code defines two stories for a Table component using Storybook, one with default width and one with narrow width, and provides test content for the component.\n\n2. What is the format of the `columns` prop for the Table component?\n   - The `columns` prop is an array of objects, where each object represents a column and has a `title` property for the column header text and an optional `bold` property to make the header text bold.\n\n3. What is the purpose of the `narrow` prop for the Table component?\n   - The `narrow` prop is used to make the Table component narrower by reducing the padding and font size of the cells.","metadata":{"source":".autodoc/docs/markdown/components/table/story.md"}}],["181",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/tags/index.tsx)\n\nThe `Tags` component is a reusable React component that provides a user interface for selecting and displaying tags. It is part of the larger `kulturdaten-frontend` project and is located in a file on GitHub. The component is designed to be flexible and can be used in different contexts, such as in a form or as a standalone component.\n\nThe component uses several other components and libraries, such as `Autocomplete` and `TextField` from the Material UI library, `match-sorter` for filtering options, and `react-feather` for displaying icons. The component also uses several custom styled components for layout and styling.\n\nThe `Tags` component takes several props, including `options`, which is an array of tag objects, `value`, which is an array of selected tag IDs, and `onChange`, which is a callback function that is called when the selected tags change. The component also takes an optional `i18nKeys` prop, which is an object containing translation keys for various labels and messages used in the component.\n\nThe component renders a list of selected tags, an autocomplete input for selecting new tags, and a button for adding new tags. When a tag is selected, it is added to the list of selected tags and the `onChange` callback is called with the updated list of selected tag IDs. When a tag is removed from the list, the `onChange` callback is called again with the updated list of selected tag IDs.\n\nThe `Tags` component uses a reducer to manage the state of the selected tags. The reducer handles three actions: `add`, `delete`, and `init`. The `add` action adds a new tag ID to the list of selected tag IDs, the `delete` action removes a tag ID from the list of selected tag IDs, and the `init` action initializes the list of selected tag IDs with a value passed in the `value` prop.\n\nOverall, the `Tags` component provides a flexible and reusable user interface for selecting and displaying tags. It is designed to be easy to use and customize, and can be integrated into different parts of the `kulturdaten-frontend` project.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines a React component called `Tags` that allows users to add and remove tags from a list of options using an autocomplete input field.\n\n2. What external libraries or dependencies does this code use?\n- This code imports several external libraries and dependencies, including `@mui/material`, `match-sorter`, `@emotion/styled`, `@emotion/react`, and `react-feather`.\n\n3. What are the main features or functionalities of this component?\n- The `Tags` component allows users to add and remove tags from a list of options using an autocomplete input field. It also includes various styling and layout options, as well as support for internationalization and different component variants.","metadata":{"source":".autodoc/docs/markdown/components/tags/index.md"}}],["182",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/tags/story.tsx)\n\nThe code above is a React component that renders a `Tags` component with some example data. The `Tags` component is imported from a file located in the same directory, while `Language` is imported from a configuration file. The `Tags` component is a reusable component that allows users to select tags from a list of options. The component takes in three props: `value`, `onChange`, and `options`. \n\nThe `value` prop is an array of selected tags, while the `onChange` prop is a function that is called whenever the selected tags are changed. The `options` prop is an array of objects that represent the available tags. Each object has an `id`, a `type`, and a `relations` property. The `id` property is a unique identifier for the tag, while the `type` property is a string that indicates the type of the tag. The `relations` property is an object that contains information about the tag, such as its translations.\n\nThe `TagsExample` component sets the initial value of the `value` state to an empty array, and then updates it after a 100ms timeout to an array of four strings. The `Tags` component is then rendered with the `value`, `onChange`, and `options` props. The `StyledTestWrapper` component is a styled component that wraps the `Tags` component and applies some styles to it.\n\nThe `TagsDefaultStory` component is a Storybook story that renders the `TagsExample` component. Storybook is a tool for building UI components in isolation, and it allows developers to view and interact with components in different states and configurations.\n\nOverall, this code is a small part of a larger project that includes other components and functionality for managing cultural data. The `Tags` component is likely used in other parts of the project to allow users to select tags for cultural events, organizations, or other entities. The `TagsExample` component is a simple example of how the `Tags` component can be used, and the `TagsDefaultStory` component is a way to view and test the `TagsExample` component in isolation.\n## Questions: \n 1. What is the purpose of the `Tags` component and how is it used?\n   - The `Tags` component is used to display and manage a list of tags. It takes in a `value` prop representing the current list of tags and an `onChange` prop to update the list. It also accepts an `options` prop to provide a list of available tags to choose from.\n2. What is the purpose of the `StyledTestWrapper` component and how is it used?\n   - The `StyledTestWrapper` component is a styled wrapper used to display the `Tags` component in a storybook example. It takes in optional `background` and `color` props to customize the styling.\n3. What is the purpose of the `useEffect` hook in the `TagsExample` component?\n   - The `useEffect` hook is used to simulate a delay in loading the initial list of tags. It sets the initial `value` state to an empty array and then updates it to `['this', 'are', 'some', 'tags']` after a 100ms delay.","metadata":{"source":".autodoc/docs/markdown/components/tags/story.md"}}],["183",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/textarea/index.tsx)\n\nThe code defines a React component called `Textarea` that renders a textarea input field with a label, tooltip, and character count. The component takes in various props such as `id`, `value`, `onChange`, `label`, `tooltip`, `maxLength`, and `debounce`. \n\nThe `StyledTextareaContainer` and `StyledTextarea` components are defined using the `styled` function from the `@emotion/styled` library. The `StyledTextareaContainer` component is a container for the `StyledLabel` component and the `StyledTextarea` component. The `StyledTextarea` component is a styled textarea element that inherits styles from the `inputStyles` function defined in the `../input` file. \n\nThe `Textarea` component uses the `useT` hook from the `../../lib/i18n` file to get the translation function `t` for translating text. It also uses the `useState` hook to manage the `pristine`, `touched`, `internalState`, and `count` states. The `useEffect` hook is used to update the `internalState` and `count` states when the `props.value` changes. The `useDebounce` hook is used to debounce the `onChange` event if the `debounce` prop is set to `true`.\n\nThe `countAlertCall` function is used to call the `speakerFunction` from the `../pages/helpers/useSpeaker` file to speak the number of characters left when the user types in the textarea. The `speakerFunction` is a text-to-speech function that reads out the text passed to it.\n\nThe `Textarea` component renders the `Label` component with the `StyledTooltip` component if the `tooltip` prop is set. The `StyledTooltip` component renders the `Tooltip` component with the `TooltipP` component as its child if the `tooltip` prop is a string, or the `tooltip` prop itself if it is a React node. The `StyledTextarea` component renders the textarea element with the `props` passed to it, and the `StyledCharacterCount` component if the `maxLength` prop is set. The `StyledCharacterCount` component displays the character count and the maximum character limit.\n\nOverall, the `Textarea` component provides a customizable textarea input field with additional features such as a label, tooltip, and character count. It can be used in forms or other parts of the project that require user input.\n## Questions: \n 1. What is the purpose of the `Textarea` component?\n- The `Textarea` component is a React functional component that renders a textarea input field with various props for customization.\n\n2. What is the `useDebounce` hook used for?\n- The `useDebounce` hook is used to delay the execution of a function until a certain amount of time has passed without the function being called again. In this code, it is used to delay the execution of the `onChange` function until the user has stopped typing for a certain amount of time.\n\n3. What is the purpose of the `countAlertCall` function?\n- The `countAlertCall` function is used to generate an alert message that is read aloud by a text-to-speech function when the user is approaching the maximum character limit for the textarea input field. The message informs the user how many characters they have left before reaching the limit.","metadata":{"source":".autodoc/docs/markdown/components/textarea/index.md"}}],["184",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/textarea/story.tsx)\n\nThis code defines a story for a Textarea component using the Storybook library. The Textarea component is imported from another file in the same directory. The purpose of this code is to provide a visual representation of the Textarea component and its default behavior.\n\nThe code defines a styled wrapper component and a styled cell component using the Emotion library. The wrapper component is used to display the Textarea component in a grid layout with two columns. The cell component is used to define the width of the Textarea component.\n\nThe TextareaDefaultStory function is defined as a Storybook story with the title \"Textarea\". It uses the useState hook to define a state variable called \"value\" with an initial value of an empty string. The Textarea component is then rendered inside the StyledCell component with various props such as id, rows, value, onChange, placeholder, and label. The value of the Textarea component is set to the \"value\" state variable and the onChange function updates the \"value\" state variable with the new value entered by the user.\n\nThis code can be used to test and showcase the Textarea component in isolation from the rest of the project. It allows developers to see how the component looks and behaves with different props and values. It also provides a way to document the component's usage and expected behavior for other developers who may be working on the project. \n\nExample usage of the TextareaDefaultStory component in a Storybook story:\n\n```jsx\nimport { TextareaDefaultStory } from './Textarea.stories';\n\nexport default {\n  title: 'Form',\n};\n\nexport const TextareaStory = () => <TextareaDefaultStory />;\n```\n## Questions: \n 1. What is the purpose of the `StyledTestWrapper` and `StyledCell` components?\n- The `StyledTestWrapper` component is a styled container with grid layout and optional background and color props. The `StyledCell` component is a styled div with a width of 100%.\n2. What is the functionality of the `Textarea` component?\n- The `Textarea` component is a custom input component that renders a textarea element with specified rows, value, onChange function, placeholder, and label props.\n3. What is the purpose of the `TextareaDefaultStory` function?\n- The `TextareaDefaultStory` function is a Storybook story that renders the `Textarea` component with default props and state, and allows the user to input text and see the changes in real time.","metadata":{"source":".autodoc/docs/markdown/components/textarea/story.md"}}],["185",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/tooltip/TooltipContent.tsx)\n\nThe code above is a styled component that creates a tooltip paragraph. It imports the `styled` function from the `@emotion/styled` package and exports a `TooltipP` component. \n\nThe `TooltipP` component is a styled `p` element that sets the font size, line height, and font weight using CSS variables. These variables are likely defined elsewhere in the project's CSS files. \n\nThis component can be used in the larger project to create consistent and reusable tooltip paragraphs. It can be imported into other components and used like any other React component. \n\nFor example, if a tooltip is needed in a component, the `TooltipP` component can be imported and used like this:\n\n```\nimport { TooltipP } from './path/to/TooltipP';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <TooltipP>This is a tooltip paragraph.</TooltipP>\n    </div>\n  );\n};\n```\n\nThis will render a tooltip paragraph with the styles defined in the `TooltipP` component. \n\nOverall, this code demonstrates the use of styled components in the project to create reusable UI elements with consistent styles.\n## Questions: \n 1. What is the purpose of the `@emotion/styled` import?\n   - The `@emotion/styled` import is used to create styled components in React.\n\n2. What does the `TooltipP` component do?\n   - The `TooltipP` component is a styled `p` element that sets the font size, line height, and font weight using CSS variables.\n\n3. What are the values of the CSS variables used in the `TooltipP` component?\n   - The `TooltipP` component uses the `--font-size-300` and `--line-height-300` CSS variables for the font size and line height, respectively. The `--font-size-300` variable and `--line-height-300` variable values are not specified in this code snippet and would need to be found elsewhere in the codebase.","metadata":{"source":".autodoc/docs/markdown/components/tooltip/TooltipContent.md"}}],["186",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/tooltip/story.tsx)\n\nThe code defines two stories for the Tooltip component using Storybook. The Tooltip component is imported from the current directory, while TooltipP is imported from the TooltipContent file in the same directory. \n\nThe first story, TooltipStory, renders a series of StyledTestContentBox components wrapped in a StyledTestContent component, followed by a StyledH2 component that contains a Tooltip component. The Tooltip component takes two TooltipP components as children, which are displayed when the user hovers over the StyledH2 component. \n\nThe second story, TooltipWrapperStory, is similar to the first, but includes a ScrollWrapper component that wraps the StyledTestContent and StyledH2 components. The Tooltip component in this story takes a parentNodeRef prop that references the ScrollWrapper component, allowing the Tooltip to be displayed within the scrolling area. \n\nOverall, these stories demonstrate how the Tooltip component can be used in different contexts within the larger project. The Tooltip component can be used to provide additional information or context to users when they hover over certain elements, and can be customized with different content and styling. The ScrollWrapper component and parentNodeRef prop show how the Tooltip can be used within scrolling areas, which may be useful for displaying tooltips on long pages or within modal windows.\n## Questions: \n 1. What is the purpose of the Tooltip component being imported?\n- The Tooltip component is being imported to be used in the code for displaying tooltips.\n\n2. What is the purpose of the ScrollWrapper component?\n- The ScrollWrapper component is used to create a scrollable container with a maximum height of 400px and a border.\n\n3. What is the purpose of the TooltipWrapperStory component?\n- The TooltipWrapperStory component is used to demonstrate the use of the Tooltip component inside an overflow scrolling wrapper.","metadata":{"source":".autodoc/docs/markdown/components/tooltip/story.md"}}],["187",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/user/Profile.tsx)\n\nThe code above is a React functional component called `Profile`. It imports a custom hook called `useUser` from a file named `useUser.js`. The purpose of this component is to display the user's profile information in a JSON format. \n\nThe `useUser` hook is responsible for fetching the user's data from the backend and returning it to the `Profile` component. The `Profile` component then renders the user's data in a `pre` tag using the `JSON.stringify` method. The `JSON.stringify` method converts a JavaScript object into a JSON string, which is then displayed in a formatted way using the `pre` tag. \n\nThis component is likely used in the larger project to display the user's profile information on a specific page or section of the application. It can be easily integrated into other components or pages by importing and rendering it. \n\nHere is an example of how the `Profile` component can be used in another component:\n\n```\nimport React from 'react';\nimport { Profile } from './Profile';\n\nexport const Dashboard: React.FC = () => {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <Profile />\n    </div>\n  );\n};\n```\n\nIn this example, the `Profile` component is imported and rendered within a `Dashboard` component. This allows the user's profile information to be displayed on the dashboard page. \n\nOverall, the `Profile` component serves as a simple and reusable way to display the user's profile information in a formatted way.\n## Questions: \n 1. What is the purpose of the `useUser` hook imported in this file?\n   - The `useUser` hook is used to retrieve user data.\n2. What is the expected output of this code?\n   - The expected output is a JSON string representation of the user data, with indentation of 2 spaces.\n3. Is this file a standalone component or does it rely on other components?\n   - This file is a standalone component that uses the `useUser` hook from another file.","metadata":{"source":".autodoc/docs/markdown/components/user/Profile.md"}}],["188",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/user/UserContext.tsx)\n\nThe code defines a React context called `UserContext` that provides information about the currently authenticated user. It also includes a provider component called `UserContextProvider` that wraps its children with the context provider and manages the state of the user information.\n\nThe `UserContext` object contains the following properties:\n\n- `authToken`: a string representing the authentication token for the user.\n- `setAuthToken`: a function that sets the authentication token for the user.\n- `user`: an object representing the user's information.\n- `setUser`: a function that sets the user's information.\n- `isAuthenticated`: a boolean indicating whether the user is authenticated.\n- `authenticateUser`: a function that sets the `isAuthenticated` property to `true`.\n- `invalidateUser`: a function that clears the user's authentication token and information.\n- `rand`: a random number used for debugging purposes.\n- `login`: a function that logs the user in and sets the authentication token.\n- `logout`: a function that logs the user out and clears the authentication token and information.\n- `mutate`: a function that updates the user's information.\n- `acceptedTerms`: a boolean indicating whether the user has accepted the terms of service.\n- `requestedDeletion`: a boolean indicating whether the user has requested deletion of their account.\n- `userInactive`: a boolean indicating whether the user is inactive due to not accepting terms or requesting deletion.\n\nThe `UserContextProvider` component initializes the state of the `authToken`, `stateUser`, and `userIsAuthenticated` properties using the `useState` hook. It also uses the `useSWR` hook to fetch the user's information and validate their authentication token. The `useApiCall` hook is used to make API calls with the authentication token.\n\nThe component also includes several `useEffect` hooks that handle various scenarios, such as updating the user's information when the authentication token changes, logging the user out when their token is invalid, and redirecting the user to the login page if they are not authenticated and trying to access an internal page.\n\nThe `login` function sets the authentication token and redirects the user to a specified route. The `logout` function logs the user out, clears the authentication token and information, and redirects the user to the login page.\n\nThe `useAuthToken` hook is a simple utility hook that returns the authentication token from the `UserContext`.\n\nOverall, this code provides a way to manage user authentication and information in a React application. It can be used to restrict access to certain pages or features based on the user's authentication status and to display user-specific information throughout the application.\n## Questions: \n 1. What is the purpose of the `UserContext` and `UserContextProvider` components?\n- The `UserContext` component creates a context object that holds the user's authentication information and related functions, while the `UserContextProvider` component provides this context to its children and manages the user's authentication state.\n\n2. What is the purpose of the `useSWR` hook and how is it used in this code?\n- The `useSWR` hook is used to fetch data from the server and cache it locally for future use. It is used in this code to fetch the user's authentication information and validate their token.\n\n3. What is the purpose of the `login` and `logout` functions in the `UserContextProvider` component?\n- The `login` function is used to set the user's authentication token and redirect them to a specified route after successful login, while the `logout` function is used to log the user out and redirect them to the login page.","metadata":{"source":".autodoc/docs/markdown/components/user/UserContext.md"}}],["189",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/user/useUser.ts)\n\nThe code above is a module that exports two hooks: `useUser` and `useUserOrganizerLists`. These hooks are used to access user information and organizer lists in the Kulturdaten Frontend project.\n\nThe `useUser` hook returns an object with the following properties:\n\n- `user`: the current user object\n- `authToken`: the authentication token for the current user\n- `isLoggedIn`: a boolean indicating whether the user is authenticated\n- `login`: a function to log in the user\n- `logout`: a function to log out the user\n- `mutateUserInfo`: a function to update the user information\n- `isSuperuser`: a boolean indicating whether the user is a superuser\n\nThe `useUserOrganizerLists` hook returns an object with three properties:\n\n- `all`: an array of all organizers associated with the current user\n- `owner`: an array of organizers for which the current user is an owner\n- `contributor`: an array of organizers for which the current user is a contributor\n\nThe `useUser` hook uses the `useContext` and `useMemo` hooks from React to access the `UserContext` and `AdminContext` contexts, as well as the `useSetOrganizerId` hook from the `useOrganizer` module. It also uses the `getConfig` function from the `next/config` module to get the public runtime configuration.\n\nThe `useUserOrganizerLists` hook uses the `useUser` hook to get the current user object, and then uses the `useMemo` hook to filter the organizers associated with the user by owner and contributor roles.\n\nThese hooks are used throughout the Kulturdaten Frontend project to manage user authentication and access to organizer information. For example, the `useUser` hook is used in the `Header` component to display the user's name and profile picture, and the `useUserOrganizerLists` hook is used in the `OrganizerList` component to display the user's organizers.\n## Questions: \n 1. What is the purpose of the `useUser` hook?\n   - The `useUser` hook returns an object with information about the currently logged in user, including their user object, authentication token, login/logout functions, and whether they are a superuser.\n2. What is the purpose of the `useUserOrganizerLists` hook?\n   - The `useUserOrganizerLists` hook returns an object with arrays of organizers that the user owns or contributes to, as well as all organizers that the user is associated with.\n3. What is the purpose of the `publicRuntimeConfig` variable?\n   - The `publicRuntimeConfig` variable is used to access configuration values that are set at runtime, such as the name of the authentication token cookie. It is retrieved using the `getConfig` function from the `next/config` module.","metadata":{"source":".autodoc/docs/markdown/components/user/useUser.md"}}],["190",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/wrappers/AppWrapper.tsx)\n\nThe code above is a React component that serves as a wrapper for the main application. It imports the `ReactNode` type from the `react` library and the `useUser` hook from the `../user/useUser` file. \n\nThe `UseUser` component is a functional component that simply calls the `useUser` hook. This hook is responsible for fetching and managing the user data from the backend API. The `UseUser` component does not render anything, it just ensures that the `useUser` hook is called and its effects are applied.\n\nThe `AppWrapper` component is the main component exported from this file. It is also a functional component that takes in an object with two properties: `children` and `subMenuKey`. The `children` property is of type `ReactNode` and represents the child components that will be rendered inside the `AppWrapper`. The `subMenuKey` property is optional and represents the key of the sub-menu that should be displayed.\n\nThe `AppWrapper` component returns a fragment that contains the `UseUser` component and the `children` passed as props. This ensures that the `useUser` hook is called before any child components are rendered. \n\nThis component is used as a wrapper for the entire application, ensuring that the user data is fetched and available before any other components are rendered. It also provides a way to pass down the `subMenuKey` to child components, allowing them to display the correct sub-menu based on the current route.\n\nExample usage:\n\n```\nimport { AppWrapper } from './AppWrapper';\n\nconst App = () => {\n  return (\n    <AppWrapper subMenuKey=\"home\">\n      <Header />\n      <Main />\n      <Footer />\n    </AppWrapper>\n  );\n};\n```\n\nIn the example above, the `AppWrapper` component is used to wrap the entire application, passing down the `subMenuKey` prop to child components. The `Header`, `Main`, and `Footer` components will only be rendered after the `useUser` hook has fetched and processed the user data.\n## Questions: \n 1. What is the purpose of the `useUser` hook imported from `../user/useUser`?\n   - The `useUser` hook is likely used to retrieve user information or perform actions related to the user's authentication or authorization.\n\n2. What is the purpose of the `AppWrapper` component and what props does it accept?\n   - The `AppWrapper` component likely serves as a wrapper for the main content of the application and accepts a `children` prop which represents the content to be wrapped, as well as an optional `subMenuKey` prop.\n\n3. Why does the `UseUser` component return `null`?\n   - The `UseUser` component likely does not render any content itself, but instead utilizes the `useUser` hook to perform some action related to the user and then returns `null` to indicate that it does not need to render anything.","metadata":{"source":".autodoc/docs/markdown/components/wrappers/AppWrapper.md"}}],["191",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/components/wrappers/ContentWrappers.tsx)\n\nThe code above defines two styled components, `ContentWrapper` and `ContentContainer`, using the `styled` function from the `@emotion/styled` library. These components are used to structure the layout of content on a web page in the `kulturdaten-frontend` project.\n\nThe `ContentWrapper` component is a container that centers its child elements using the `justify-items` property. It also applies a CSS grid layout with 11 columns using the `contentGrid` function from the `../globals/Constants` module. This function is likely defined elsewhere in the project and returns a CSS string that sets up a grid layout with a specific number of columns and column widths. The `ContentWrapper` component is likely used to wrap the main content of a page and center it horizontally.\n\nThe `ContentContainer` component is a container that spans the full width of its parent element (`grid-column: 1 / -1`) and has a flexible height (`display: flex; flex-direction: column; align-items: stretch;`). It also applies vertical padding and a vertical gap between its child elements using the `padding` and `row-gap` properties. The `ContentContainer` component uses media queries (`mq`) to adjust its layout based on the screen size. For example, on screens larger than `Breakpoint.mid`, the `ContentContainer` component increases the vertical gap between its child elements and spans fewer columns (`grid-column: 2 / -2`). On screens larger than `Breakpoint.ultra`, the `ContentContainer` component further increases the vertical gap and spans even fewer columns (`grid-column: 3 / -3`) while also setting a maximum width for its content. The `ContentContainer` component is likely used to wrap sections of content within the `ContentWrapper` component.\n\nOverall, these styled components provide a flexible and responsive layout for the main content of a web page in the `kulturdaten-frontend` project. They can be used to structure and position different types of content, such as text, images, and videos, in a consistent and visually appealing way.\n## Questions: \n 1. What is the purpose of the `contentGrid` and `mq` functions imported from other files?\n   - The `contentGrid` function is used to set the grid template columns for the `ContentWrapper` component, while the `mq` function is used to apply media queries based on the `Breakpoint` enum from the `WindowService` module.\n2. What is the significance of the `grid-column` property in the `ContentContainer` component?\n   - The `grid-column` property is used to specify the grid column range that the `ContentContainer` component should span across. In this case, it spans across all columns using the `-1` value.\n3. What is the purpose of the `max-width` property in the `ContentContainer` component's `mq` block?\n   - The `max-width` property is used to set the maximum width of the `ContentContainer` component on screens larger than the `ultra` breakpoint. The value is set using a CSS variable `--max-content-width`.","metadata":{"source":".autodoc/docs/markdown/components/wrappers/ContentWrappers.md"}}],["192",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/api.ts)\n\nThe code snippet defines a constant variable `apiVersion` with a value of `'v1'`. This variable is likely used to specify the version of an API that the frontend application is communicating with. \n\nIn the larger project, this constant variable may be imported and used in various API requests throughout the codebase. For example, it may be used in a function that fetches data from the API:\n\n```\nimport { apiVersion } from './constants';\n\nfunction fetchData() {\n  return fetch(`https://example.com/api/${apiVersion}/data`)\n    .then(response => response.json())\n    .catch(error => console.error(error));\n}\n```\n\nBy using the `apiVersion` constant in the URL string, the function can ensure that it is communicating with the correct version of the API. \n\nOverall, this code serves as a simple way to manage the version of an API being used by the frontend application. By defining the version in a single location, it can be easily updated if necessary and ensures consistency throughout the codebase.\n## Questions: \n 1. **What API is this code referring to?** \nThis code is referring to a specific version of an API, but it is not clear which API it is. \n\n2. **Where is this `apiVersion` variable used in the project?** \nWithout further context, it is unclear where this `apiVersion` variable is used in the project. \n\n3. **What is the purpose of defining a constant for the API version?** \nDefining a constant for the API version can help ensure consistency and avoid errors when making requests to the API. It also allows for easier maintenance and updates to the API version in the future.","metadata":{"source":".autodoc/docs/markdown/config/api.md"}}],["193",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/arrival.ts)\n\nThe code defines an array of objects that represent a form category for providing information about how to get to a location. The category is called \"locationArrival\" and contains two subcategories: \"By bicycle / car\" and \"By public transportation\". Each subcategory contains a set of form fields that collect information about parking, public transport stops, and line numbers for different modes of public transport.\n\nThe form fields are defined using the \"GenericFormFieldType\" enum, which specifies the type of input that should be used for each field. The available types are \"checkboxList\" and \"input\", which respectively represent a list of checkboxes and a text input field. The form fields also have translations for different languages, which are defined using the \"Language\" enum and the \"translations\" property.\n\nThe form data is stored in an object with nested keys that correspond to the different form fields. For example, the parking options are stored under the \"services.parking\" key, and the public transport stop name is stored under the \"services.publicTransport\" key. The form data can be accessed and manipulated using JavaScript, and can be submitted to a server for processing.\n\nThis code is used in the larger project to provide a user-friendly interface for collecting information about how to get to different cultural locations. The form data is used to generate maps and directions for users, and can also be used to analyze transportation patterns and improve accessibility. The code can be extended and customized to support additional form fields and languages, and can be integrated with other parts of the project to provide a seamless user experience.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an array of objects that represent form categories and fields for a location arrival form in the kulturdaten-frontend project.\n\n2. What is the significance of the \"translations\" property in this code?\n- The \"translations\" property is used to define the names and placeholders for form fields in different languages (German and English).\n\n3. What types of form fields are included in this code?\n- This code includes checkbox lists and input fields of type \"text\" for capturing information about parking and public transportation options for a location arrival.","metadata":{"source":".autodoc/docs/markdown/config/arrival.md"}}],["194",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/dinLanguages/index.ts)\n\nThe code above is responsible for generating a list of languages used in the project, along with their translations in both German and English. The list is generated based on two separate language files, one for German and one for English, which are imported at the beginning of the file. \n\nThe `LanguageList` type is defined as an array of objects, each containing a `dinKey` and a `translation`. The `dinKey` is a unique identifier for each language, while the `translation` is the name of the language in its native tongue. \n\nThe `languageToListMap` object is defined as a mapping between each language and its corresponding list of translations. This object is used later in the code to find the English translation for each language. \n\nThe `dinLanguages` constant is defined as an array of objects, each containing a `value` and a `translations` property. The `value` property is set to the `dinKey` of each language, while the `translations` property is an array of objects, each containing an `attributes` property. The `attributes` property contains the language code and the name of the language in either German or English. \n\nThe `dinLanguages` array is generated by mapping over the `languagesDe` array, which contains the German translations for each language. For each language in the `languagesDe` array, the code checks if there is a corresponding English translation in the `languageToListMap` object. If there is, a new object is returned with the `value` property set to the `dinKey` of the language, and the `translations` property set to an array containing the German and English translations. If there is no corresponding English translation, `undefined` is returned. \n\nFinally, the `filter` method is used to remove any `undefined` values from the `dinLanguages` array. The resulting array contains an object for each language used in the project, along with its translations in both German and English. \n\nThis code is used to generate a list of languages and their translations that can be used throughout the project. It is likely that this list is used to populate language selection dropdowns and to display language names throughout the user interface.\n## Questions: \n 1. What is the purpose of the `LanguageList` type and how is it used in this code?\n   - The `LanguageList` type is a type alias for an array of objects with `dinKey` and `translation` properties. It is used as the type for the values of the `languageToListMap` object.\n2. What is the significance of the `dinLanguages` constant and how is it computed?\n   - The `dinLanguages` constant is an array of objects with `value` and `translations` properties. It is computed by mapping over the `languagesDe` array, finding the corresponding translation in the `languagesEn` array, and creating a new object with translations in both languages if a translation in English is found.\n3. What is the purpose of the `languageToListMap` object and how is it populated?\n   - The `languageToListMap` object is a mapping of `Language` enum values to arrays of `LanguageList` objects. It is populated by assigning the `languagesDe` and `languagesEn` arrays to the `de` and `en` keys, respectively.","metadata":{"source":".autodoc/docs/markdown/config/dinLanguages/index.md"}}],["195",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/locale.ts)\n\nThis code defines two enums, `Locale` and `Language`, and a constant `defaultLanguage`. \n\nThe `Locale` enum lists all the locales that are used in the app, with their values being the same as their keys. The two locales listed are `de-DE` and `en-DE`. \n\nThe `Language` enum lists the languages used in the app, with their values being the same as their keys. The two languages listed are `de` and `en`. \n\nThe `defaultLanguage` constant is set to `de`, which is the default language for the app. \n\nThese enums and constant are likely used throughout the app to handle localization and language settings. For example, the `Locale` enum may be used to determine which language-specific content to display based on the user's locale. The `Language` enum may be used to set the language of the app interface. The `defaultLanguage` constant may be used as a fallback language if the user's preferred language is not available. \n\nHere is an example of how these enums and constant may be used in code:\n\n```\nimport { Locale, Language, defaultLanguage } from './localization';\n\n// Get the user's preferred locale\nconst userLocale = navigator.language;\n\n// Determine which language-specific content to display based on the user's locale\nlet content;\nif (userLocale === Locale['de-DE']) {\n  content = {\n    title: 'Willkommen',\n    message: 'Diese Seite ist auf Deutsch.',\n  };\n} else if (userLocale === Locale['en-DE']) {\n  content = {\n    title: 'Welcome',\n    message: 'This page is in English.',\n  };\n} else {\n  // Fallback to default language if user's locale is not supported\n  content = {\n    title: 'Willkommen',\n    message: 'Diese Seite ist auf Deutsch.',\n  };\n}\n\n// Set the language of the app interface\nconst appLanguage = localStorage.getItem('appLanguage') || defaultLanguage;\n\nif (appLanguage === Language.de) {\n  // Set app interface to German\n} else if (appLanguage === Language.en) {\n  // Set app interface to English\n}\n```\n## Questions: \n 1. **What is the purpose of the `Locale` and `Language` enums?** The `Locale` enum lists all the locales used in the app, while the `Language` enum lists the languages. They are likely used for localization and internationalization purposes.\n2. **Why is the default language set to `Language.de`?** The default language is set to German (`de`) because the project is primarily targeted towards German speakers.\n3. **Are there any other language options available besides German and English?** No, the only language options available are German (`de`) and English (`en`).","metadata":{"source":".autodoc/docs/markdown/config/locale.md"}}],["196",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/locales.ts)\n\nThis file contains various constants related to language and locale settings for the kulturdaten-frontend project. \n\nThe `locales` constant is an object that maps each supported locale to its corresponding name in that language. Similarly, the `languages` constant maps each supported language to its corresponding name in that language. These constants can be used to display language and locale options to the user, or to set the default language/locale for the application.\n\nThe `contentLanguages` constant is an array of all supported content languages, while `contentLanguagesWithEasy` is an array that includes an additional \"easy\" language option. These constants can be used to filter and display content based on language settings.\n\nThe `languageTranslationKeys` constant maps each supported language (including the \"easy\" option) to its corresponding translation key. This can be used to retrieve the correct translation for a given language setting.\n\nThe `localeLanguageMap` constant maps each supported locale to its corresponding language. This can be used to determine the language setting based on the selected locale.\n\nFinally, the `dateFormatPatternMap` constant is an object that maps each supported date format (date, time, dateTime, dayDateTime) to its corresponding format string for each supported locale. This can be used to format dates and times based on the user's language and locale settings.\n\nOverall, this file provides a centralized location for language and locale-related constants that can be used throughout the kulturdaten-frontend project to ensure consistent and accurate language and date formatting.\n## Questions: \n 1. What is the purpose of the `locales` and `languages` objects?\n   - The `locales` object maps locale codes to their corresponding names in that language, while the `languages` object maps language codes to their corresponding names in that language.\n\n2. What is the difference between `contentLanguages` and `contentLanguagesWithEasy`?\n   - `contentLanguages` is an array of all the supported content languages, while `contentLanguagesWithEasy` is an array that includes an additional language code for \"easy\" German.\n\n3. What is the `dateFormatPatternMap` object used for?\n   - The `dateFormatPatternMap` object maps date format types to their corresponding format patterns for each supported locale.","metadata":{"source":".autodoc/docs/markdown/config/locales.md"}}],["197",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/routes.ts)\n\nThis file contains the routing information for the kulturdaten-frontend project. It defines all the routes present in the app as an enum called `Routes`, and provides functions for all valid routes returning relative paths. The `routes` object is a mapping of each route to its corresponding function. \n\nFor example, the `index` route is mapped to a function that takes a `locale` parameter and returns the localized path for the index page. The `dashboard` route takes a `query` and `locale` parameter and returns the localized path for the dashboard page with the organizer's name included in the path. \n\nThe `internalRoutes` array contains all the routes that are considered internal to the app and are not accessible to the public. \n\nThe `localizedRoutes` object contains the localized parts for all route paths. Each route is mapped to an object that contains the localized path for each supported locale. \n\nThe `routesLayouts` object maps each route to its corresponding layout. The `Layouts` enum contains the different layout options for the app. \n\nThis file is used throughout the project to generate links and paths for different pages and components. For example, the `routes` object is used in the `Link` component to generate links to different pages. The `routesLayouts` object is used to determine the layout for each page. \n\nOverall, this file provides a centralized location for all routing information in the app, making it easier to manage and update the routing logic.\n## Questions: \n 1. What is the purpose of the `routes` object?\n   - The `routes` object contains functions for all valid routes in the app, returning relative paths based on the provided parameters.\n2. What is the `internalRoutes` array used for?\n   - The `internalRoutes` array contains all valid routes that are considered internal to the app, and is likely used for internal routing and navigation purposes.\n3. What is the `routesLayouts` object used for?\n   - The `routesLayouts` object maps each route to a specific layout component, indicating which layout should be used for each route.","metadata":{"source":".autodoc/docs/markdown/config/routes.md"}}],["198",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/service.ts)\n\nThe code defines an array of objects that represent categories of services offered by cultural institutions. Each category contains a set of subcategories, each of which contains a set of options that can be selected by users. The options are represented as checkboxes, and each checkbox has a label that is translated into multiple languages.\n\nThe `GenericFormCategory` and `GenericFormFieldType` classes are imported from a `genericForm` module, which is not included in this code snippet. These classes likely define the structure of the form that will be generated based on the data in this file.\n\nThe `Language` enum is imported from a `locale` module, which is also not included in this code snippet. This enum likely defines the set of languages that the form can be translated into.\n\nThe `locationService` array contains a single object that represents the top-level category of services offered by cultural institutions. This object has a `children` property that contains an array of objects representing subcategories of services. Each subcategory object has a `translations` property that contains an array of objects representing the label of the subcategory in different languages. The `children` property of each subcategory object contains an array of objects representing the options that can be selected by users. Each option object has a `type` property that specifies that it is a checkbox, a `translations` property that contains an array of objects representing the label of the option in different languages, and a `data` property that contains a `key` property and an `options` property. The `key` property is a string that specifies the name of the field that will be generated for this option in the form. The `options` property is an array of objects representing the individual checkboxes that make up this option. Each checkbox object has a `value` property that specifies the value that will be submitted if the checkbox is selected, a `translations` property that contains an array of objects representing the label of the checkbox in different languages, and possibly other properties that are not used in this code snippet.\n\nThis code is likely used to generate a form that allows users to select the services offered by cultural institutions that they are interested in. The form will be generated based on the data in this file, and will include checkboxes for each option specified in the file. When the form is submitted, the values of the selected checkboxes will be sent to the server as part of the form data.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an array of form categories and fields related to location services, with translations in both German and English.\n\n2. What type of form fields are included in this code?\n- This code includes checkbox list form fields.\n\n3. What languages are supported for the translations in this code?\n- This code supports translations in both German and English.","metadata":{"source":".autodoc/docs/markdown/config/service.md"}}],["199",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/config/structure.tsx)\n\nThe code defines two functions, `useAppTitle` and `useMenuStructure`, which are used to generate the title and structure of the navigation menu for the Kulturdaten Frontend project. \n\nThe `useAppTitle` function returns the translated string for the title of the menu. It uses the `useT` hook from the `i18n` library to retrieve the translation from the translation files.\n\nThe `useMenuStructure` function returns an object that defines the structure of the navigation menu. It uses several hooks and components from the project to generate the menu items and their actions. \n\nThe function first retrieves the translation function `useT` and the current locale using the `useLocale` hook. It then retrieves the current user's information using the `useUser` hook, the current route using the `useRouter` hook, and the current organizer ID using the `useOrganizerId` hook. \n\nThe function then defines the structure of the header for the menu, which includes different menu items depending on whether the user is logged in or not. If the user is logged in, the header includes a link to the dashboard and a link to log out. If the user is not logged in, the header includes links to the login and registration pages.\n\nThe function then defines the structure of the main menu, which includes several sections for different types of content, such as offers, organizers, and locations. Each section includes a button to create new content and a list of existing content. The function uses the `routes` object to generate the links for each menu item and the `MenuItemType` enum to specify the type of each menu item.\n\nThe function also defines several sub-menus for each type of content, which include a list of items of that type. The `List` component for each sub-menu is defined in separate files.\n\nFinally, the function defines a `focusSidebar` function that is used to focus the sidebar when a menu item is clicked. This function is used in the `onClick` event for the offer and location menu items.\n\nOverall, the `useMenuStructure` function generates the structure of the navigation menu for the Kulturdaten Frontend project, using various hooks and components from the project to generate the menu items and their actions.\n## Questions: \n 1. What is the purpose of the `useMenuStructure` function?\n- The `useMenuStructure` function returns an object that defines the structure and content of the navigation menu for the application, including menu items, sections, and additional content.\n\n2. What is the purpose of the `focusSidebar` function?\n- The `focusSidebar` function is used to focus on a specific sidebar element based on the type of sidebar passed as an argument. It is called when a menu item is clicked to highlight the corresponding sidebar.\n\n3. What components are imported in this file?\n- This file imports several components from various files, including `Link`, `Button`, `ButtonLink`, `OfferList`, `OrganizerList`, `LocationList`, and `LocaleSwitch`. It also imports several functions and constants from other files, such as `useT`, `routes`, and `defaultOrganizerId`.","metadata":{"source":".autodoc/docs/markdown/config/structure.md"}}],["200",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/i18n/index.tsx)\n\nThis code exports an object called `localizations` that contains localized strings for the Kulturdaten Frontend project. The `Locale` and `Localization` types are imported from other files, and `deDE` and `enDE` are imported from two other files in the same directory. \n\nThe `localizations` object is a mapping of `Locale` keys to `Localization` values. The `Locale` type is an enum that defines the supported languages for the project, and the `Localization` type is an interface that defines the structure of the localized strings. \n\nThis code allows the Kulturdaten Frontend project to easily switch between different languages by importing the appropriate `localizations` object and using the localized strings in the UI. For example, if the user switches the language to German, the `de-DE` object will be imported and used to display all the UI strings in German. \n\nHere is an example of how this code might be used in the larger project:\n\n```typescript\nimport localizations from './localizations';\n\nfunction getLocalizedString(key: string, locale: Locale): string {\n  const localization = localizations[locale];\n  return localization[key] || '';\n}\n\nconst greeting = getLocalizedString('hello', Locale.deDE);\nconsole.log(greeting); // \"Hallo\"\n```\n\nIn this example, the `getLocalizedString` function takes a `key` and a `locale` as arguments and returns the corresponding localized string from the `localizations` object. The `greeting` variable is set to the German translation of the \"hello\" string, which is \"Hallo\". \n\nOverall, this code provides a simple and flexible way to manage localized strings in the Kulturdaten Frontend project.\n## Questions: \n 1. What is the purpose of the `Locale` and `Localization` imports?\n   - The `Locale` import is used to define the type of the keys in the `localizations` object, while the `Localization` import is used to define the type of the values in the `localizations` object.\n2. What are `deDE` and `enDE` and how are they used in this file?\n   - `deDE` and `enDE` are imports from separate files that contain localized strings for the German and English languages, respectively. They are used to populate the `localizations` object.\n3. What is the purpose of the `default` export in this file?\n   - The `default` export is the `localizations` object, which contains localized strings for multiple languages. It can be imported and used in other parts of the project.","metadata":{"source":".autodoc/docs/markdown/i18n/index.md"}}],["201",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/jest.config.ts)\n\nThis code exports an object that configures the behavior of the Jest testing framework. Jest is a popular JavaScript testing framework that is used to test JavaScript code in various environments. The configuration options in this file are used to customize the behavior of Jest when running tests for the kulturdaten-frontend project.\n\nSome of the key configuration options in this file include:\n\n- `clearMocks`: This option indicates whether mock calls and instances should be automatically cleared between every test. When set to `true`, Jest will automatically clear all mock calls and instances before running each test.\n\n- `coverageDirectory`: This option specifies the directory where Jest should output its coverage files. When running tests with Jest, code coverage information can be collected and output to this directory.\n\n- `coverageProvider`: This option indicates which provider should be used to instrument code for coverage. In this case, the `v8` provider is being used.\n\n- `setupFilesAfterEnv`: This option specifies an array of paths to modules that run some code to configure or set up the testing framework before each test. In this case, the `jest.setup.ts` file is being used.\n\n- `testEnvironment`: This option specifies the test environment that will be used for testing. In this case, the `jsdom` environment is being used.\n\nOverall, this file is an important part of the kulturdaten-frontend project's testing infrastructure. By configuring Jest with these options, developers can ensure that their tests are run consistently and that code coverage information is collected and output to the correct directory.\n## Questions: \n 1. What is the purpose of this file?\n- This file is a Jest configuration file for running tests in the project.\n\n2. What is the test environment used in this configuration?\n- The test environment used in this configuration is jsdom.\n\n3. What is the purpose of the `setupFilesAfterEnv` property?\n- The `setupFilesAfterEnv` property is used to specify a list of paths to modules that run some code to configure or set up the testing framework before each test. In this case, it points to a file called `jest.setup.ts`.","metadata":{"source":".autodoc/docs/markdown/jest.config.md"}}],["202",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/jest.setup.ts)\n\nThe code above is a configuration file for the Kulturdaten Frontend project. It imports the `setConfig` function from the `next/config` module and the `publicRuntimeConfig` object from the `next.config.js` file. \n\nThe `setConfig` function is used to set the runtime configuration for the Next.js application. It takes an object as an argument, which contains the configuration options. In this case, the `publicRuntimeConfig` object is passed as the configuration option. This allows the application to access the runtime configuration variables defined in the `next.config.js` file.\n\nThe `publicRuntimeConfig` object contains the runtime configuration variables for the application. These variables are defined in the `next.config.js` file and can be accessed throughout the application using the `publicRuntimeConfig` object. \n\nThe code also includes a Jest mock for the `usePseudoUID` function, which is defined in the `./lib/uid.ts` file. The mock function returns a string value of '111111' when called. This is useful for testing purposes, as it allows the application to use a consistent value for the `usePseudoUID` function during testing.\n\nOverall, this configuration file sets up the runtime configuration for the Kulturdaten Frontend project and provides a mock function for testing purposes. It is an important part of the project as it ensures that the application has access to the necessary configuration variables and functions.\n## Questions: \n 1. What is the purpose of the `setConfig` function from the `next/config` module?\n   - The `setConfig` function is used to set the configuration for the Next.js runtime environment.\n\n2. What is the `publicRuntimeConfig` variable and where is it defined?\n   - The `publicRuntimeConfig` variable is defined in the `next.config.js` file and contains configuration options that are accessible on the client-side.\n\n3. What is the purpose of the `jest.mock` function and what is being mocked in this code?\n   - The `jest.mock` function is used to mock a module for testing purposes. In this code, the `usePseudoUID` function from the `./lib/uid.ts` module is being mocked to always return the string `'111111'`.","metadata":{"source":".autodoc/docs/markdown/jest.setup.md"}}],["203",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/BodyLock.tsx)\n\nThe code defines a React component called `BodyLock` and a custom hook called `useBodyLock`. The purpose of these is to lock the body of the webpage in place when certain conditions are met, such as when a modal or overlay is displayed.\n\nThe `BodyLock` component takes in three props: `locked`, a boolean indicating whether the body should be locked or not; `windowScrollY`, a number representing the current scroll position of the window; and `setWindowScrollY`, a function to update the scroll position. The component uses the `useEffect` hook to update the body styles when the `locked` prop changes. If `locked` is true, the component sets a timeout to wait for a font flash workaround, then uses `requestAnimationFrame` to update the body styles to fix the position and hide the overflow. If `locked` is false, the component resets the body styles and scrolls to the previous position.\n\nThe `useBodyLock` hook takes in an array of boolean conditions and returns an object with three properties: `bodyLock`, a React element of the `BodyLock` component; `locked`, a boolean indicating whether the body is locked or not; and `windowScrollY`, a number representing the current scroll position of the window. The hook uses the `useMemo` hook to determine if any of the conditions are true, and sets `locked` accordingly. It also uses the `useState` hook to initialize `windowScrollY` to the current scroll position of the window.\n\nThis code can be used in the larger project to prevent scrolling of the body when a modal or overlay is displayed. The `useBodyLock` hook can be used to conditionally render the `BodyLock` component based on certain conditions, such as whether a modal is open or not. The `BodyLock` component can be customized with additional styles or props as needed.\n## Questions: \n 1. What is the purpose of the `BodyLock` component?\n- The `BodyLock` component is used to lock the body of the document in place when a certain condition is met, and unlock it when the condition is no longer met.\n\n2. What is the purpose of the `useBodyLock` hook?\n- The `useBodyLock` hook is used to determine whether the body should be locked or unlocked based on a set of conditions, and returns the `BodyLock` component along with the current lock status and window scroll position.\n\n3. Why is there a double `requestAnimationFrame` used in the `BodyLock` component?\n- The double `requestAnimationFrame` is used to prevent screen flash on slower (iOS) devices when locking the body, by ensuring that the changes to the body's position and overflow are applied in separate animation frames.","metadata":{"source":".autodoc/docs/markdown/lib/BodyLock.md"}}],["204",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/PreventDrop.tsx)\n\nThe code above is a React functional component called `PreventDrop`. Its purpose is to prevent the default behavior of the browser when a user drags and drops a file onto the webpage. This is achieved by adding event listeners to the `document.body` element for the `drop`, `dragenter`, and `dragover` events, and calling `preventDefault()` on the event object in the event handler. \n\nThe `useEffect` hook is used to add and remove the event listeners when the component mounts and unmounts respectively. The empty array `[]` passed as the second argument to `useEffect` ensures that the effect only runs once when the component mounts, and not on subsequent re-renders. \n\nThis component can be used in the larger project to ensure that users do not accidentally drop files onto the webpage, which may cause unexpected behavior. It can be imported and used in any other React component that needs to prevent file drops. \n\nExample usage:\n\n```\nimport React from 'react';\nimport { PreventDrop } from './PreventDrop';\n\nconst MyComponent: React.FC = () => {\n  return (\n    <div>\n      <h1>My Component</h1>\n      <PreventDrop />\n      {/* rest of component */}\n    </div>\n  );\n};\n\nexport default MyComponent;\n```\n## Questions: \n 1. What does this code do?\n   This code defines a React functional component called `PreventDrop` that prevents the default behavior of drag and drop events on the `document.body` element.\n\n2. What is the purpose of the `useEffect` hook in this code?\n   The `useEffect` hook is used to add event listeners for drag and drop events on the `document.body` element when the component mounts, and to remove those event listeners when the component unmounts.\n\n3. What is the significance of the `globalThis.DragEvent` type in this code?\n   The `globalThis.DragEvent` type is used to specify the type of the event object passed to the `dropHandler` function. It is necessary because the `DragEvent` type is not defined in the global scope of the module.","metadata":{"source":".autodoc/docs/markdown/lib/PreventDrop.md"}}],["205",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/WindowService.tsx)\n\nThe code above defines a React context and two hooks that allow for responsive design in the `https://github.com/technologiestiftung/kulturdaten-frontend` project. \n\nThe `WindowContext` is a context object that provides information about the size of the browser window. It has three properties: `innerWidth`, `innerHeight`, and `rendered`. `innerWidth` and `innerHeight` are numbers that represent the width and height of the browser window, respectively. `rendered` is a boolean that indicates whether the context has been rendered or not. \n\nThe `WindowContextProvider` is a component that wraps its children with the `WindowContext.Provider`. It sets the initial values of `innerWidth` and `innerHeight` to the current width and height of the browser window, respectively. It also sets the `--app-height` and `--app-width` CSS variables to the height and width of the browser window, respectively. Finally, it adds an event listener to the `resize` event of the window object that updates the values of `innerWidth` and `innerHeight` whenever the window is resized. \n\nThe `Breakpoint` enum defines five breakpoints that can be used to define different styles for different screen sizes. The `breakpoints` object maps each breakpoint to a number that represents the minimum width of the screen for that breakpoint. \n\nThe `useBreakpoint` hook returns the current breakpoint based on the `innerWidth` property of the `WindowContext`. It uses the `reduce` method to iterate over the `breakpoints` object and find the first breakpoint whose minimum width is less than or equal to `innerWidth`. \n\nThe `useBreakpointOrWider` hook takes a `breakpoint` argument and returns a boolean that indicates whether the screen is at least as wide as the given breakpoint. It uses the `useMemo` hook to memoize the result of the comparison between `innerWidth` and the minimum width of the given breakpoint. \n\nOverall, this code provides a way to create responsive designs in the `https://github.com/technologiestiftung/kulturdaten-frontend` project by defining breakpoints and using the `useBreakpoint` and `useBreakpointOrWider` hooks to conditionally render different styles based on the size of the browser window.\n## Questions: \n 1. What is the purpose of the `WindowContext` and `WindowContextProvider` components?\n- The `WindowContext` component creates a context object that holds information about the inner width and height of the browser window, as well as whether the component has been rendered. The `WindowContextProvider` component provides this context to its children and updates the context values when the window is resized.\n\n2. What is the purpose of the `Breakpoint` enum and `breakpoints` object?\n- The `Breakpoint` enum defines different breakpoints for the browser window width, and the `breakpoints` object maps each breakpoint to a specific pixel value. This is used to determine the current breakpoint based on the inner width of the window.\n\n3. What is the purpose of the `useBreakpoint` and `useBreakpointOrWider` hooks?\n- The `useBreakpoint` hook returns the current breakpoint based on the inner width of the window, while the `useBreakpointOrWider` hook takes a breakpoint as an argument and returns a boolean indicating whether the current breakpoint is equal to or wider than the specified breakpoint. These hooks can be used to conditionally render components based on the size of the browser window.","metadata":{"source":".autodoc/docs/markdown/lib/WindowService.md"}}],["206",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/download.ts)\n\nThe code defines a custom hook called `useDownload` that returns a function. This function takes in three arguments: `route` (string), `fileName` (string), and `onProcess` (optional function that takes in a `ProgressEvent` object). \n\nThe purpose of this hook is to download a file from a given `route` using the `js-file-downloader` library. The `fileName` argument is used to set the name of the downloaded file. The `onProcess` argument is an optional callback function that is called whenever the download progress is updated. \n\nThe hook uses other hooks and contexts to get the necessary data. The `useAuthToken` hook is used to get the authentication token of the user. The `DownloadContext` context is used to add, update, and remove download progress information. The `useT` hook is used to get the translation function for the current language. \n\nThe function returned by the hook first adds a new download progress object to the `DownloadContext` with an initial progress of 0. It then creates a new `Downloader` object from the `js-file-downloader` library with the given `route`, `fileName`, and authentication token. The `process` option of the `Downloader` object is set to update the download progress in the `DownloadContext` and call the `onProcess` callback function (if provided). \n\nAfter the `Downloader` object is created, the function updates the download progress in the `DownloadContext` again to reset the progress to 0. It then starts the download using the `start` method of the `Downloader` object. If the download is successful, the download progress is removed from the `DownloadContext` after a delay of 2 seconds. If the download fails, the download progress is updated with an error message and removed from the `DownloadContext` after a delay of 3 seconds. \n\nOverall, this hook provides a convenient way to download files with progress tracking and error handling. It can be used in other components of the project to allow users to download files. For example, it could be used in a button component that triggers the download when clicked. \n\nExample usage:\n\n```\nimport { useDownload } from '../path/to/useDownload';\n\nfunction DownloadButton() {\n  const download = useDownload();\n\n  function handleDownload() {\n    download('/api/file', 'example.pdf', (e) => {\n      console.log(`Download progress: ${e.loaded} / ${e.total}`);\n    });\n  }\n\n  return (\n    <button onClick={handleDownload}>Download</button>\n  );\n}\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code exports a custom hook called `useDownload` that takes in a route and file name, and downloads a file from the specified route using the `js-file-downloader` library. It also updates the download progress and handles errors.\n\n2. What dependencies are being used in this code?\n- This code imports `js-file-downloader`, `next/config`, `react`, and some custom modules from the project. It also uses the `DownloadContext` and `useAuthToken` hooks from the `Download` and `User` components, respectively.\n\n3. What is the role of the `DownloadContext` and `useAuthToken` hooks in this code?\n- The `DownloadContext` hook is used to add, update, and remove download items from a global download context, while the `useAuthToken` hook is used to retrieve the user's authentication token for use in the download request headers.","metadata":{"source":".autodoc/docs/markdown/lib/api/download.md"}}],["207",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/appToken/create.ts)\n\nThe code defines an interface and a factory function related to creating an app token. The purpose of this code is to provide a way to create an app token by making an API call to a specific endpoint. \n\nThe `AppTokenCreate` interface extends the `ApiCall` interface and defines the structure of the request and response objects for the API call. The request object includes the route, method, headers, and body of the API call, while the response object includes the expected status and body of the response. \n\nThe `appTokenCreateFactory` function is a factory function that returns an instance of the `AppTokenCreate` interface. It takes two arguments: a token and a query object that includes an `appToken` property. The function returns an object that includes the request and response objects for the API call. The request object includes the route, method, headers, and body of the API call, while the response object includes the expected status and body of the response. \n\nThis code is likely used in the larger project to provide a way to create an app token for authentication purposes. The `appTokenCreateFactory` function can be called with a token and an `appToken` object to create an instance of the `AppTokenCreate` interface, which can then be used to make the API call to create the app token. \n\nExample usage:\n\n```\nconst token = 'myToken';\nconst appToken = { /* app token properties */ };\nconst appTokenCreate = appTokenCreateFactory(token, { appToken });\n// appTokenCreate is now an instance of the AppTokenCreate interface\n// Use appTokenCreate to make the API call to create the app token\n```\n## Questions: \n 1. What is the purpose of the `AppToken` type?\n- The `AppToken` type is used as the type for the `body` property of the `AppTokenCreate` interface and the `query.appToken` parameter in the `appTokenCreateFactory` function. It represents the data structure of an app token.\n\n2. What is the expected HTTP response status code for the `AppTokenCreate` API call?\n- The expected HTTP response status code for the `AppTokenCreate` API call is 200, as specified in the `response` property of the `AppTokenCreate` interface.\n\n3. What is the purpose of the `appTokenCreateFactory` function?\n- The `appTokenCreateFactory` function is an implementation of the `ApiCallFactory` type that creates an instance of the `AppTokenCreate` interface with the provided `token` and `query` parameters. It returns an object with a `request` property that contains the necessary information to make a POST request to the `/appToken` API endpoint.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/appToken/create.md"}}],["208",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/appToken/delete.ts)\n\nThe code defines an interface and a factory function for making API calls to delete an app token. The app token is a type defined elsewhere in the project. \n\nThe interface, `AppTokenDelete`, extends `ApiCall` and defines the request and response types for the API call. The request type includes the route, method, headers, and body of the API call. The response type includes the expected status code and body of the response.\n\nThe factory function, `appTokenDeleteFactory`, takes a token and a query object as arguments and returns an object that conforms to the `AppTokenDelete` interface. The token is used to authenticate the API call, and the query object includes the ID of the app token to be deleted and the app token itself. The factory function constructs the request object by calling the `apiRoutes.appToken` function with the ID of the app token, setting the method to 'DELETE', setting the headers to include the token and the content type, and setting the body to the app token from the query object. The response object is left undefined, as it is not needed for this API call.\n\nThis code can be used in the larger project to delete an app token from the server. The `AppTokenDelete` interface and `appTokenDeleteFactory` function provide a standardized way to make this API call, which can be used throughout the project. Other parts of the project can import these functions and interfaces to interact with the app token API. For example, a user interface component might use `appTokenDeleteFactory` to delete an app token when the user clicks a button.\n## Questions: \n 1. What is the purpose of the `AppTokenDelete` interface?\n   - The `AppTokenDelete` interface defines the structure of an API call to delete an app token.\n2. What is the `appTokenDeleteFactory` function used for?\n   - The `appTokenDeleteFactory` function is a factory function that creates an instance of the `AppTokenDelete` interface with the provided token and query parameters.\n3. What is the purpose of the `makeBearer` function?\n   - The `makeBearer` function is used to create an authorization header value with the provided token.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/appToken/delete.md"}}],["209",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/appToken/list.ts)\n\nThe code defines an API call for retrieving a list of app tokens from a server. It exports an interface `AppTokenList` that extends `ApiCall`, which specifies the request and response format of the API call. The request object has a `route` property that is a function that returns the URL path for the API endpoint, and a `method` property that is set to `'GET'`. The `headers` property contains an `Authorization` field that is set to a bearer token generated from the `token` argument passed to the `appTokenListFactory` function, and a `Content-Type` field that is set to `'application/json'`.\n\nThe response object has a `status` property set to `200`, indicating a successful response, and a `body` property that is an object with a `meta` field containing an array of `AppToken` objects.\n\nThe `appTokenListFactory` function is an implementation of the `ApiCallFactory` interface, which takes a `token` argument and returns an `AppTokenList` object. It constructs the `request` object by calling the `apiRoutes.appToken()` function to get the URL path for the app token endpoint, and setting the `headers` field with the bearer token and content type. The `response` object is initialized with a `status` of `200` and an undefined `body`.\n\nThis code can be used in the larger project to make API calls to retrieve a list of app tokens from the server. The `appTokenListFactory` function can be called with a valid bearer token to create an `AppTokenList` object, which can then be passed to a function that sends the API request and handles the response. The `AppTokenList` interface can also be used to define the expected response format for type checking and validation.\n## Questions: \n 1. What is the purpose of the `AppTokenList` interface?\n   - The `AppTokenList` interface defines the structure of an API call that retrieves a list of app tokens.\n2. What is the `appTokenListFactory` function used for?\n   - The `appTokenListFactory` function is a factory function that creates an instance of the `AppTokenList` interface with the provided authorization token.\n3. What is the expected response format for the `AppTokenList` API call?\n   - The expected response format for the `AppTokenList` API call is a JSON object with a `meta` property that contains an array of `AppToken` objects. The HTTP status code should be 200.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/appToken/list.md"}}],["210",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/auth/info.ts)\n\nThe code defines an interface and a factory function for making API calls to retrieve user authentication information from the backend server. The `AuthInfo` interface extends the `ApiCall` interface and specifies the request and response types for the `/auth/info` endpoint. The request object includes the route, method, headers (including the authorization token), and an empty body. The response object specifies a 200 status code and a body containing a `User` object.\n\nThe `authInfoFactory` function takes an authorization token as input and returns an `AuthInfo` object with the appropriate request and response properties. The `makeBearer` function is used to format the token as a bearer token for the `Authorization` header.\n\nThis code is likely used in the larger project to authenticate users and retrieve their user information from the backend server. The `AuthInfo` interface and `authInfoFactory` function provide a standardized way to make API calls to the `/auth/info` endpoint, which can be used throughout the project. For example, other parts of the project may call `authInfoFactory` with a user's authorization token to retrieve their user information and use it to customize the user interface or restrict access to certain features.\n\nExample usage:\n\n```\nconst token = 'my-auth-token';\nconst authInfo = authInfoFactory(token);\n\n// Make API call to retrieve user information\nfetch(authInfo.request.route, {\n  method: authInfo.request.method,\n  headers: authInfo.request.headers,\n  body: authInfo.request.body,\n})\n  .then(response => response.json())\n  .then(data => {\n    // Use user information to customize UI or restrict access\n    const user = data.data;\n    // ...\n  });\n```\n## Questions: \n 1. What is the purpose of the `AuthInfo` interface?\n   - The `AuthInfo` interface defines the structure of an API call to the `/auth/info` endpoint, including the request headers and expected response body.\n2. What is the `authInfoFactory` function used for?\n   - The `authInfoFactory` function is a factory function that creates an instance of the `AuthInfo` interface with the provided authorization token and default request and response values.\n3. What other modules or types are imported in this file?\n   - This file imports several modules and types from other files, including `apiRoutes`, `makeBearer`, and `ApiCall` from the parent directory, as well as the `User` type from the `types/user` file.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/auth/info.md"}}],["211",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/auth/login.ts)\n\nThis code defines an API call for the `/auth/login` endpoint and provides a factory function to create instances of this API call. The purpose of this code is to handle user authentication by sending a POST request to the `/auth/login` endpoint with the user's email and password in the request body. \n\nThe `AuthLogin` interface defines the structure of the API call, including the request and response types. The request type specifies the HTTP method, headers, and body, while the response type specifies the expected HTTP status code and response body. In this case, the expected status code is 200, and the response body includes a token, message, and language.\n\nThe `authLoginFactory` function is a factory function that creates instances of the `AuthLogin` API call. It takes a token and a query object as arguments and returns an instance of the `AuthLogin` API call. The `query` object contains the user's email and password, which are passed as the request body in the API call.\n\nThis code is used in the larger project to handle user authentication. Other parts of the project can import the `authLoginFactory` function and use it to create instances of the `AuthLogin` API call. These instances can then be used to make requests to the `/auth/login` endpoint and authenticate users.\n\nExample usage:\n\n```\nimport { authLoginFactory } from '../path/to/authLogin';\n\nconst token = 'myToken';\nconst query = {\n  body: {\n    email: 'user@example.com',\n    password: 'password123',\n  },\n};\n\nconst authLogin = authLoginFactory(token, query);\n// authLogin is now an instance of the AuthLogin API call\n\n// Make the API call\nfetch(authLogin.request.route, {\n  method: authLogin.request.method,\n  headers: authLogin.request.headers,\n  body: JSON.stringify(authLogin.request.body),\n})\n  .then(response => {\n    if (response.status === authLogin.response.status) {\n      return response.json();\n    } else {\n      throw new Error('Invalid response');\n    }\n  })\n  .then(data => {\n    // Handle the response data\n    console.log(data);\n  })\n  .catch(error => {\n    // Handle errors\n    console.error(error);\n  });\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an interface and a factory function for making API calls to the `/auth/login` endpoint.\n\n2. What is the expected input and output of the `authLoginFactory` function?\n- The `authLoginFactory` function expects a `token` string and a `body` object with `email` and `password` properties as input, and returns an object that conforms to the `AuthLogin` interface.\n\n3. What is the significance of the `AuthLogin` interface?\n- The `AuthLogin` interface defines the structure of the request and response objects for making API calls to the `/auth/login` endpoint, including the expected HTTP method, headers, and response status and body.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/auth/login.md"}}],["212",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/auth/logout.ts)\n\nThe code defines an interface and a factory function for making an API call to log out a user from the Kulturdaten-frontend application. The interface, `AuthLogout`, extends the `ApiCall` interface and specifies the request and response types for the API call. The request type includes the route, method, headers, and body of the API call, while the response type includes the expected status code and response body.\n\nThe factory function, `authLogoutFactory`, takes a token as input and returns an instance of the `AuthLogout` interface with the request and response properties set according to the input token. The `makeBearer` function is used to generate the `Authorization` header for the request, which includes the token in the format \"Bearer <token>\".\n\nThis code can be used in the larger Kulturdaten-frontend project to handle user authentication and authorization. When a user wants to log out of the application, the `authLogoutFactory` function can be called with the user's token to generate an API call that will log the user out. The response from the API call can then be used to update the application state and UI accordingly.\n\nExample usage:\n\n```\nimport { authLogoutFactory } from './authLogout';\n\nconst token = 'abc123'; // user's token\nconst authLogout = authLogoutFactory(token); // generate API call\nfetch(authLogout.request.route, authLogout.request) // make API call\n  .then(response => {\n    if (response.status === authLogout.response.status) {\n      // handle successful logout\n    } else {\n      // handle error\n    }\n  })\n  .catch(error => {\n    // handle network error\n  });\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an interface and a factory function for making API calls to the `/auth/logout` endpoint.\n\n2. What is the expected input and output of the `authLogoutFactory` function?\n- The `authLogoutFactory` function expects a token string as input and returns an object that conforms to the `AuthLogout` interface, which specifies the request and response structure for the API call.\n\n3. What other modules or files are imported in this code?\n- This code imports several modules from a parent directory, including `apiRoutes`, `makeBearer`, `ApiCall`, `ApiRoute`, and `ApiCallFactory`.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/auth/logout.md"}}],["213",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/auth/register.ts)\n\nThis code defines an interface and a factory function for making an API call to register a new user. The interface, `AuthRegister`, specifies the structure of the request and response objects for this API call. The request object includes the route, method, headers, and body of the HTTP request, while the response object includes the expected status code and body of the HTTP response. \n\nThe factory function, `authRegisterFactory`, takes a token and a query object as arguments and returns an object that conforms to the `AuthRegister` interface. The `token` argument is a string that represents the user's authentication token, while the `query` argument is an object that includes the `body` property, which is an object that contains the user's email, password, and password confirmation. The factory function uses the `apiRoutes.authRegister()` function to generate the route for the API call, and then constructs the request object using the provided method, headers, and body. The response object is initialized with a status code of 200 and an undefined body.\n\nThis code is part of a larger project that likely includes other API calls and functionality for managing user accounts. The `authRegisterFactory` function can be used to make a POST request to the `/auth/register` endpoint of the API in order to register a new user. The returned object can then be used to make the API call and handle the response. For example:\n\n```\nconst token = 'my-auth-token';\nconst query = {\n  body: {\n    email: 'user@example.com',\n    password: 'password123',\n    passwordConfirmation: 'password123',\n  },\n};\nconst authRegister = authRegisterFactory(token, query);\nfetch(authRegister.request.route, {\n  method: authRegister.request.method,\n  headers: authRegister.request.headers,\n  body: JSON.stringify(authRegister.request.body),\n})\n  .then(response => {\n    if (response.status === authRegister.response.status) {\n      return response.json();\n    } else {\n      throw new Error('Registration failed');\n    }\n  })\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nThis code creates an `authRegister` object using the `authRegisterFactory` function, passing in a token and a query object. It then uses the `fetch` function to make the API call, passing in the route, method, headers, and body from the `authRegister` object. If the response status matches the expected status from the `authRegister` object, it parses the response body as JSON and logs it to the console. Otherwise, it throws an error.\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an interface and a factory function for making an API call to register a user.\n\n2. What is the expected input for the `authRegisterFactory` function?\n- The `authRegisterFactory` function expects a token string and a query object with a `body` property that matches the `request.body` interface defined in `AuthRegister`.\n\n3. What is the expected response format for the API call?\n- The expected response format is a 200 status code with a JSON body containing a `data` object with a `type` of \"user\" and an `attributes` object with user information, as well as a `meta` object with a message string.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/auth/register.md"}}],["214",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/auth/requestPasswordReset.ts)\n\nThis code defines an interface and a factory function for making an API call to request a password reset for a user's account. The interface, `AuthRequestPasswordReset`, specifies the structure of the request and response objects for this API call. The factory function, `authRequestPasswordResetFactory`, takes in a user token and a query object containing the user's email address, and returns an object that conforms to the `AuthRequestPasswordReset` interface.\n\nThe `AuthRequestPasswordReset` interface specifies that the API call should be a POST request to the `/auth/login` endpoint with a JSON body containing the user's email address. The response should have a status code of 200 and a JSON body with a `meta` object containing a `token` field with a bearer token string, a `message` field with a success message string, and a `language` field with a language code string.\n\nThe `authRequestPasswordResetFactory` function takes in a user token and a query object containing the user's email address. It then returns an object with a `request` field containing the API call request object, and a `response` field containing the expected response object. The `request` object specifies the endpoint, method, headers, and body of the API call, while the `response` object specifies the expected status code and structure of the response.\n\nThis code can be used in the larger project to make an API call to request a password reset for a user's account. The `authRequestPasswordResetFactory` function can be imported and called with a user token and email address to generate an object that can be passed to a function that makes the actual API call. The response from the API call can then be checked against the expected structure defined in the `AuthRequestPasswordReset` interface.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines an interface and a factory function for making an API call to request a password reset for a user's account.\n\n2. What dependencies are required for this code to work?\n   This code imports several modules from a parent directory, including `apiRoutes`, `ApiCall`, `ApiRoute`, and `ApiCallFactory`.\n\n3. What is the expected response from the API call?\n   The expected response from the API call is a 200 status code and a JSON object with a `data` property set to `null`, a `meta` property containing a `token` object with a `type` of `'bearer'` and a `token` string, a `message` string, and a `language` string.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/auth/requestPasswordReset.md"}}],["215",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/auth/resetPassword.ts)\n\nThis code defines an interface and a factory function for making API calls to the `/auth/reset-password` endpoint of the kulturdaten-frontend project. \n\nThe `AuthResetPassword` interface extends the `ApiCall` interface and specifies the request and response types for this particular API call. The request type includes the HTTP method, headers, and body, while the response type includes the expected HTTP status code and response body. In this case, the response body includes a `meta` object with a `token` property that contains a bearer token for authentication.\n\nThe `authResetPasswordFactory` function is a factory function that returns an `AuthResetPassword` object with the appropriate request and response properties. It takes two arguments: a bearer token for authentication and a query object that includes the email and signature for the password reset request. The `route` property of the request object is generated using the `apiRoutes.authResetPassword` function, which takes the email and signature as parameters and returns the appropriate API route.\n\nThis code is used in the larger kulturdaten-frontend project to handle password reset requests from users. The `authResetPasswordFactory` function is called with the appropriate parameters to generate an `AuthResetPassword` object, which is then passed to the `ApiCall` function to make the actual API call. The bearer token is used to authenticate the request, and the email and signature are used to generate the appropriate API route. The response from the API call is then handled according to the expected response type specified in the `AuthResetPassword` interface.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines an interface and a factory function for making an API call to reset a user's password.\n\n2. What is the expected input for the `authResetPasswordFactory` function?\n   The `authResetPasswordFactory` function expects a token string and a query object with a `body` property that matches the `request.body` interface defined in the `AuthResetPassword` interface.\n\n3. What is the expected output of the `authResetPasswordFactory` function?\n   The `authResetPasswordFactory` function returns an object that matches the `AuthResetPassword` interface, with the `request` object populated with the provided token and query parameters, and the `response` object initialized with a `status` of 200 and an undefined `body`.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/auth/resetPassword.md"}}],["216",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/auth/validate.ts)\n\nThe code defines an interface and a factory function for making API calls to the `/auth/validate` endpoint of the kulturdaten-frontend project. \n\nThe `AuthValidate` interface extends the `ApiCall` interface, which defines the structure of an API call. The `AuthValidate` interface specifies that the request method is `POST`, the request headers include an `Authorization` token, and the request body is `null`. The response is expected to have a status of `200` and a body that includes a `data` property set to `null` and a `meta` property that includes a `valid` boolean value.\n\nThe `authValidateFactory` function is a factory function that takes an `Authorization` token as an argument and returns an `AuthValidate` object. The `AuthValidate` object includes the request and response structures defined by the `AuthValidate` interface. The `route` property of the request is set using the `apiRoutes.authValidate()` function, which returns the URL for the `/auth/validate` endpoint. The `Authorization` header is set using the `makeBearer()` function, which takes the token as an argument and returns a string in the format `Bearer <token>`.\n\nThis code can be used to make API calls to the `/auth/validate` endpoint of the kulturdaten-frontend project. The `authValidateFactory` function can be called with an `Authorization` token to create an `AuthValidate` object, which can then be passed to the `ApiCall` function to make the API call. For example:\n\n```\nconst token = 'my-auth-token';\nconst authValidate = authValidateFactory(token);\nconst response = await ApiCall(authValidate);\nconsole.log(response);\n```\n\nThis code would make a `POST` request to the `/auth/validate` endpoint with the `Authorization` header set to `Bearer my-auth-token`. The response would be logged to the console.\n## Questions: \n 1. What is the purpose of the `AuthValidate` interface?\n- The `AuthValidate` interface defines the structure of an API call to the `/auth/validate` endpoint, including the request method, headers, and expected response.\n\n2. What is the `authValidateFactory` function used for?\n- The `authValidateFactory` function is a factory function that creates an instance of the `AuthValidate` interface with the provided token as the authorization header.\n\n3. What is the role of the `makeBearer` function?\n- The `makeBearer` function is used to create a bearer token string for the authorization header, given a token value.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/auth/validate.md"}}],["217",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/location/accessibility/update.ts)\n\nThis code defines a type and a factory function for making API calls to update the accessibility information of a location. It is part of the larger kulturdaten-frontend project and relies on other modules and types defined within the project.\n\nThe `LocationAccessibilityUpdate` type extends the `ApiCall` type and specifies the request and response formats for updating the accessibility information of a location. The request includes a route, method, headers (including an authorization token), and a body containing the new accessibility information. The response includes a status code of 200 and a body containing the updated location data and a success message.\n\nThe `locationAccessibilityUpdateFactory` function takes an authorization token and a query object containing the location ID and the new accessibility information. It returns an object conforming to the `LocationAccessibilityUpdate` type, with the request fields populated using the `apiRoutes` module to generate the appropriate URL and the `makeBearer` function to add the authorization token to the headers.\n\nThis code can be used in the larger project to update the accessibility information of a location. The `locationAccessibilityUpdateFactory` function can be called with the necessary parameters to generate an API call object, which can then be passed to a function that sends the request to the server and handles the response. The `LocationAccessibilityUpdate` type can also be used to ensure that the request and response formats are correctly defined and validated.\n## Questions: \n 1. What is the purpose of the `LocationAccessibilityUpdate` type?\n   - The `LocationAccessibilityUpdate` type is used to define the structure of an API call for updating the accessibility information of a location.\n2. What is the `locationAccessibilityUpdateFactory` function used for?\n   - The `locationAccessibilityUpdateFactory` function is used to create an instance of the `LocationAccessibilityUpdate` type with the provided token and query parameters.\n3. What is the expected response format for the `LocationAccessibilityUpdate` API call?\n   - The expected response format for the `LocationAccessibilityUpdate` API call is a 200 status code with a body containing the updated location data and a meta message indicating the success of the update.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/location/accessibility/update.md"}}],["218",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/location/create.ts)\n\nThe code defines an API call for creating a new location in the kulturdaten-frontend project. It exports an interface called `LocationCreate` which extends the `ApiCall` interface. The `LocationCreate` interface defines the request and response types for the API call. The request type includes the route, method, headers, and body of the API call. The response type includes the expected status code and body of the API call.\n\nThe code also exports a function called `locationCreateFactory` which is used to create instances of the `LocationCreate` interface. The `locationCreateFactory` function takes two arguments: a token and a query object containing the location data to be created. The function returns an instance of the `LocationCreate` interface with the request and response types populated based on the arguments passed in.\n\nThis code is used in the larger kulturdaten-frontend project to make API calls for creating new locations. The `LocationCreate` interface defines the structure of the API call, while the `locationCreateFactory` function is used to create instances of the interface with specific data. These instances can then be passed to other functions or components in the project to make the actual API call.\n\nExample usage:\n\n```\nimport { locationCreateFactory } from './locationCreate';\n\nconst token = 'my-auth-token';\nconst locationData = {\n  name: 'My Location',\n  address: '123 Main St',\n  city: 'Berlin',\n  country: 'Germany',\n};\n\nconst createLocation = locationCreateFactory(token, { entry: locationData });\n\n// make the API call using the createLocation object\n```\n## Questions: \n 1. What is the purpose of this code?\n   This code defines an interface and a factory function for creating an API call to create a location using the Kulturdaten API.\n\n2. What types of data are being passed in the request and response objects?\n   The request object includes a route, method, headers (including an authorization token and content type), and a body containing a CreateLocation object. The response object includes a status code of 200 and a body containing a Location object.\n\n3. What other modules or files are being imported in this code?\n   This code imports several modules and types from the parent directory, including apiRoutes, makeBearer, ApiCall, ApiRoute, and ApiCallFactory. It also imports the Location and CreateLocation types from a types/location file.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/location/create.md"}}],["219",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/location/delete.ts)\n\nThe code defines an interface and a factory function for making API calls to delete a location. It imports several modules from the project's codebase, including `apiRoutes`, `makeBearer`, `ApiCall`, and `ApiRoute`. It also imports the `Location` type from the `types/location` module.\n\nThe `LocationDelete` interface extends the `ApiCall` interface and defines the shape of the request and response objects for a location deletion API call. The request object includes a `route` property that is generated using the `apiRoutes.locationDelete` function, which takes an `id` parameter and returns an `ApiRoute` object. The request also includes a `method` property set to `'DELETE'`, a `headers` object with an `Authorization` property set to a token generated using the `makeBearer` function, and a `body` property set to a `Location` object or `null`.\n\nThe response object includes a `status` property set to `200` and a `body` property with a `data` property set to `null` and a `meta` property with a `message` property set to `'Location deleted successfully'`.\n\nThe `locationDeleteFactory` function takes a `token` parameter and a `query` parameter with an `id` property and an `entry` property set to a `Location` object. It returns an object that conforms to the `LocationDelete` interface, with the `request` object populated using the `apiRoutes.locationDelete` function and the `headers` object populated using the `makeBearer` function. The `body` property is set to the `entry` object passed in the `query` parameter.\n\nThis code can be used in the larger project to make API calls to delete a location. The `locationDeleteFactory` function can be called with a token and a query object containing the ID of the location to be deleted and a `Location` object representing the location to be deleted. The resulting object can then be passed to a function that makes the API call and handles the response.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines an interface and a factory function for making API calls to delete a location using a DELETE request with authorization headers and a JSON body.\n\n2. What dependencies are required for this code to work?\n   This code imports several modules from the parent directory, including `apiRoutes`, `makeBearer`, `ApiCall`, and `ApiRoute`, as well as a `Location` type from a `types` directory.\n\n3. What is the expected response from the API call made by `locationDeleteFactory`?\n   The expected response is a 200 status code with a JSON body containing a `data` property set to `null` and a `meta` property with a `message` property set to `'Location deleted successfully'`.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/location/delete.md"}}],["220",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/location/list.ts)\n\nThe code defines an API call to retrieve a list of locations from a server. It exports an interface `LocationList` that extends `ApiCall`, which defines the structure of the request and response of the API call. The request has a `route` property that is a function call to `apiRoutes.locationList(query)`, which generates the URL for the API endpoint with the given query parameters. The request also has a `method` property set to `'GET'` and an `Authorization` header with a bearer token generated from the `makeBearer` function. The response has a `status` property set to `200` and a `body` property that is an array of `Location` objects.\n\nThe code also exports a function `locationListFactory` that takes a bearer token and query parameters as arguments and returns an instance of `LocationList`. This function is a factory function that generates instances of `LocationList` with the given parameters. This allows for easy creation of API calls with different query parameters and bearer tokens.\n\nThis code is part of a larger project that likely includes other API calls and components that use these API calls to retrieve and display data. The `LocationList` interface and `locationListFactory` function can be used by other components to retrieve a list of locations from the server and display them to the user. For example, a component that displays a map of locations could use this API call to retrieve the list of locations and display them on the map. The `locationListFactory` function can be called with different query parameters to retrieve different subsets of the location data, such as locations within a certain radius or locations with a certain type of event.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines an interface and a factory function for making API calls to retrieve a list of locations.\n\n2. What dependencies are being imported?\n   The code imports `ParsedUrlQuery` from the built-in `node:querystring` module, as well as several functions and types from other modules within the project.\n\n3. What is the expected format of the API response?\n   The API response is expected to have a status code of 200 and a body containing an object with a `data` property, which is an array of `Location` objects.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/location/list.md"}}],["221",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/location/service/update.ts)\n\nThe code defines a type and a factory function for making an API call to update a service associated with a location. The `LocationServiceUpdate` type extends the `ApiCall` type and specifies the request and response formats for the API call. The request includes the route, method, headers, and body of the call, while the response includes the expected status and body formats.\n\nThe `locationServiceUpdateFactory` function takes a token and a query object as arguments and returns an instance of the `LocationServiceUpdate` type. The token is used to authenticate the API call, while the query object specifies the ID of the location service to update and the new service data to replace the existing data.\n\nThis code is part of a larger project for managing cultural data, specifically for updating information about cultural locations and services. The `LocationServiceUpdate` type and `locationServiceUpdateFactory` function are likely used in conjunction with other API calls and data structures to provide a complete set of CRUD (create, read, update, delete) operations for managing cultural data. For example, the `apiRoutes` and `makeBearer` functions are likely used to construct and authenticate other API calls, while the `Service` and `Location` types are likely used to define the data structures for cultural services and locations. \n\nHere is an example of how the `locationServiceUpdateFactory` function might be used in a larger context:\n\n```\nimport { locationServiceUpdateFactory } from './locationServiceUpdate';\n\nconst token = 'my-auth-token';\nconst locationServiceId = '123';\nconst updatedService = {\n  name: 'New Service Name',\n  description: 'Updated service description',\n  // other fields...\n};\n\nconst locationServiceUpdate = locationServiceUpdateFactory(token, {\n  id: locationServiceId,\n  entry: updatedService,\n});\n\n// Make the API call to update the location service\nfetch(locationServiceUpdate.request.route, {\n  method: locationServiceUpdate.request.method,\n  headers: locationServiceUpdate.request.headers,\n  body: JSON.stringify(locationServiceUpdate.request.body),\n})\n  .then((response) => {\n    if (response.status === locationServiceUpdate.response.status) {\n      return response.json();\n    } else {\n      throw new Error('Location service update failed');\n    }\n  })\n  .then((data) => {\n    console.log(data.meta.message); // \"Location Service updated successfully\"\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n\nThis example creates an instance of the `LocationServiceUpdate` type using the `locationServiceUpdateFactory` function, passing in an authentication token and a query object with the ID of the location service to update and the new service data. It then makes an API call using the `fetch` function, passing in the request route, method, headers, and body from the `locationServiceUpdate` object. If the API call is successful, it logs the success message to the console. If there is an error, it logs the error to the console.\n## Questions: \n 1. What is the purpose of the `LocationServiceUpdate` type?\n   - The `LocationServiceUpdate` type is used to define the structure of an API call for updating a location service, including the request and response formats.\n2. What is the `locationServiceUpdateFactory` function used for?\n   - The `locationServiceUpdateFactory` function is used to create an instance of the `LocationServiceUpdate` type with specific parameters, such as the authorization token and the ID and entry of the location service to be updated.\n3. What other modules or types are imported in this file?\n   - This file imports the `apiRoutes`, `makeBearer`, `ApiCall`, `ApiRoute`, and `Service` modules/types from other files in the project.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/location/service/update.md"}}],["222",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/location/show.ts)\n\nThe code defines an interface and a factory function related to making an API call to retrieve information about a location. The interface, called `LocationShow`, extends the `ApiCall` interface and specifies the request and response types for the API call. The request type includes the route, method, and authorization header for the call, while the response type includes the expected status code and response body.\n\nThe factory function, called `locationShowFactory`, takes in a token and a query object containing an ID for the location. It returns an object that conforms to the `LocationShow` interface, with the request object populated with the appropriate route, method, and authorization header based on the input token and query ID.\n\nThis code is likely used in the larger project to make API calls to retrieve information about specific locations. The `LocationShow` interface and `locationShowFactory` function provide a standardized way to define and create these API calls, making it easier to manage and maintain the codebase. Other parts of the project can use these functions to retrieve location information as needed.\n\nExample usage:\n\n```\nconst token = 'my-auth-token';\nconst locationId = '123';\n\nconst locationShow = locationShowFactory(token, { id: locationId });\n\n// Make the API call using the request object\nfetch(locationShow.request.route, {\n  method: locationShow.request.method,\n  headers: {\n    Authorization: locationShow.request.headers.Authorization,\n  },\n})\n  .then((response) => {\n    if (response.status === locationShow.response.status) {\n      return response.json();\n    } else {\n      throw new Error('Unexpected response status');\n    }\n  })\n  .then((data) => {\n    console.log(data);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n## Questions: \n 1. What is the purpose of the `LocationShow` interface?\n   - The `LocationShow` interface defines the structure of an API call to retrieve information about a location.\n2. What is the `locationShowFactory` function used for?\n   - The `locationShowFactory` function creates an instance of the `LocationShow` interface with the provided token and query parameters.\n3. What is the significance of the `makeBearer` function?\n   - The `makeBearer` function generates a bearer token for authentication purposes, which is used in the `Authorization` header of the API request.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/location/show.md"}}],["223",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/location/update.ts)\n\nThe code defines a type and a factory function for making API calls to update a location in the kulturdaten-frontend project. The `LocationUpdate` type extends the `ApiCall` type and specifies the request and response formats for the API call. The request includes the route, method, headers (including an authorization token and content type), and body (the updated location data). The response includes a status code of 200 and a body with the updated location data and a success message.\n\nThe `locationUpdateFactory` function takes an authorization token and a query object with an ID and updated location data as arguments, and returns an object that conforms to the `LocationUpdate` type. The returned object includes the request and response formats for the API call, with the authorization token and query data passed in as arguments.\n\nThis code can be used to update a location in the kulturdaten-frontend project by making an API call to the `/auth/info` endpoint with a PATCH method and the updated location data in the request body. The `locationUpdateFactory` function provides a convenient way to generate the necessary request and response formats for this API call, with the authorization token and query data passed in as arguments. This code is likely used in conjunction with other code in the project to provide a user interface for updating location data.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a type and a factory function for making API calls to update a location resource.\n\n2. What dependencies does this code have?\n   This code imports several modules from the parent directory, including `apiRoutes`, `makeBearer`, `ApiCall`, and `ApiRoute`, as well as a type called `Location`.\n\n3. What is the expected input and output of the `locationUpdateFactory` function?\n   The `locationUpdateFactory` function takes a token and a query object as input, and returns an object conforming to the `LocationUpdate` type. The `LocationUpdate` type specifies the expected request and response formats for an API call to update a location resource.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/location/update.md"}}],["224",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/media/delete.ts)\n\nThe code defines an interface and a factory function for making API calls to delete media from a server. The interface, `MediaDelete`, extends the `ApiCall` interface and specifies the request and response types for the API call. The request type includes the route, method, headers, and body of the API call, while the response type includes the expected status code and response body.\n\nThe factory function, `mediaDeleteFactory`, takes a token and a query object as arguments and returns an object that conforms to the `MediaDelete` interface. The token is used to authenticate the API call, while the query object specifies the ID of the media to be deleted and its data. The factory function constructs the request object by calling the `apiRoutes.mediaDelete` function with the ID of the media to be deleted, setting the method to 'DELETE', and setting the headers to include the token and the content type. The body of the request is set to the data of the media to be deleted, if it exists. The response object is set to expect a 200 status code and an undefined response body.\n\nThis code is part of a larger project that likely includes other API calls and functionality for managing media data. The `mediaDeleteFactory` function can be used to make API calls to delete media from the server, and can be called from other parts of the project that need to delete media. The `MediaDelete` interface provides a type-safe way to define the request and response types for the API call, which can help prevent errors and improve code readability. Overall, this code helps to provide a structured and reusable way to delete media data from the server.\n## Questions: \n 1. What is the purpose of the `MediaDelete` interface?\n- The `MediaDelete` interface defines the structure of an API call for deleting media, including the request and response formats.\n\n2. What is the `mediaDeleteFactory` function used for?\n- The `mediaDeleteFactory` function creates an instance of the `MediaDelete` interface with the provided token and query parameters, which can then be used to make an API call to delete media.\n\n3. What is the role of the `makeBearer` function?\n- The `makeBearer` function is used to generate an authorization header value for the API call, using the provided token.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/media/delete.md"}}],["225",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/media/show.ts)\n\nThe code defines an interface and a factory function for making API calls to retrieve information about a specific media item. The `MediaShow` interface extends the `ApiCall` interface, which defines the structure of an API call. The `MediaShow` interface specifies that the API call should use the HTTP GET method and include an authorization header with a bearer token. The response is expected to have a status code of 200 and a body containing a `Media` object.\n\nThe `mediaShowFactory` function takes a bearer token and a query object with an `id` property as arguments. It returns an object that conforms to the `MediaShow` interface. The `route` property of the `request` object is set using the `apiRoutes.mediaShow` function, which generates the URL for the media item API endpoint using the `id` from the query object. The `Authorization` header is set using the `makeBearer` function, which formats the token as a bearer token. The `response` object has a default value of `undefined` for the `body` property.\n\nThis code can be used in the larger project to make API calls to retrieve information about a specific media item. The `mediaShowFactory` function can be called with a bearer token and an `id` to generate an object that can be passed to the `fetch` function or another HTTP client to make the API call. The response can then be parsed and used to display information about the media item on the frontend.\n## Questions: \n 1. What is the purpose of the `MediaShow` interface?\n   - The `MediaShow` interface defines the structure of an API call to retrieve information about a specific media item.\n2. What is the `mediaShowFactory` function used for?\n   - The `mediaShowFactory` function creates an instance of the `MediaShow` interface with the provided token and query parameters.\n3. What is the `Authorization` header used for in this code?\n   - The `Authorization` header is used to authenticate the API call with a bearer token generated from the provided token parameter.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/media/show.md"}}],["226",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/media/update.ts)\n\nThe code defines a type and a factory function related to updating media information in the Kulturdaten-frontend project. The `MediaUpdate` type is an `ApiCall` type that specifies the request and response structure for updating media. The `mediaUpdateFactory` function creates an instance of `MediaUpdate` by taking a token and a query object as input parameters. The token is used to authenticate the request, and the query object contains the media ID and updated media information.\n\nThe `MediaUpdate` type has a `request` property that specifies the route, method, headers, and body of the HTTP request. The route is generated using the `apiRoutes.mediaUpdate` function, which takes the media ID as a parameter and returns a route object. The method is set to `PATCH`, which is used to update an existing resource. The headers include the authorization token and the content type of the request body, which is set to JSON. The body of the request contains the updated media information.\n\nThe `MediaUpdate` type also has a `response` property that specifies the expected HTTP response status and body. The status is set to `200`, which indicates a successful response, and the body is set to the updated media information.\n\nThe `mediaUpdateFactory` function takes the token and query object as input parameters and returns an instance of `MediaUpdate`. The token is used to generate the authorization header, and the query object contains the media ID and updated media information. The `apiRoutes.mediaUpdate` function is used to generate the route object, and the `makeBearer` function is used to generate the authorization header value.\n\nThis code is used to update media information in the Kulturdaten-frontend project. The `MediaUpdate` type and `mediaUpdateFactory` function provide a standardized way of defining and creating HTTP requests for updating media. Other parts of the project can use these functions to update media information without having to manually construct HTTP requests.\n## Questions: \n 1. What is the purpose of the `MediaUpdate` type and how is it used?\n- The `MediaUpdate` type is used to define the structure of an API call for updating media information. It includes the request route, method, headers, and body, as well as the expected response status and body.\n\n2. What is the `mediaUpdateFactory` function and how does it work?\n- The `mediaUpdateFactory` function is a factory function that creates an instance of the `MediaUpdate` type with the provided token and query parameters. It constructs the request object with the appropriate route, method, headers, and body, and sets the expected response status and body to default values.\n\n3. What other modules or types are imported in this file and how are they used?\n- The file imports `apiRoutes`, `makeBearer`, and `ApiCall` from the parent directory, as well as the `Media` type from the `types/media` module. These imports are used to construct the request object and define the `MediaUpdate` type.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/media/update.md"}}],["227",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/mediaLicense/list.ts)\n\nThe code defines an API call for retrieving a list of media licenses from the backend server. It exports an interface `MediaLicenseList` that extends `ApiCall`, which specifies the request and response types of the API call. The request type includes the route, method, and authorization header, while the response type includes the expected status code and response body.\n\nThe `mediaLicenseListFactory` function is also exported, which is a factory function that creates an instance of `MediaLicenseList` with the given authorization token. It returns an object with the request and response properties that conform to the `MediaLicenseList` interface.\n\nThis code is part of the larger project for the frontend of a cultural data platform. It is used to make API calls to the backend server to retrieve data about media licenses. The `MediaLicenseList` interface and `mediaLicenseListFactory` function can be imported and used in other parts of the project to fetch and handle media license data.\n\nExample usage:\n\n```typescript\nimport { mediaLicenseListFactory } from './path/to/mediaLicenseList';\n\nconst token = 'my-auth-token';\nconst mediaLicenseList = mediaLicenseListFactory(token);\n\n// Make the API call and handle the response\nfetch(mediaLicenseList.request.route, {\n  method: mediaLicenseList.request.method,\n  headers: mediaLicenseList.request.headers,\n})\n  .then((res) => {\n    if (res.status === mediaLicenseList.response.status) {\n      return res.json();\n    } else {\n      throw new Error('Failed to fetch media licenses');\n    }\n  })\n  .then((data) => {\n    console.log(data); // { data: MediaLicense[] }\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an interface and a factory function for making API calls to retrieve a list of media licenses.\n\n2. What dependencies does this code have?\n- This code imports several modules from the parent directory, including `apiRoutes`, `ApiCall`, `ApiRoute`, `ApiCallFactory`, and `makeBearer`. It also imports the `MediaLicense` type from a types file.\n\n3. What is the expected response format from the API call?\n- The API call is expected to return a 200 status code and a response body containing an array of `MediaLicense` objects under the `data` key.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/mediaLicense/list.md"}}],["228",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/audience/update.ts)\n\nThe code defines a type `OfferAudienceUpdate` which represents an API call to update the audience of an offer. It takes in an `Audience` object as the request body and returns an `Offer` object with a success message in the response body. \n\nThe `offerAudienceUpdateFactory` function is a factory function that returns an instance of `OfferAudienceUpdate`. It takes in a `token` and a `query` object containing an `id` and an `entry` object of type `Audience`. The `token` is used to authenticate the API call and the `query` object is used to construct the request URL and body.\n\nThis code is part of the larger `kulturdaten-frontend` project and is used to update the audience of an offer. It can be used by other parts of the project that need to update the audience of an offer. For example, a form component that allows users to update the audience of an offer can use this code to make the API call to update the offer.\n\nExample usage:\n\n```\nconst token = 'some-auth-token';\nconst query = {\n  id: 'some-offer-id',\n  entry: {\n    ageRange: [18, 30],\n    gender: 'male',\n    language: 'en',\n  },\n};\n\nconst offerAudienceUpdate = offerAudienceUpdateFactory(token, query);\n\n// Make API call using offerAudienceUpdate.request\n```\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a type and a factory function for making API calls to update the audience of an offer in a web application called Kulturdaten Frontend.\n\n2. What dependencies does this code have?\n   This code imports several modules from parent directories, including `apiRoutes`, `makeBearer`, `ApiCall`, and `ApiRoute`, as well as two types, `Audience` and `Offer`.\n\n3. What is the expected input and output of the `offerAudienceUpdateFactory` function?\n   The `offerAudienceUpdateFactory` function takes a token and a query object as arguments and returns an object that conforms to the `OfferAudienceUpdate` type. The query object should have an `id` property and an `entry` property that is an `Audience` type. The response body of the resulting object should be `undefined`, and the status should be 200.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/audience/update.md"}}],["229",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/create.ts)\n\nThe code defines an interface and a factory function related to creating an offer in the kulturdaten-frontend project. The OfferCreate interface extends the ApiCall interface and specifies the request and response types for creating an offer. The request type includes the route, method, headers, and body of the API call, while the response type includes the expected status and body of the API response.\n\nThe offerCreateFactory function is a factory function that returns an instance of the OfferCreate interface. It takes in a token and a query object containing the entry for the offer to be created. The function then returns an object that conforms to the OfferCreate interface, with the request object containing the appropriate route, method, headers, and body for the API call, and the response object containing the expected status and body of the API response.\n\nThis code is part of the larger kulturdaten-frontend project and is used to create offers within the system. The offerCreateFactory function can be used by other parts of the project to create new offers by passing in the necessary token and query parameters. The OfferCreate interface provides a clear definition of the expected request and response types for creating an offer, making it easier for developers to understand and use this functionality within the project.\n\nExample usage of the offerCreateFactory function:\n\n```\nconst token = 'my-auth-token';\nconst newOffer = {\n  title: 'My New Offer',\n  description: 'This is a new offer created via the API',\n  // other properties of the offer\n};\n\nconst offerCreateCall = offerCreateFactory(token, { entry: newOffer });\n// offerCreateCall is now an instance of the OfferCreate interface\n\n// Make the API call using the request object from offerCreateCall\nfetch(offerCreateCall.request.route, {\n  method: offerCreateCall.request.method,\n  headers: offerCreateCall.request.headers,\n  body: JSON.stringify(offerCreateCall.request.body),\n})\n  .then(response => {\n    if (response.status === offerCreateCall.response.status) {\n      return response.json();\n    } else {\n      throw new Error('Unexpected response status');\n    }\n  })\n  .then(data => {\n    // data is the response body from the API call\n    console.log('New offer created:', data);\n  })\n  .catch(error => {\n    console.error('Error creating new offer:', error);\n  });\n```\n## Questions: \n 1. What is the purpose of this code?\n   This code defines an interface and a factory function for making API calls to create an offer in a web application.\n\n2. What types are being used in this code?\n   This code imports and uses several types from other files, including `ApiCall`, `ApiRoute`, `ApiCallFactory`, `Offer`, and `CreateOffer`.\n\n3. How is the authorization token being passed to the API call?\n   The authorization token is being passed as an argument to the `offerCreateFactory` function and is used to generate the `Authorization` header in the API call's request object.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/create.md"}}],["230",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/date/create.ts)\n\nThe code defines an API call for creating an offer date and provides a factory function for creating instances of this API call. The API call is defined as an interface called `OfferDateCreate` which extends another interface called `ApiCall`. The `OfferDateCreate` interface specifies the request and response types for the API call. \n\nThe request type specifies the HTTP method, headers, and body for the API call. The `route` property of the request type is generated using the `apiRoutes.offerDateCreate` function, which takes an object with an `offerId` property and returns a URL string for creating an offer date for the specified offer. The `Authorization` header is set using a token passed to the factory function, and the `Content-Type` header is set to `application/json`. The `body` property of the request type is set to the `date` property of the `query` object passed to the factory function.\n\nThe response type specifies the expected HTTP status code and response body for the API call. In this case, the expected status code is 200 and the response body is the same as the request body.\n\nThe factory function, `offerDateCreateFactory`, takes a token and a `query` object as arguments and returns an instance of the `OfferDateCreate` interface. The `query` object should have an `offerId` property and a `date` property, which is the data for the offer date to be created. The `route` property of the request type is generated using the `offerId` property of the `query` object. The `Authorization` header is set using the `token` argument, and the `body` property is set using the `date` property of the `query` object.\n\nThis code is part of a larger project for managing cultural data. It provides a way to create an offer date for a specific offer using an API call. The factory function allows for easy creation of instances of the API call with the necessary parameters. This code can be used in conjunction with other API calls and functionality in the project to manage cultural data.\n## Questions: \n 1. What is the purpose of the `OfferDate` type?\n   - The `OfferDate` type is used to define the shape of the data that is sent and received in the API call.\n2. What is the `offerDateCreateFactory` function used for?\n   - The `offerDateCreateFactory` function is a factory function that creates an instance of the `OfferDateCreate` interface with the provided token and query parameters.\n3. What is the expected response status and body for the `OfferDateCreate` API call?\n   - The expected response status is `200` and the expected response body is the same as the data sent in the request body.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/date/create.md"}}],["231",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/date/list.ts)\n\nThis code defines an interface and a factory function for making API calls to retrieve a list of offer dates. The interface, `OfferDateList`, extends the `ApiCall` interface and specifies the request and response types for the API call. The request type includes the route, method, and authorization header, while the response type includes the expected status code and response body.\n\nThe factory function, `offerDateListFactory`, takes a token and a query object as arguments and returns an object that conforms to the `OfferDateList` interface. The query object must include an `offerId` property, which is used to construct the API route. The token is used to generate the authorization header for the request.\n\nThis code is part of a larger project for a cultural data frontend, and is likely used to retrieve a list of dates for a particular cultural offer. The `OfferDate` type is likely defined elsewhere in the project and includes information about a specific date for a cultural offer. The `Language` type is also likely defined elsewhere in the project and specifies the language of the response data.\n\nHere is an example usage of the `offerDateListFactory` function:\n\n```\nimport { offerDateListFactory } from './path/to/offerDateListFactory';\n\nconst token = 'my-auth-token';\nconst query = { offerId: '123' };\n\nconst offerDateList = offerDateListFactory(token, query);\n\n// Make the API call\nfetch(offerDateList.request.route, {\n  method: offerDateList.request.method,\n  headers: offerDateList.request.headers,\n})\n  .then(response => {\n    if (response.status === offerDateList.response.status) {\n      return response.json();\n    } else {\n      throw new Error('API call failed');\n    }\n  })\n  .then(data => {\n    // Do something with the response data\n  })\n  .catch(error => {\n    // Handle errors\n  });\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an interface and a factory function for making API calls to retrieve a list of offer dates.\n\n2. What dependencies does this code have?\n- This code imports several modules from parent and sibling directories, including `node:querystring`, `../../..`, and `../../types/offer`.\n\n3. What is the expected input and output of the `offerDateListFactory` function?\n- The `offerDateListFactory` function takes a token and a query object as input and returns an object conforming to the `OfferDateList` interface, which includes a request object with route, method, and headers properties, and a response object with status and body properties.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/date/list.md"}}],["232",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/date/update.ts)\n\nThe code defines a function called `offerDateUpdateFactory` that returns an object conforming to the `OfferDateUpdate` type. This type is an `ApiCall` object that describes an API call to update an offer date. \n\nThe `offerDateUpdateFactory` function takes two arguments: a token string and a query object. The token is used to authenticate the API call, while the query object contains the offer ID, date ID, and the updated offer date. \n\nThe returned `OfferDateUpdate` object has a `request` property that describes the API request. It includes the route, method, headers, and body of the request. The route is generated using the `apiRoutes.offerDateUpdate` function, which takes the offer ID and date ID as parameters. The method is set to `PATCH`, indicating that this is an update request. The headers include the authentication token and the content type of the request body, which is JSON. The body of the request is the updated offer date.\n\nThe `OfferDateUpdate` object also has a `response` property that describes the expected response from the API. It includes the expected status code and the shape of the response body. In this case, the expected status code is 200, indicating a successful update, and the response body includes the updated offer date and a success message.\n\nThis function is likely used in the larger project to update offer dates for cultural events. It provides a convenient way to generate the API request object with the correct parameters and authentication headers. Other parts of the project can use this function to update offer dates without needing to know the details of the API request. For example, a form component could use this function to submit an updated offer date to the server. \n\nExample usage:\n\n```\nconst token = 'my-auth-token';\nconst query = {\n  offerId: '123',\n  dateId: 456,\n  offerDate: {\n    start: '2022-01-01T10:00:00Z',\n    end: '2022-01-01T12:00:00Z',\n  },\n};\n\nconst offerDateUpdate = offerDateUpdateFactory(token, query);\n\n// Send the API request using the generated object\nfetch(offerDateUpdate.request.route, {\n  method: offerDateUpdate.request.method,\n  headers: offerDateUpdate.request.headers,\n  body: JSON.stringify(offerDateUpdate.request.body),\n})\n  .then(response => {\n    if (response.status === offerDateUpdate.response.status) {\n      // Handle successful response\n      const data = response.json();\n      console.log(data);\n    } else {\n      // Handle error response\n      console.error('API error:', response.status);\n    }\n  })\n  .catch(error => {\n    console.error('API error:', error);\n  });\n```\n## Questions: \n 1. What is the purpose of the `OfferDateUpdate` type?\n   - The `OfferDateUpdate` type is used to define the structure of an API call for updating an offer date.\n2. What is the `offerDateUpdateFactory` function used for?\n   - The `offerDateUpdateFactory` function is used to create an instance of the `OfferDateUpdate` type with the provided token and query parameters.\n3. What is the significance of the `makeBearer` function in the `offerDateUpdateFactory` function?\n   - The `makeBearer` function is used to generate an authorization header value for the API call using the provided token.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/date/update.md"}}],["233",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/delete.ts)\n\nThe code defines an interface and a factory function related to deleting an offer. The interface `OfferDelete` extends `ApiCall` and defines the request and response types for the API call to delete an offer. The request type includes the route, method, headers, and body of the API call, while the response type includes the expected status and body of the response.\n\nThe factory function `offerDeleteFactory` takes in a token and a query object containing the ID of the offer to delete and the offer data. It returns an object that conforms to the `OfferDelete` interface, with the request object populated with the appropriate values based on the input parameters.\n\nThis code is part of a larger project that likely involves interacting with an API to manage cultural data. The `Offer` type referenced in the code likely represents an offer related to a cultural event or activity. The `apiRoutes` and `makeBearer` functions imported at the top of the file suggest that this project involves making authenticated API calls. The `OfferDelete` interface and `offerDeleteFactory` function specifically relate to deleting an offer, which is likely a common operation in the larger project.\n\nExample usage of the `offerDeleteFactory` function:\n\n```\nconst token = 'my-auth-token';\nconst query = { id: '123', entry: { /* offer data */ } };\nconst offerDelete = offerDeleteFactory(token, query);\n\n// Make API call to delete offer\nfetch(offerDelete.request.route, {\n  method: offerDelete.request.method,\n  headers: offerDelete.request.headers,\n  body: JSON.stringify(offerDelete.request.body),\n})\n  .then(response => {\n    if (response.status === offerDelete.response.status) {\n      // Offer deleted successfully\n    } else {\n      // Handle error\n    }\n  })\n  .catch(error => {\n    // Handle error\n  });\n```\n## Questions: \n 1. What is the purpose of the `OfferDelete` interface?\n   - The `OfferDelete` interface defines the structure of an API call to delete an offer, including the request and response formats.\n2. What is the `offerDeleteFactory` function used for?\n   - The `offerDeleteFactory` function creates an instance of the `OfferDelete` interface with the provided token and query parameters, which can then be used to make the API call to delete an offer.\n3. What other files or modules are imported in this code?\n   - This code imports several modules from the parent directory (`../..`), including `apiRoutes`, `makeBearer`, `ApiCall`, and `ApiRoute`. It also imports the `Offer` type from a file located in the `types` directory.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/delete.md"}}],["234",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/list.ts)\n\nThe code defines an API call for retrieving a list of offers from a backend server. It exports an interface `OfferList` that extends `ApiCall`, which specifies the request and response format of the API call. The request object contains the route, method, and headers of the HTTP request, while the response object specifies the expected HTTP status code and response body.\n\nThe `offerListFactory` function is an implementation of the `ApiCallFactory` interface, which takes a token and a query object as input and returns an instance of `OfferList`. The `token` parameter is used to set the `Authorization` header of the HTTP request, while the `query` parameter is used to construct the URL query parameters of the request.\n\nThis code is part of a larger project that provides a frontend interface for cultural data. The `OfferList` API call is used to retrieve a list of cultural offers from the backend server, which can be displayed to the user. The `offerListFactory` function is used to create instances of the `OfferList` API call with the appropriate token and query parameters.\n\nExample usage:\n\n```typescript\nimport { offerListFactory } from './path/to/offerList';\n\nconst token = 'my-auth-token';\nconst query = { category: 'music', date: '2022-01-01' };\n\nconst offerList = offerListFactory(token, query);\n\n// Send the API request and handle the response\nfetch(offerList.request.route, {\n  method: offerList.request.method,\n  headers: offerList.request.headers,\n})\n  .then((response) => {\n    if (response.status === offerList.response.status) {\n      return response.json();\n    } else {\n      throw new Error(`Unexpected status code: ${response.status}`);\n    }\n  })\n  .then((data) => {\n    console.log(data); // { data: [ ... ] }\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n## Questions: \n 1. What is the purpose of this code?\n- This code defines an interface and a factory function for making API calls to retrieve a list of offers, with authentication headers.\n\n2. What dependencies are being imported?\n- The code imports `ParsedUrlQuery` from the `node:querystring` module, as well as several functions and types from other files in the project.\n\n3. What is the expected format of the response body?\n- The response body is expected to be an object with a `data` property, which is an array of `Offer` objects. The `body` property of the `response` object is initially set to `undefined`.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/list.md"}}],["235",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/show.ts)\n\nThe code defines an interface and a factory function related to making API calls to retrieve information about a cultural offer. The `OfferShow` interface extends the `ApiCall` interface, which defines the structure of an API call. The `OfferShow` interface specifies that the API call should use the HTTP GET method and include an authorization header. The response is expected to have a status code of 200 and a body containing an object of type `Offer`.\n\nThe `offerShowFactory` function takes two arguments: a token for authorization and a query object containing an `id` property. The function returns an object that conforms to the `OfferShow` interface. The `request` property of the returned object specifies the API route to use, the HTTP method, and the authorization header. The `response` property specifies the expected status code and the shape of the response body.\n\nThis code is likely used in the larger project to make API calls to retrieve information about cultural offers. The `offerShowFactory` function can be called with a token and an offer ID to create an object that can be used to make the API call. The response from the API call can then be checked against the `OfferShow` interface to ensure that it has the expected structure.\n\nExample usage:\n\n```\nconst token = 'my-auth-token';\nconst offerId = '123';\n\nconst offerShow = offerShowFactory(token, { id: offerId });\n\n// Make API call using offerShow.request\n\n// Check response against offerShow.response\n```\n## Questions: \n 1. What is the purpose of the `Offer` type imported at the beginning of the code?\n- The `Offer` type is used in the `OfferShow` interface to define the structure of the `data` property in the response body.\n\n2. What is the `offerShowFactory` function used for?\n- The `offerShowFactory` function creates an object that conforms to the `OfferShow` interface, with the provided `token` and `query` parameters used to construct the request.\n\n3. What is the expected HTTP status code and response body structure for the `OfferShow` API call?\n- The `OfferShow` API call is expected to return a `200` status code and a response body with a `data` property containing an `Offer` object.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/show.md"}}],["236",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offer/update.ts)\n\nThe code defines a type and a factory function related to updating an offer in the kulturdaten-frontend project's API. \n\nThe `OfferUpdate` type is an interface that extends `ApiCall` and defines the shape of the request and response objects for updating an offer. The request object includes the route, method, headers, and body of the API call, while the response object includes the expected status and body of the API response.\n\nThe `offerUpdateFactory` function is a factory function that returns an `OfferUpdate` object. It takes in a token and a query object containing an offer ID and the updated offer data. The function uses the `apiRoutes.offerUpdate` method to generate the route for the API call, and sets the method, headers, and body of the request object using the provided token and query data. The response object is initialized with a status of 200 and an undefined body.\n\nThis code can be used in the larger project to update offers in the kulturdaten-frontend API. The `OfferUpdate` type and `offerUpdateFactory` function provide a standardized way to define and create API calls for updating offers, which can be used throughout the project. Developers can use the `offerUpdateFactory` function to generate an `OfferUpdate` object with the appropriate request and response data for a specific offer update, and then use that object to make the API call. \n\nExample usage:\n\n```\nconst token = 'my-auth-token';\nconst offerId = '123';\nconst updatedOffer = { /* updated offer data */ };\n\nconst offerUpdate = offerUpdateFactory(token, { id: offerId, entry: updatedOffer });\n// offerUpdate is now an object with the request and response data for updating the offer\n\n// Make the API call using the offerUpdate object\nfetch(offerUpdate.request.route, {\n  method: offerUpdate.request.method,\n  headers: offerUpdate.request.headers,\n  body: JSON.stringify(offerUpdate.request.body),\n})\n  .then(response => {\n    if (response.status === offerUpdate.response.status) {\n      return response.json();\n    } else {\n      throw new Error('Offer update failed');\n    }\n  })\n  .then(data => {\n    // Handle successful response\n  })\n  .catch(error => {\n    // Handle error\n  });\n```\n## Questions: \n 1. What is the purpose of the `OfferUpdate` type and what does it represent?\n   - The `OfferUpdate` type represents an API call for updating an offer and includes the request and response structure.\n2. What is the `offerUpdateFactory` function and what does it do?\n   - The `offerUpdateFactory` function is a factory function that creates an `OfferUpdate` object with the provided token and query parameters for updating an offer.\n3. What other modules or types are imported in this file and what is their purpose?\n   - The file imports `apiRoutes`, `makeBearer`, and `ApiCall` from the parent directory, as well as `Offer` from the `types/offer` module. These imports are used to define the request and response structure for the `OfferUpdate` type and to create the `offerUpdateFactory` function.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offer/update.md"}}],["237",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offerMainType/list.ts)\n\nThis code defines an API call for retrieving a list of main offer types from the backend server. It exports an interface `OfferMainTypeList` that extends `ApiCall`, which defines the request and response types for the API call. The request type specifies that the method is `GET` and the headers include an `Authorization` token. The response type specifies that the status code is `200` and the body contains an array of `OfferType` objects.\n\nThe code also exports a factory function `offerMainTypeListFactory` that takes an `Authorization` token as input and returns an instance of `OfferMainTypeList`. The factory function constructs the request object by calling `apiRoutes.offerMainTypeList()` to get the URL for the API endpoint, and sets the `Authorization` header using the `makeBearer` function. The response object is initialized with a `status` of `200` and an undefined `body`.\n\nThis code can be used in the larger project to make API calls to retrieve a list of main offer types from the backend server. The `offerMainTypeListFactory` function can be called with a valid `Authorization` token to create an instance of `OfferMainTypeList`, which can then be passed to the `ApiCall` utility function to make the actual API call. The response from the server will contain an array of `OfferType` objects, which can be used to populate the UI or perform other operations in the frontend application.\n\nExample usage:\n\n```\nimport { ApiCall } from '../..';\nimport { offerMainTypeListFactory, OfferMainTypeList } from './offerMainTypeList';\n\nconst token = 'my-auth-token';\n\nconst offerMainTypeList: OfferMainTypeList = offerMainTypeListFactory(token);\n\nApiCall(offerMainTypeList)\n  .then((response) => {\n    console.log(response.body.data); // array of OfferType objects\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n## Questions: \n 1. What is the purpose of the `OfferType` type imported in this file?\n- The `OfferType` type is used in the `OfferMainTypeList` interface to define the shape of the `data` property in the response body.\n\n2. What is the `offerMainTypeListFactory` function used for?\n- The `offerMainTypeListFactory` function is an implementation of the `ApiCallFactory` interface that creates an `OfferMainTypeList` object with the appropriate request and response properties for making a GET request to the `apiRoutes.offerMainTypeList()` endpoint with a bearer token.\n\n3. Where are the `apiRoutes`, `ApiCall`, `ApiRoute`, and `ApiCallFactory` modules imported from?\n- These modules are imported from the parent directory (`../..`) of the current file.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offerMainType/list.md"}}],["238",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/offerType/list.ts)\n\nThe code defines an API call to retrieve a list of offer types from a backend server. It exports an interface `OfferTypeList` that extends `ApiCall`, which specifies the request and response format of the API call. The request object has a `route` property that is a function that returns the URL path of the API endpoint, and a `headers` property that includes an `Authorization` field with a bearer token. The response object has a `status` property of 200 and a `body` property that is an array of `OfferType` objects.\n\nThe code also exports a factory function `offerTypeListFactory` that takes a bearer token as an argument and returns an instance of `OfferTypeList`. The factory function sets the request object with the `apiRoutes.offerTypeList()` function, which returns the URL path of the offer type list endpoint, and the `Authorization` header with the provided token. The response object is initialized with a `status` of 200 and an undefined `body`.\n\nThis code can be used in the larger project to make API calls to retrieve a list of offer types from the backend server. The `OfferTypeList` interface and `offerTypeListFactory` function provide a standardized way to make these API calls with the correct request and response format. Other parts of the project can import and use these functions to retrieve offer type data and display it to the user. For example:\n\n```\nimport { offerTypeListFactory } from './path/to/offerTypeList';\n\nconst token = 'myBearerToken';\nconst offerTypeList = offerTypeListFactory(token);\n\nfetch(offerTypeList.request.route(), {\n  method: offerTypeList.request.method,\n  headers: offerTypeList.request.headers,\n})\n  .then(response => response.json())\n  .then(data => {\n    // do something with the offer type data\n  })\n  .catch(error => {\n    // handle the error\n  });\n```\n\nThis code creates an instance of `OfferTypeList` with the provided bearer token and uses it to make a fetch request to the offer type list endpoint. The response is parsed as JSON and the offer type data is used to update the UI.\n## Questions: \n 1. What is the purpose of the `OfferTypeList` interface?\n   - The `OfferTypeList` interface defines the structure of an API call that retrieves a list of `OfferType` objects.\n2. What is the `offerTypeListFactory` function used for?\n   - The `offerTypeListFactory` function is a factory function that creates an instance of the `OfferTypeList` API call with the provided authorization token.\n3. What is the `makeBearer` function used for?\n   - The `makeBearer` function is used to create an authorization header value in the format of \"Bearer {token}\".","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/offerType/list.md"}}],["239",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/organizer/create.ts)\n\nThe code defines an API call for creating a new organizer in the kulturdaten-frontend project. It exports an interface `OrganizerCreate` that extends `ApiCall` and specifies the request and response types for the API call. The request type includes the route, method, headers, and body of the API call, while the response type includes the expected status and body of the response.\n\nThe code also exports a factory function `organizerCreateFactory` that takes a token and a query object as arguments and returns an instance of `OrganizerCreate`. The factory function uses the `apiRoutes.organizerCreate()` function to generate the route for the API call and sets the method, headers, and body based on the arguments passed in. The response status is set to 200 and the body is left undefined.\n\nThis code can be used to create a new organizer in the kulturdaten-frontend project by calling the `organizerCreateFactory` function with a valid token and a query object containing the necessary information for the new organizer. For example:\n\n```\nconst token = 'valid_token';\nconst query = {\n  entry: {\n    name: 'New Organizer',\n    description: 'A new organizer',\n    // other properties of the organizer\n  }\n};\n\nconst organizerCreate = organizerCreateFactory(token, query);\n```\n\nThe resulting `organizerCreate` object can then be passed to a function that sends the API call to the server and handles the response. This code is part of a larger project that likely includes other API calls and functions for interacting with the kulturdaten-frontend backend.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file defines an interface and a factory function for creating an API call to create an organizer.\n\n2. What types are being used in this code file?\n- This code file imports and uses types for API routes, bearer tokens, API calls, and organizer objects.\n\n3. What is the expected response status and body for the organizerCreateFactory function?\n- The expected response status is 200 and the expected response body is an Organizer object.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/organizer/create.md"}}],["240",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/organizer/delete.ts)\n\nThis code defines an API call for deleting an organizer and provides a factory function for creating instances of this API call. The API call is defined as an interface called `OrganizerDelete`, which extends the `ApiCall` interface from a separate module. The `OrganizerDelete` interface specifies the request and response types for the API call.\n\nThe request type includes a `route` property, which is generated using the `apiRoutes.organizerDelete` function with a `query.id` parameter. This function generates a URL for the API endpoint that deletes an organizer with the given ID. The request also includes a `method` property set to `'DELETE'`, indicating that this is a DELETE request. The `headers` property includes an `Authorization` header with a bearer token generated using the `makeBearer` function and a `Content-Type` header set to `'application/json'`. The `body` property is optional and can include an `Organizer` object.\n\nThe response type includes a `status` property set to `200` and a `body` property with a `data` property set to `null` and a `meta` property with a `message` property set to `'Organizer deleted successfully'`.\n\nThe `organizerDeleteFactory` function is a factory function that creates instances of the `OrganizerDelete` interface. It takes a `token` parameter, which is a bearer token for authentication, and a `query` parameter, which includes an `id` property for the ID of the organizer to delete and an `entry` property for the `Organizer` object to include in the request body. The function returns an object with a `request` property that includes the request properties described above and a `response` property that includes the response properties described above.\n\nThis code is used in the larger project to provide a way to delete an organizer using the project's API. The `organizerDeleteFactory` function can be called with the necessary parameters to create an instance of the `OrganizerDelete` interface, which can then be used to make the API call to delete the organizer. The response from the API call can be checked to ensure that the organizer was deleted successfully.\n## Questions: \n 1. What is the purpose of the `organizerDeleteFactory` function?\n- The `organizerDeleteFactory` function creates an object that represents an API call to delete an organizer, with the necessary request and response properties.\n\n2. What is the expected format of the request body for the `OrganizerDelete` API call?\n- The expected format of the request body for the `OrganizerDelete` API call is an object that matches the `Organizer` type.\n\n3. What is the significance of the `makeBearer` function in the `organizerDeleteFactory` function?\n- The `makeBearer` function is used to generate an authorization token for the API call, which is included in the request headers.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/organizer/delete.md"}}],["241",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/organizer/list.ts)\n\nThe code defines an API call for retrieving a list of organizers from a backend server. It exports an interface `OrganizerList` that extends `ApiCall`, which specifies the request and response types for the API call. The request type includes the route, HTTP method, and authorization header, while the response type includes the expected HTTP status code and response body.\n\nThe `organizerListFactory` function is also exported, which is a factory function that creates an instance of `OrganizerList` with the given token and query parameters. The `token` parameter is used to set the authorization header in the request, while the `query` parameter is used to construct the API route for retrieving the list of organizers.\n\nThis code is part of a larger project for a frontend application that interacts with a backend server. It is likely that this API call is used to retrieve a list of organizers to display on the frontend, such as for a cultural event or exhibition. The `Organizer` type is likely defined elsewhere in the project and represents the data structure for an organizer.\n\nHere is an example usage of the `organizerListFactory` function:\n\n```\nimport { organizerListFactory } from './path/to/organizerList';\n\nconst token = 'my-auth-token';\nconst query = { limit: 10, offset: 0 };\nconst organizerList = organizerListFactory(token, query);\n\n// Send the API request using a library like Axios\naxios.request(organizerList.request)\n  .then((response) => {\n    console.log(response.data); // Array of Organizer objects\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n\nThis code creates an instance of `OrganizerList` using the `organizerListFactory` function with a token and query parameters. It then sends the API request using the Axios library and logs the response data to the console.\n## Questions: \n 1. What is the purpose of the `OrganizerList` interface?\n- The `OrganizerList` interface defines the structure of an API call that retrieves a list of organizers.\n\n2. What is the `organizerListFactory` function used for?\n- The `organizerListFactory` function is a factory function that creates an instance of the `OrganizerList` interface with the provided token and query parameters.\n\n3. What is the `makeBearer` function used for?\n- The `makeBearer` function is used to create an authorization header value for the API request by appending the provided token to the string \"Bearer \".","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/organizer/list.md"}}],["242",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/organizer/media.ts)\n\nThe code defines a type and a factory function related to updating media for an organizer in the Kulturdaten-frontend project. \n\nThe `OrganizerMedia` type extends the `ApiCall` type and defines the request and response objects for updating media for an organizer. The request object includes the route, method, headers, and body of the API call, while the response object includes the expected status and body of the response. The `OrganizerMedia` type is used to ensure type safety and consistency throughout the project when making API calls related to updating media for an organizer.\n\nThe `organizerMediaFactory` function is a factory function that returns an `OrganizerMedia` object. It takes in a token and a query object containing the organizer ID and media to be updated. The function constructs the request object using the `apiRoutes.organizerUpdate` function to generate the route, the `makeBearer` function to generate the authorization header, and the `query.media` object to set the body of the request. The response object is left undefined, as it will be populated by the API response.\n\nThis code is part of a larger project that likely includes other API routes and functions related to updating and retrieving data for organizers in the Kulturdaten-frontend project. The `OrganizerMedia` type and `organizerMediaFactory` function provide a standardized way of making API calls related to updating media for an organizer, ensuring type safety and consistency throughout the project. This code can be used by other parts of the project that need to update media for an organizer, by calling the `organizerMediaFactory` function with the appropriate token and query parameters.\n## Questions: \n 1. What is the purpose of the `organizerMediaFactory` function?\n   - The `organizerMediaFactory` function creates an object that represents an API call to update an organizer's media, with the provided token and query parameters.\n\n2. What type of data is expected in the `body` of the API request?\n   - The `body` of the API request is expected to be a `FormData` object containing the media to be updated for the organizer.\n\n3. What is the expected structure of the API response?\n   - The API response is expected to have a `status` of 200 and a `body` containing an object with `data` (representing the updated organizer) and `meta` (containing a message indicating the update was successful).","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/organizer/media.md"}}],["243",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/organizer/show.ts)\n\nThe code defines an interface and a factory function for making API calls to retrieve information about an organizer. The interface, `OrganizerShow`, extends `ApiCall` and specifies the request and response types for the API call. The request type includes the route, method, and authorization header, while the response type includes the expected status code and response body, which should contain an object of type `Organizer`.\n\nThe `organizerShowFactory` function takes in a token and a query object with an `organizer` property, and returns an object that conforms to the `OrganizerShow` interface. The returned object includes a request object with the specified route, method, and authorization header, as well as a response object with the expected status code and an undefined body.\n\nThis code is likely used in the larger project to make API calls to retrieve information about organizers. The `organizerShowFactory` function can be called with a token and an organizer ID to create an object that can be passed to a function that makes the actual API call. The response from the API call can then be used to populate the UI with information about the organizer.\n\nExample usage:\n\n```\nconst token = 'my-auth-token';\nconst organizerId = '123';\n\nconst organizerShow = organizerShowFactory(token, { organizer: organizerId });\n\nmakeApiCall(organizerShow).then((response) => {\n  const organizer = response.body.data;\n  // Use organizer data to populate UI\n});\n```\n## Questions: \n 1. What is the purpose of the `OrganizerShow` interface?\n- The `OrganizerShow` interface defines the structure of an API call to retrieve information about an organizer.\n\n2. What is the `organizerShowFactory` function used for?\n- The `organizerShowFactory` function creates an instance of the `OrganizerShow` interface with the provided token and query parameters.\n\n3. What other modules are imported in this file?\n- This file imports `apiRoutes`, `makeBearer`, `ApiCall`, and `ApiRoute` from the parent directory, as well as the `Organizer` type from a separate file.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/organizer/show.md"}}],["244",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/organizer/update.ts)\n\nThe code defines a type and a factory function for making API calls to update an organizer's information. The `OrganizerUpdate` type extends the `ApiCall` type and specifies the request and response formats for updating an organizer. The request includes the route, method, headers (including an authorization token and content type), and body (the updated organizer information). The response includes a status code of 200 and a body with the updated organizer data and a success message.\n\nThe `organizerUpdateFactory` function takes in an authorization token and an object with the organizer ID and updated information. It returns an `OrganizerUpdate` object with the request and response formats filled in based on the input parameters. This function can be used to make API calls to update an organizer's information by passing in the necessary parameters.\n\nThis code is part of a larger project for managing cultural event data. The `apiRoutes` and `makeBearer` functions are likely defined elsewhere in the project and provide the necessary routes and authentication for making API calls. The `Organizer` type is also likely defined elsewhere in the project and specifies the format for organizer data. This code specifically handles updating an organizer's information, which is likely a common task in the larger project. The `OrganizerUpdate` type and `organizerUpdateFactory` function provide a standardized way to make these API calls and handle the response data.\n## Questions: \n 1. What is the purpose of the `organizerUpdateFactory` function?\n   - The `organizerUpdateFactory` function creates an object that represents an API call to update an organizer's information, including the request route, method, headers, and body, as well as the expected response status and body.\n2. What is the `OrganizerUpdate` type used for?\n   - The `OrganizerUpdate` type is used to define the structure of an API call to update an organizer's information, including the request and response objects with their respective properties and types.\n3. What is the `makeBearer` function used for?\n   - The `makeBearer` function is used to create an authorization header value with a bearer token, which is passed as an argument to the `organizerUpdateFactory` function to authenticate the API call.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/organizer/update.md"}}],["245",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/organizerType/list.ts)\n\nThe code defines an API call to retrieve a list of organizer types from a server. It exports an interface `OrganizerTypeList` that extends `ApiCall`, which specifies the request and response format of the API call. The request object has a `route` property that is a function that returns the URL path for the API endpoint, a `method` property that is set to `'GET'` to indicate that this is an HTTP GET request, and a `headers` property that includes an `Authorization` field for passing an access token to the server. The response object has a `status` property set to `200` to indicate a successful response, and a `body` property that is an array of `OrganizerType` objects.\n\nThe code also exports a function `organizerTypeListFactory` that creates an instance of `OrganizerTypeList` with the specified access token. The function takes a single argument `token` that is a string representing the access token. It returns an object that conforms to the `OrganizerTypeList` interface, with the `request` object populated with the API endpoint URL, HTTP method, and access token, and the `response` object initialized with a `status` of `200` and an empty `body`.\n\nThis code can be used in the larger project to make API calls to retrieve a list of organizer types from the server. The `organizerTypeListFactory` function can be called with an access token to create an instance of `OrganizerTypeList`, which can then be passed to a function that sends the API request to the server and returns the response. The `OrganizerTypeList` interface can also be used to define the format of the response data, making it easier to handle the data in other parts of the project. For example, the `data` property of the response body can be mapped to an array of `OrganizerType` objects and displayed in a dropdown menu for selecting an organizer type.\n## Questions: \n 1. What is the purpose of the `OrganizerTypeList` interface?\n   - The `OrganizerTypeList` interface defines the structure of an API call to retrieve a list of `OrganizerType` data.\n2. What is the `organizerTypeListFactory` function used for?\n   - The `organizerTypeListFactory` function is a factory function that creates an instance of the `OrganizerTypeList` API call with the provided token for authorization.\n3. What is the significance of the `makeBearer` function in the `organizerTypeListFactory` function?\n   - The `makeBearer` function is used to create an authorization header value for the API call by appending the provided token to the string \"Bearer \".","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/organizerType/list.md"}}],["246",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/tags/list.ts)\n\nThe code defines an API call for retrieving a list of tags from the backend server. It exports an interface called `TagList` which extends the `ApiCall` interface. The `TagList` interface specifies the request and response types for the API call. The request type includes the route, method, and authorization header, while the response type includes the expected status code and body.\n\nThe code also exports a function called `tagListFactory` which creates an instance of the `TagList` interface. The `tagListFactory` function takes a token as an argument and returns a `TagList` object with the request and response properties set. The `Authorization` header in the request is set using the `makeBearer` function which takes the token as an argument and returns a string in the format \"Bearer <token>\".\n\nThis code is part of a larger project called `kulturdaten-frontend` and is used to interact with the backend server to retrieve a list of tags. The `TagList` interface and `tagListFactory` function can be imported and used in other parts of the project to make API calls to the backend server. For example, a component that displays a list of tags may use the `tagListFactory` function to retrieve the list of tags and render them on the page.\n\nExample usage:\n\n```\nimport { tagListFactory } from './path/to/tagList';\n\nconst token = 'my-auth-token';\n\nconst tagList = tagListFactory(token);\n\n// Make the API call\nfetch(tagList.request.route, {\n  method: tagList.request.method,\n  headers: tagList.request.headers,\n})\n  .then(response => {\n    if (response.status === tagList.response.status) {\n      return response.json();\n    } else {\n      throw new Error('Failed to retrieve tag list');\n    }\n  })\n  .then(data => {\n    // Render the list of tags\n    console.log(data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n## Questions: \n 1. What is the purpose of the `TagList` interface?\n   - The `TagList` interface defines the structure of an API call that retrieves a list of tags, including the required request headers and expected response body.\n2. What is the `tagListFactory` function used for?\n   - The `tagListFactory` function is a factory function that creates an instance of the `TagList` API call with the provided authorization token and default response status and body.\n3. What other modules or types are imported in this file?\n   - This file imports `apiRoutes`, `ApiCall`, `ApiRoute`, `ApiCallFactory`, `makeBearer`, and `Tag` from other modules or types.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/tags/list.md"}}],["247",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/routes/user/update.ts)\n\nThe code defines a type and a factory function related to updating a user's information in the kulturdaten-frontend project. The `UserUpdate` type is an `ApiCall` type that specifies the request and response structure for updating a user's information. The `UserUpdate` request has a route, method, headers, and body. The route is generated using the `apiRoutes.userUpdate()` function, which returns the URL path for updating a user's information. The method is set to 'POST', indicating that the request is used to create a new resource. The headers include an authorization token and the content type of the request body, which is JSON. The body of the request is a `User` object, which contains the updated user information.\n\nThe `UserUpdate` response has a status of 200, indicating that the request was successful, and a body that contains the updated user information and a message indicating that the user was updated successfully.\n\nThe `userUpdateFactory` function is a factory function that creates a `UserUpdate` object. It takes an authorization token and a `User` object as input and returns a `UserUpdate` object. The `UserUpdate` object is created by setting the request and response properties of the `UserUpdate` type. The request properties are set using the input parameters and the `apiRoutes.userUpdate()` function. The response properties are set to a status of 200 and an undefined body.\n\nThis code can be used to update a user's information in the kulturdaten-frontend project. The `userUpdateFactory` function can be called with an authorization token and a `User` object containing the updated information. The resulting `UserUpdate` object can then be used to make a request to the kulturdaten-frontend API to update the user's information. The response from the API will contain the updated user information and a message indicating that the update was successful.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a type and a factory function for making API calls to update user data.\n\n2. What dependencies are required for this code to work?\n   This code imports several modules from the parent directory, including `apiRoutes`, `makeBearer`, `ApiCall`, `ApiRoute`, and `User`.\n\n3. What is the expected response from the API call generated by `userUpdateFactory`?\n   The expected response is a 200 status code with a JSON body containing the updated user data and a meta message indicating success.","metadata":{"source":".autodoc/docs/markdown/lib/api/routes/user/update.md"}}],["248",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/accessibility.ts)\n\nThe code above defines two types: `AccessibilityField` and `Accessibility`. These types are used to represent data related to accessibility features for cultural events in the larger project. \n\nThe `AccessibilityField` type has three attributes: `type`, `key`, and `value`. These attributes represent the type of accessibility feature, the name of the feature, and the value of the feature, respectively. \n\nThe `Accessibility` type has three attributes as well: `id`, `type`, and `relations`. The `id` attribute is an optional number that represents the unique identifier for the accessibility feature. The `type` attribute is a string that specifies the type of data, which in this case is always 'accessibility'. The `relations` attribute is an object that contains an array of `AccessibilityField` objects. This array represents the different accessibility features associated with a cultural event. \n\nThese types are used throughout the project to represent and manipulate accessibility data. For example, when creating a new cultural event, the `Accessibility` type can be used to specify the accessibility features associated with the event. \n\n```typescript\nconst newEvent: Event = {\n  // other event data\n  accessibility: {\n    relations: {\n      fields: [\n        {\n          attributes: {\n            type: 'wheelchair-accessible',\n            key: 'Wheelchair Accessible',\n            value: 'true'\n          }\n        },\n        {\n          attributes: {\n            type: 'audio-description',\n            key: 'Audio Description',\n            value: 'false'\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nIn the example above, a new `Event` object is being created with accessibility data. The `accessibility` attribute is an object of type `Accessibility`, which contains an array of `AccessibilityField` objects. These fields represent the accessibility features associated with the event, such as whether it is wheelchair accessible or has audio description available. \n\nOverall, the `AccessibilityField` and `Accessibility` types provide a structured way to represent and manipulate accessibility data in the larger project.\n## Questions: \n 1. **What is the purpose of the `Accessibility` type?** \nThe `Accessibility` type is used to represent accessibility information for cultural events or venues, including an ID, type, and a list of related `AccessibilityField` objects.\n\n2. **What is the significance of the `key` attribute in the `AccessibilityField` type?** \nThe `key` attribute in the `AccessibilityField` type is used to identify the specific accessibility feature being described, such as \"wheelchair accessible\" or \"audio description available\".\n\n3. **How is the `Accessibility` type used in the overall project?** \nThe `Accessibility` type is likely used in various components and functions throughout the project to store and display accessibility information for cultural events and venues.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/accessibility.md"}}],["249",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/address.ts)\n\nThe code above defines a TypeScript type called `Address`. This type is used to represent an address object that can be used in the `kulturdaten-frontend` project. \n\nThe `Address` type has three properties: `type`, `id`, and `attributes`. The `type` property is optional and is set to the string value `'address'`. The `id` property is also optional and is set to a number. The `attributes` property is required and contains an object with five properties: `street1`, `street2`, `city`, `zipCode`, and `district`. \n\nThe `Address` type can be used in various parts of the `kulturdaten-frontend` project where an address object is needed. For example, it can be used in the `Venue` type to represent the address of a venue. \n\nHere is an example of how the `Address` type can be used in the `Venue` type:\n\n```\nexport type Venue = {\n  type?: 'venue';\n  id?: number;\n  attributes: {\n    name: string;\n    address: Address;\n    // other venue properties\n  };\n};\n```\n\nIn this example, the `Venue` type has an `attributes` property that contains an `address` property of type `Address`. This allows a venue object to have an associated address object. \n\nOverall, the `Address` type is a useful tool for representing address objects in the `kulturdaten-frontend` project. Its use helps to ensure consistency and clarity in the codebase.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a TypeScript type called `Address` which represents an address with various attributes.\n\n2. What is the significance of the `type` and `id` properties in the `Address` type?\n   The `type` property is optional and specifies the type of the address (e.g. \"address\"). The `id` property is also optional and represents a unique identifier for the address.\n\n3. What is the purpose of the `district` property in the `Address` type?\n   The `district` property is optional and represents the district or neighborhood of the address.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/address.md"}}],["250",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/appToken.ts)\n\nThe code above defines a TypeScript type called `AppToken`. This type is used to represent an object that contains information about an application token. \n\nThe `AppToken` type has a single property called `data`, which is an object that contains information about the token. The `data` object has an optional property called `type`, which is a string that specifies the type of the token. In this case, the only valid value for `type` is `'appToken'`. \n\nThe `data` object also has an optional property called `attributes`, which is an object that contains the actual data about the token. The `attributes` object has several properties, including `id`, `name`, `description`, `url`, and `token`. \n\nThe `id` property is a number that uniquely identifies the token. The `name` property is a string that specifies the name of the token. The `description` property is a string that provides a description of the token. The `url` property is a string that specifies the URL of the application that the token is associated with. \n\nThe `token` property is a bit more complex. It can be either a string or an object that contains a `type` property and a `token` property. If `token` is a string, it represents the actual token value. If `token` is an object, the `type` property specifies the type of token (in this case, it must be `'bearer'`), and the `token` property contains the actual token value. \n\nThis `AppToken` type is likely used throughout the larger project to represent application tokens. For example, it might be used when making API requests that require an application token. Developers can use this type to ensure that they are passing the correct data to functions that expect an application token. \n\nHere's an example of how the `AppToken` type might be used in a function that makes an API request:\n\n```\nasync function getSomeData(token: AppToken): Promise<Data> {\n  const response = await fetch('https://api.example.com/data', {\n    headers: {\n      Authorization: `Bearer ${token.data.attributes.token}`,\n    },\n  });\n\n  const data = await response.json();\n\n  return data;\n}\n```\n\nIn this example, the `getSomeData` function takes an `AppToken` object as an argument. It then uses the `token` object to construct an authorization header for an API request. Finally, it returns the data returned by the API.\n## Questions: \n 1. What is the purpose of the `AppToken` type?\n   - The `AppToken` type is used to represent an application token, which includes information such as the token ID, name, description, URL, and actual token value.\n\n2. What is the significance of the `type` property within the `data` object?\n   - The `type` property within the `data` object is used to specify the type of data being represented. In this case, it is used to indicate that the data is an `appToken`.\n\n3. What are the possible values for the `token` property?\n   - The `token` property can either be a string value or an object with a `type` property set to `'bearer'` and a `token` property set to a string value. This allows for flexibility in how the token is represented and used within the application.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/appToken.md"}}],["251",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/audience.ts)\n\nThe code above defines two TypeScript types: `AudienceField` and `Audience`. These types are used to represent data related to the audience of cultural events in the `kulturdaten-frontend` project.\n\nThe `AudienceField` type represents a single field of information related to an audience. It has three attributes: `type`, `key`, and `value`. The `type` attribute is a string that specifies the type of the field (e.g. \"age range\", \"gender\", etc.). The `key` attribute is a string that serves as a unique identifier for the field. The `value` attribute is a string that contains the actual value of the field (e.g. \"18-24\", \"male\", etc.).\n\nThe `Audience` type represents an audience for a cultural event. It has three attributes: `id`, `type`, and `relations`. The `id` attribute is an optional number that serves as a unique identifier for the audience. The `type` attribute is a string that specifies the type of the object (in this case, \"audience\"). The `relations` attribute is an object that contains information related to the audience's fields. Specifically, it has a `fields` attribute that is an array of `AudienceField` objects.\n\nThese types are used throughout the `kulturdaten-frontend` project to represent audience data. For example, they may be used in API requests and responses to retrieve and display information about audiences for cultural events. Here is an example of how the `Audience` type might be used in an API response:\n\n```\n{\n  \"data\": {\n    \"id\": 123,\n    \"type\": \"audience\",\n    \"relations\": {\n      \"fields\": [\n        {\n          \"attributes\": {\n            \"type\": \"age range\",\n            \"key\": \"age_range\",\n            \"value\": \"18-24\"\n          }\n        },\n        {\n          \"attributes\": {\n            \"type\": \"gender\",\n            \"key\": \"gender\",\n            \"value\": \"male\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nIn this example, the API response contains an `Audience` object with an `id` of 123 and two `AudienceField` objects representing the audience's age range and gender.\n## Questions: \n 1. **What is the purpose of the AudienceField type?** The AudienceField type is used to define the attributes of a specific field within an Audience object.\n2. **What is the purpose of the Audience type?** The Audience type is used to define an audience for a cultural event, including its ID, type, and related fields.\n3. **How are AudienceField and Audience related?** The Audience type includes a relations property that contains an array of AudienceField objects, allowing for multiple fields to be associated with a single audience.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/audience.md"}}],["252",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/contact.ts)\n\nThe code above defines two types, `ContactTranslation` and `Contact`, which are used to represent contact information for a cultural event or organization. \n\nThe `ContactTranslation` type is simply an alias for the `Translation` type imported from the `general` module. This suggests that the contact information may need to be translated into multiple languages for the user interface.\n\nThe `Contact` type is more complex, consisting of three fields: `id`, `attributes`, and `relations`. The `id` field is optional and represents a unique identifier for the contact. The `attributes` field is an object with two properties, `phone` and `email`, which represent the phone number and email address for the contact. Finally, the `relations` field is an object with a single property, `translations`, which is an array of `ContactTranslation` objects representing the translations for the contact information.\n\nThis code is likely used in the larger project to represent and manage contact information for cultural events or organizations. For example, a cultural event may have multiple contacts associated with it, each with their own phone number and email address. The `Contact` type provides a structured way to represent this information, while the `ContactTranslation` type allows for localization of the contact information. \n\nHere is an example of how this code might be used in practice:\n\n```typescript\nimport { Contact } from './contact';\n\nconst eventContact: Contact = {\n  attributes: {\n    phone: '555-1234',\n    email: 'info@example.com'\n  },\n  relations: {\n    translations: [\n      {\n        language: 'en',\n        value: {\n          phone: '555-1234',\n          email: 'info@example.com'\n        }\n      },\n      {\n        language: 'de',\n        value: {\n          phone: '555-5678',\n          email: 'info@beispiel.de'\n        }\n      }\n    ]\n  }\n};\n```\n\nIn this example, we create a `Contact` object representing the contact information for a cultural event. The `attributes` field contains the phone number and email address, while the `relations` field contains an array of `ContactTranslation` objects representing the translations for the contact information in English and German.\n## Questions: \n 1. What is the purpose of the `Translation` import?\n   - The `Translation` import is used in the `ContactTranslation` type definition, indicating that it is likely related to translating text in the application.\n\n2. What is the purpose of the `Contact` type definition?\n   - The `Contact` type definition defines the structure of a contact object, including its `id`, `attributes` (which includes `phone` and `email` properties), and `relations` (which includes an array of `ContactTranslation` objects).\n\n3. What other files might import and use the `Contact` type definition?\n   - Other files within the `kulturdaten-frontend` project that deal with contact information, such as a contact page or a form for submitting contact information, might import and use the `Contact` type definition.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/contact.md"}}],["253",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/general.ts)\n\nThe code above defines several types and enums that are used in the Kulturdaten Frontend project. \n\nThe `Translation` type is used to represent a translation of an object in a specific language. It contains an optional `id` and `type` field, as well as an `attributes` object that contains the language and name of the translation. \n\nThe `PublishedStatus` enum is used to represent the status of an object, either `published` or `draft`. \n\nThe `DefaultAttributes` type is used to represent the default attributes of an object, including the creation and update timestamps and the published status. \n\nThe `CategoryEntry` type is used to represent an entry in a category. It contains a `data` object that includes the type, id, attributes, and relations of the entry. The `relations` object contains arrays of translations, media, subjects, types, and tags related to the entry. The `meta` object contains information about the publishability of the entry and the language of the entry. \n\nThese types are used throughout the Kulturdaten Frontend project to define the structure of objects and data that are used in the application. For example, the `CategoryEntry` type is used in several components to display information about categories and their entries. \n\nHere is an example of how the `CategoryEntry` type might be used in a component:\n\n```\nimport { CategoryEntry } from './types';\n\nfunction CategoryEntryComponent({ entry }: { entry: CategoryEntry }) {\n  return (\n    <div>\n      <h2>{entry.data.attributes.name}</h2>\n      <p>Created at: {entry.data.attributes.createdAt}</p>\n      <p>Status: {entry.data.attributes.status}</p>\n      <ul>\n        {entry.relations.translations.map((translation) => (\n          <li key={translation.id}>\n            {translation.attributes.language}: {translation.attributes.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\nIn this example, the `CategoryEntry` type is used to define the shape of the `entry` prop that is passed to the component. The component then uses the data from the `entry` object to display information about the entry, including its name, creation date, status, and translations.\n## Questions: \n 1. What is the purpose of the `CategoryEntry` type?\n   - The `CategoryEntry` type is used to represent a category entry with its attributes and relations, including translations, media, subjects, types, and tags.\n\n2. What is the difference between the `PublishedStatus.published` and `PublishedStatus.draft` values?\n   - The `PublishedStatus.published` value indicates that the category entry is published and visible to the public, while the `PublishedStatus.draft` value indicates that the category entry is not yet published and still in draft mode.\n\n3. What is the `Translation` type used for?\n   - The `Translation` type is used to represent a translation of a category entry in a specific language, including its language and name attributes.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/general.md"}}],["254",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/hours.ts)\n\nThis file defines several types and functions related to hours and weekdays. \n\nThe `HoursWeekday` enum defines the seven days of the week as string values. \n\nThe `hoursWeekdays` constant is an array of the `HoursWeekday` enum values, in the order they appear in the enum. \n\nThe `hoursWeekDayToNumber` function takes a `HoursWeekday` value as input and returns its index in the `hoursWeekdays` array. This can be useful for converting between the enum values and their corresponding numerical values. \n\nThe `dayNumberToHoursWeekday` function takes a numerical value as input and returns the corresponding `HoursWeekday` value from the `hoursWeekdays` array. This can be useful for converting between numerical values and enum values. \n\nThe `Hours` type defines an object with an optional `id` property and an `attributes` property. The `attributes` property is an object with three properties: `weekday`, which is an `HoursWeekday` value, and `from` and `to`, which are strings representing the opening and closing times for that day. \n\nThe `OpeningHours` and `PeakHours` types are aliases for the `Hours` type. \n\nOverall, this file provides a set of types and functions that can be used to represent and manipulate hours and weekdays in the context of the larger project. For example, these types might be used to represent the opening hours of cultural institutions in the project's database, and the functions might be used to convert between different representations of those hours.\n## Questions: \n 1. What is the purpose of the `Hours` type and its attributes?\n   - The `Hours` type represents a set of opening hours for a venue or event, and its attributes include the weekday, start time, and end time.\n2. What is the difference between `OpeningHours` and `PeakHours` types?\n   - There is no difference between the `OpeningHours` and `PeakHours` types - they are both aliases for the `Hours` type.\n3. What do the `hoursWeekDayToNumber` and `dayNumberToHoursWeekday` functions do?\n   - `hoursWeekDayToNumber` takes a `HoursWeekday` value and returns its index in the `hoursWeekdays` array. `dayNumberToHoursWeekday` takes a number and returns the corresponding `HoursWeekday` value from the `hoursWeekdays` array. These functions can be used to convert between the `HoursWeekday` enum and its numerical representation.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/hours.md"}}],["255",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/link.ts)\n\nThe code above defines a TypeScript type called `Link`. This type represents a link object that has an `id`, a `type` of `'link'`, and an `attributes` object that contains a `url` property of type `string`. \n\nThis type is likely used in the larger project to represent links to external resources related to cultural data. For example, if the project displays information about a particular cultural event, it may include links to the event's website or social media pages. The `Link` type can be used to ensure that these links are properly formatted and validated before being displayed to users.\n\nHere is an example of how the `Link` type could be used in code:\n\n```typescript\nimport { Link } from './types';\n\nconst eventLink: Link = {\n  id: 123,\n  type: 'link',\n  attributes: {\n    url: 'https://example.com/event'\n  }\n};\n\nfunction displayLink(link: Link) {\n  console.log(`Link ID: ${link.id}`);\n  console.log(`Link URL: ${link.attributes.url}`);\n}\n\ndisplayLink(eventLink);\n```\n\nIn this example, we import the `Link` type from a file called `types.ts`. We then create a new `Link` object called `eventLink` with an `id` of `123` and a `url` of `'https://example.com/event'`. Finally, we pass `eventLink` to a function called `displayLink` which logs the link's `id` and `url` to the console.\n\nOverall, the `Link` type provides a convenient and standardized way to represent links to external resources in the `kulturdaten-frontend` project.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a TypeScript type called \"Link\" which has an id, type, and attributes including a url.\n\n2. How is this code used in the project?\n   This code is likely used to define and enforce the structure of objects representing links in the Kulturdaten Frontend project.\n\n3. Are there any potential issues with this code?\n   There do not appear to be any obvious issues with this code, but it is possible that it may need to be updated or modified in the future as the project evolves.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/link.md"}}],["256",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/location.ts)\n\nThe code above defines several types and interfaces related to locations in the kulturdaten-frontend project. These types are used to represent and manipulate location data throughout the project.\n\nThe `Language` and `Accessibility` types are imported from other files in the project's codebase. The `Address`, `CategoryEntry`, `DefaultAttributes`, `OpeningHours`, `Organizer`, and `Service` types are also imported from other files in the same directory as this code.\n\nThe `LocationTranslation` type represents a translation of a location's name, description, or opening hours into a specific language. It includes a `language` property that specifies the language of the translation, as well as optional `name`, `description`, and `openingHours` properties that contain the translated text. This type extends the `Translation` interface, which includes an `id` property and a `type` property set to `'translation'`.\n\nThe `LocationType` enum defines two possible values for the `type` property of a `Location` object: `'virtual'` or `'physical'`.\n\nThe `Location` type represents a location in the kulturdaten-frontend project. It includes a `data` property that contains an object with several optional properties, including `id`, `attributes`, and `relations`. The `attributes` property includes optional properties such as `url`, `rentUrl`, and `type`, which specify various details about the location. The `relations` property includes optional properties such as `translations`, `organizer`, `address`, `openingHours`, `accessibility`, and `service`, which specify related data for the location. This type extends the `CategoryEntry` interface, which includes an `id` property and a `type` property set to `'location'`.\n\nThe `CreateLocation` type represents data used to create a new location. It includes an optional `relations` property that can include `links`, `translations`, and `address` properties.\n\nOverall, this code defines types and interfaces that are used to represent and manipulate location data throughout the kulturdaten-frontend project. These types are used in various parts of the project to ensure consistency and type safety when working with location data. For example, the `Location` type is used in components that display location information, while the `CreateLocation` type is used in functions that create new locations.\n## Questions: \n 1. What is the purpose of the `Location` type and what data does it contain?\n   - The `Location` type represents a location and contains data such as its ID, URLs, type (virtual or physical), translations, organizer, address, opening hours, accessibility, and service.\n2. What is the difference between `LocationTranslation` and `Translation` types?\n   - `LocationTranslation` is a specific type of translation that includes attributes such as language, name, description, and opening hours, while `Translation` is a more general type that can be used for any type of translation.\n3. What is the purpose of the `CreateLocation` type and what data does it contain?\n   - The `CreateLocation` type is used for creating a new location and contains data such as links, translations, and address. It does not contain all the data that the `Location` type contains, as some of that data may not be available when creating a new location.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/location.md"}}],["257",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/media.ts)\n\nThe code defines several types and interfaces that are used to represent media objects in the larger project. The `Media` type represents a media object and contains information such as copyright, creation and update dates, and rendition attributes such as width, height, and format. It also includes relations to translations, licenses, and renditions.\n\nThe `MediaTranslation` type represents a translation of a media object and includes the language and alternative text attributes. It extends the `Translation` interface, which defines common translation attributes such as title and description.\n\nThe `MediaLicense` type represents a license for a media object and includes the name and URL of the license.\n\nThe `RenditionAttributes` type represents the attributes of a media rendition, such as width, height, filesize, format, URL, and base.\n\nThe `CategoryEntry` interface is also included in the `Media` type, which defines common category attributes such as title and description.\n\nOverall, this code provides a structured way to represent media objects and their related translations, licenses, and renditions. It can be used throughout the larger project to ensure consistency and ease of use when working with media data. For example, it could be used in a media gallery component to display images and their associated translations and licenses.\n## Questions: \n 1. What is the purpose of the `Media` type and what does it contain?\n   \n   The `Media` type is used to represent media data and contains information such as copyright, creation and update dates, and rendition attributes such as width, height, and format. It also includes relations to translations, licenses, and renditions.\n\n2. What is the difference between `MediaLicense` and `MediaTranslation` types?\n   \n   `MediaLicense` type represents a media license and contains information such as name and URL. `MediaTranslation` type represents a translation of media and contains information such as language and alternative text. Both types are used as part of the `Media` type.\n\n3. What is the purpose of the `RenditionAttributes` type and what does it contain?\n   \n   The `RenditionAttributes` type is used to represent attributes of a media rendition, such as width, height, filesize, format, URL, and base. It is used as part of the `Media` type to describe the attributes of a media rendition.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/media.md"}}],["258",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/offer.ts)\n\nThe code defines types and interfaces for offers and offer dates in the context of the larger project, which appears to be a frontend for cultural event data. \n\nThe `Offer` type represents an offer for a cultural event, and includes attributes such as whether there is a fee, whether registration is required, and whether the offer is permanent. It also includes relations to other data types such as dates, links, locations, organizers, subjects, and translations. The `OfferDate` type represents a specific date for an offer, and includes attributes such as start and end times, status (scheduled, canceled, or past), and URLs for tickets and registration. Both `Offer` and `OfferDate` include relations to translations, which are represented by the `OfferTranslation` and `OfferDateTranslation` types respectively.\n\nThe code also defines several type aliases, such as `OfferType` and `OfferSubject`, which are equivalent to the `EntryType` and `EntrySubject` types defined in the `typeSubject` module. This suggests that the `Offer` and `OfferDate` types are building on top of more general data types defined elsewhere in the project.\n\nOverall, this code appears to be a foundational piece of the larger project, defining the data structures that will be used to represent cultural event offers and their associated dates, translations, and other metadata. Other modules in the project will likely use these types to create, update, and display offers and offer dates to users. For example, a module responsible for rendering a calendar view of events might use the `OfferDate` type to represent individual events on specific dates.\n## Questions: \n 1. What is the purpose of the `Offer` and `OfferDate` types?\n   - The `Offer` and `OfferDate` types are used to represent data related to cultural offers, including information about dates, locations, organizers, and translations.\n2. What is the difference between `OfferType` and `OfferMainType`?\n   - `OfferType` and `OfferMainType` are both types of cultural offer, but `OfferMainType` is used to represent the primary type of the offer, while `OfferType` can be used to represent additional types.\n3. What is the `CreateOffer` type used for?\n   - The `CreateOffer` type is used to represent data for creating a new cultural offer, including translations.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/offer.md"}}],["259",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/organizer.ts)\n\nThe code defines various types and interfaces related to organizers in the kulturdaten-frontend project. An organizer is an entity that can organize cultural events and activities. \n\nThe `Organizer` type is the main interface that defines the structure of an organizer. It has various attributes such as `homepage`, `email`, `phone`, and `relations` that include other related entities such as `links`, `subjects`, `translations`, `types`, `media`, `logo`, `tags`, `contacts`, `roles`, and `mainContact`. \n\nThe `OrganizerTranslation` type defines the structure of a translation for an organizer. It includes attributes such as `language`, `name`, and `description`. \n\nThe `CreateOrganizer` type is used for creating a new organizer. It includes relations such as `links`, `translations`, `address`, `types`, and `subjects`. \n\nThe other types and interfaces such as `OrganizerType`, `OrganizerSubject`, `OrganizerRole`, `OrganizerMainContact`, etc. are used to define related entities for an organizer. \n\nOverall, this code provides a structured way to define and manage organizers and their related entities in the kulturdaten-frontend project. It can be used to create, update, and retrieve organizers and their details. For example, to create a new organizer, one can use the `CreateOrganizer` type and provide the necessary details such as name, description, address, etc. and then send a request to the backend API to create the organizer. Similarly, to retrieve an organizer, one can use the `Organizer` type and send a request to the backend API to get the details of the organizer.\n## Questions: \n 1. What types of data can be included in an Organizer object?\n- An Organizer object can include attributes such as homepage, email, and phone, as well as relations such as links, subjects, translations, types, media, logo, tags, contacts, roles, and mainContact.\n\n2. What is the purpose of the OrganizerRolePending type?\n- The OrganizerRolePending type is used to represent a pending role for an organizer, which includes an ID, a role name, an email, and an optional isActive boolean.\n\n3. What is the difference between OrganizerType and OrganizerTypeTranslation?\n- OrganizerType represents the type of an organizer, while OrganizerTypeTranslation represents the translation of the type into a specific language.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/organizer.md"}}],["260",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/role.ts)\n\nThe code above defines several types and enums related to user roles in the kulturdaten-frontend project. \n\nFirst, it imports the Categories object from the config folder and the CategoryEntry and User types from other files in the same directory. \n\nNext, it defines an enum called RoleName, which has two possible values: 'owner' and 'editor'. This enum is used to specify the role of a user in relation to a particular resource (e.g. an event, location, or organization). \n\nThe code also defines a type called Role, which represents a user's role in the system. A Role object has several properties, including an optional id, a type (which can be one of three values: 'organizerrole', 'offerrole', or 'locationrole'), and an attributes object that contains information about the role, such as whether it is active and when it was created or updated. \n\nThe Role type also has a relations object, which contains information about the relationship between the user and the resource they have a role for. This object has keys that correspond to the Categories defined in the Categories object, and the values are CategoryEntry objects that contain data about the resource. Additionally, the relations object can contain a user property, which is either a User object or a string representing the user's ID. \n\nOverall, this code is used to define the structure of Role objects in the kulturdaten-frontend project. These objects are used to manage user permissions and access to various resources in the system. For example, a user with an 'owner' role for an event would have full control over that event, while a user with an 'editor' role would have more limited access. The Role type and related enums and types are likely used throughout the project to manage user roles and permissions.\n## Questions: \n 1. What is the purpose of the Categories import from the config folder?\n   - The Categories import is used to define the keys for the relations object in the Role type, which correspond to different categories of data.\n2. What is the significance of the RoleName enum?\n   - The RoleName enum defines the possible values for the \"role\" attribute in the Role type, which specifies the level of access a user has to certain data.\n3. What is the purpose of the User import and how is it used in the Role type?\n   - The User import is used to define the possible values for the \"user\" attribute in the Role type, which specifies the user associated with the role. It can be either a User object or a string representing the user's ID.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/role.md"}}],["261",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/service.ts)\n\nThe code above defines two types, `ServiceField` and `Service`, which are used to represent data related to services in the larger project. \n\nThe `ServiceField` type has three attributes: `type`, `key`, and `value`. These attributes are used to store information about a specific field related to a service. For example, a service may have a field called \"location\" with a value of \"Berlin\". In this case, the `type` attribute would be \"string\", the `key` attribute would be \"location\", and the `value` attribute would be \"Berlin\".\n\nThe `Service` type has several attributes, including `id`, `type`, and `relations`. The `id` attribute is used to store a unique identifier for the service, while the `type` attribute is always set to \"service\" to indicate that this data represents a service. The `relations` attribute is an object that contains information about the relationships between the service and other data in the project. In this case, the `relations` object contains a `fields` array, which is an array of `ServiceField` objects that represent the fields related to the service.\n\nOverall, this code is used to define the structure of data related to services in the larger project. This data can be used by other parts of the project to display information about services, search for specific services, and more. For example, a search function in the project may use the `ServiceField` attributes to filter services based on specific criteria, such as location or type of service. \n\nHere is an example of how this code might be used in the larger project:\n\n```typescript\nimport { Service, ServiceField } from './service';\n\nconst serviceFields: ServiceField[] = [\n  {\n    attributes: {\n      type: 'string',\n      key: 'location',\n      value: 'Berlin',\n    },\n  },\n  {\n    attributes: {\n      type: 'string',\n      key: 'type',\n      value: 'Museum',\n    },\n  },\n];\n\nconst service: Service = {\n  id: 1,\n  type: 'service',\n  relations: {\n    fields: serviceFields,\n  },\n};\n\nconsole.log(service);\n```\n\nIn this example, we create an array of `ServiceField` objects to represent the fields related to a specific service. We then create a `Service` object and set its `relations` attribute to an object containing the `serviceFields` array. Finally, we log the `service` object to the console to see its structure.\n## Questions: \n 1. **What is the purpose of the `Service` type?** The `Service` type is used to represent a service object, which may have an ID, a type, and a list of related fields.\n2. **What is the `ServiceField` type used for?** The `ServiceField` type is used to represent a single field within a service object, which has a type, a key, and a value.\n3. **Are there any required fields within the `Service` type?** No, all fields within the `Service` type are optional, including the ID, type, and related fields.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/service.md"}}],["262",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/tag.ts)\n\nThe code defines a TypeScript type called `Tag` and a type alias called `TagTranslation`. The `Tag` type has three properties: `id`, `type`, and `relations`. The `id` property can be either a number or a string, and it represents the unique identifier of the tag. The `type` property is optional and can only have the value `'tag'`. The `relations` property is an object that contains an array of `TagTranslation` objects.\n\nThe `TagTranslation` type is an alias for the `Translation` type defined in the `general.ts` file. This means that a `TagTranslation` object has the same properties as a `Translation` object, which includes a `language` property and a `value` property.\n\nThis code is used to define the structure of a tag object in the larger project. Tags are used to categorize cultural events and venues in the Kulturdaten-frontend project. The `Tag` type is used in various parts of the project, such as in the `Event` and `Venue` types, to indicate that an object can have one or more tags associated with it.\n\nHere is an example of how the `Tag` type can be used in the project:\n\n```typescript\nimport { Tag } from './tag';\n\ntype Event = {\n  id: number | string;\n  title: string;\n  description: string;\n  tags: Tag[];\n};\n```\n\nIn this example, the `Event` type has a `tags` property that is an array of `Tag` objects. This indicates that an event can have multiple tags associated with it.\n\nOverall, this code plays an important role in defining the structure of tags in the Kulturdaten-frontend project and how they can be used to categorize cultural events and venues.\n## Questions: \n 1. What is the purpose of the `Translation` import?\n   - The `Translation` import is used in the `TagTranslation` type definition.\n\n2. What is the purpose of the `Tag` type definition?\n   - The `Tag` type definition defines an object with an `id`, optional `type`, and a `relations` property that includes an array of `TagTranslation` objects.\n\n3. What is the expected data type for the `id` property in the `Tag` type definition?\n   - The `id` property in the `Tag` type definition can be either a number or a string.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/tag.md"}}],["263",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/typeSubject.ts)\n\nThe code defines several types and interfaces that are used in the larger project to represent different aspects of cultural events and organizations. \n\nThe `Language` type is imported from a configuration file and is used to specify the language of a translation. The `DefaultAttributes` type is imported from another file called `general.ts` and is used to specify default attributes for an entry type. \n\nThe `EntryTypeTranslation` type represents a translation for an entry type and includes the language and name attributes as well as the `Translation` interface, which specifies the actual translation text. \n\nThe `EntrySubjectTranslation` type is identical to `EntryTypeTranslation` and is used to represent a translation for an entry subject. \n\nThe `EntrySubject` type represents an entry subject, which can be either an organizer or an offer. It includes a `type` attribute to specify the type of subject, an `id` attribute to specify the ID of the subject, and an optional `relations` attribute that can include translations for the subject. \n\nThe `EntryType` type represents an entry type, which can be an organizer type. It includes a `type` attribute to specify the type of entry, an `id` attribute to specify the ID of the entry, an `attributes` attribute to specify default attributes for the entry type, and an optional `relations` attribute that can include translations and subjects for the entry type. \n\nThese types and interfaces are likely used throughout the larger project to represent different aspects of cultural events and organizations. For example, the `EntryType` type may be used to represent different types of cultural organizations, while the `EntrySubject` type may be used to represent different subjects or topics related to cultural events. \n\nHere is an example of how the `EntryType` type might be used in code:\n\n```\nconst entryType: EntryType = {\n  type: 'organizertype',\n  id: 1,\n  attributes: {\n    name: 'Museum',\n    description: 'A cultural institution that displays objects of artistic, cultural, or scientific significance',\n    icon: 'museum.png'\n  },\n  relations: {\n    translations: [\n      {\n        attributes: {\n          language: 'en',\n          name: 'Museum'\n        },\n        text: 'A cultural institution that displays objects of artistic, cultural, or scientific significance'\n      },\n      {\n        attributes: {\n          language: 'de',\n          name: 'Museum'\n        },\n        text: 'Eine kulturelle Institution, die Objekte von künstlerischer, kultureller oder wissenschaftlicher Bedeutung ausstellt'\n      }\n    ]\n  }\n};\n```\n\nIn this example, an `EntryType` object is created to represent a museum. The `attributes` attribute specifies default attributes for the museum, including its name, description, and icon. The `relations` attribute includes translations for the museum in both English and German.\n## Questions: \n 1. What is the purpose of the `EntryType` and `EntrySubject` types?\n   - The `EntryType` type represents an organization type and the `EntrySubject` type represents either an organizer or an offer subject. \n2. What is the `DefaultAttributes` type used for?\n   - The `DefaultAttributes` type is used as a property of the `EntryType` type to define default attributes for an organization type. \n3. What is the `relations` property used for in the `EntryType` and `EntrySubject` types?\n   - The `relations` property is used to define relationships between an organization type and its translations or subjects in the case of `EntryType`, and between a subject and its translations in the case of `EntrySubject`.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/typeSubject.md"}}],["264",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/user.ts)\n\nThe code above defines two types: CategoriesPlural and User. CategoriesPlural is imported from a configuration file and is used to define the relations property of the User type. The User type is an object that represents a user in the system. It has an id, type, and attributes property. The attributes property is an object that contains various properties related to the user, such as email, password, and status. The relations property is an optional object that contains the user's roles for each category defined in CategoriesPlural.\n\nThe UserStatus enum is also defined, which has two values: active and pending. This enum is used to define the status property of the User type.\n\nThis code is likely used throughout the larger project to represent and manipulate user data. For example, when a user logs in, their information may be stored as a User object. When displaying a user's information, the attributes property can be used to show their email and status. The relations property can be used to show the user's roles for each category.\n\nHere is an example of how this code may be used in the larger project:\n\n```\nimport { User, UserStatus } from './user';\n\nconst user: User = {\n  id: 1,\n  type: 'user',\n  attributes: {\n    email: 'example@example.com',\n    password: 'password',\n    status: UserStatus.active,\n    createdAt: '2021-01-01',\n    updatedAt: '2021-01-01',\n    rememberMeToken: 'token',\n    isSuperuser: false,\n    acceptedTermsAt: '2021-01-01',\n    hasAcceptedCurrentTerms: true,\n  },\n  relations: {\n    events: [\n      {\n        id: 1,\n        type: 'role',\n        attributes: {\n          name: 'organizer',\n        },\n      },\n    ],\n  },\n};\n\nconsole.log(user.attributes.email); // Output: 'example@example.com'\nconsole.log(user.attributes.status); // Output: 'active'\nconsole.log(user.relations.events[0].attributes.name); // Output: 'organizer'\n```\n\nIn this example, a User object is created with some sample data. The console.log statements show how the email, status, and role information can be accessed from the User object.\n## Questions: \n 1. What is the purpose of the CategoriesPlural import?\n   - The CategoriesPlural import is used to define the keys for the relations property in the User type.\n\n2. What is the Role import used for?\n   - The Role import is used to define the type of the values for each key in the relations property in the User type.\n\n3. What is the significance of the UserStatus enum?\n   - The UserStatus enum is used to define the possible values for the status property in the attributes object of the User type.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/user.md"}}],["265",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/api/types/webLink.ts)\n\nThe code above defines a TypeScript type called `WebLink`. This type represents a web link object that has an `id`, a `type`, and an `attributes` object. The `id` is a number that uniquely identifies the web link. The `type` is a string that specifies the type of the object, which in this case is always `'link'`. The `attributes` object contains a single property called `url`, which is a string that represents the URL of the web link.\n\nThis type is likely used in the larger project to represent web links that are associated with cultural data. For example, if the project is a cultural database, the `WebLink` type could be used to represent links to external websites that provide more information about a particular cultural artifact or event. \n\nHere is an example of how the `WebLink` type could be used in code:\n\n```typescript\nimport { WebLink } from './web-link';\n\nconst link: WebLink = {\n  id: 1,\n  type: 'link',\n  attributes: {\n    url: 'https://example.com',\n  },\n};\n\nconsole.log(link.attributes.url); // Output: 'https://example.com'\n```\n\nIn this example, we import the `WebLink` type from the `web-link` module. We then create a new `WebLink` object called `link` with an `id` of `1` and a `url` of `'https://example.com'`. Finally, we log the `url` property of the `attributes` object to the console, which outputs `'https://example.com'`. \n\nOverall, the `WebLink` type provides a convenient way to represent web links in the project and ensures that all web link objects have the same structure.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a TypeScript type called `WebLink` that represents a link with an ID and a URL.\n\n2. How is this code used in the project?\n   This code is likely used in various parts of the project where links need to be represented and manipulated.\n\n3. Are there any potential issues with this code?\n   One potential issue is that the `id` property is defined as a number, which could lead to unexpected behavior if it is used as an index or compared to a string. It may be better to define it as a string or use a separate property for indexing purposes.","metadata":{"source":".autodoc/docs/markdown/lib/api/types/webLink.md"}}],["266",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/appTokenList.ts)\n\nThe code above is a React hook that fetches a list of app tokens from an API endpoint using the SWR library. The purpose of this hook is to provide a convenient way for other components in the project to access and manipulate the list of app tokens.\n\nThe hook is exported as `useAppTokenList` and takes no arguments. When called, it returns an object with two properties: `appTokens` and `mutate`.\n\nThe `appTokens` property is an array of app token attributes. These attributes are defined in the `AppToken` type, which is imported from `./api/types/appToken`. The `data` property of the app token response is accessed using the optional chaining operator (`?.`) and the `body` and `meta` properties are used to extract the app token attributes.\n\nThe `mutate` property is a function that can be called to trigger a re-fetch of the app token list. This can be useful if the list has been updated by another component and needs to be refreshed.\n\nThe hook uses the `useApiCall` function from `./api` to make the API request. This function returns a function that takes a factory function and optional arguments. The factory function in this case is `appTokenListFactory`, which is imported from `./api/routes/appToken/list`. This function generates the request payload for the app token list endpoint.\n\nThe `useSWR` function from the SWR library is used to handle the caching and re-fetching of the app token list. The first argument to `useSWR` is the API endpoint URL, which is imported from `./api`. The second argument is a function that returns the result of calling the `appTokenListFactory` function using the `call` function from `./api`. The third argument is an options object that disables revalidation on focus and sets a focus throttle interval of 5 minutes.\n\nOverall, this hook provides a simple and efficient way for other components in the project to access and manipulate the app token list. It abstracts away the details of making the API request and handling the caching and re-fetching of the data.\n## Questions: \n 1. What is the purpose of the `useAppTokenList` function?\n   - The `useAppTokenList` function is used to fetch a list of app tokens from the API and return them along with a `mutate` function to update the data.\n\n2. What is the `useSWR` hook and how is it used in this code?\n   - `useSWR` is a data fetching hook that is used to fetch data from the API and manage the state of the data. In this code, it is used to fetch the app token list from the API and revalidate the data when necessary.\n\n3. What is the `AppToken` type and where is it defined?\n   - The `AppToken` type is a custom type defined in the `./api/types/appToken` file. It represents the structure of an app token object returned by the API and is used in this code to define the shape of the app token data.","metadata":{"source":".autodoc/docs/markdown/lib/appTokenList.md"}}],["267",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/cookies.ts)\n\nThe code above defines three functions related to browser cookies: `getCookie`, `setCookie`, and `deleteCookie`. These functions are used to retrieve, create, and delete cookies, respectively. \n\nThe `Cookie` type is defined as an object with four optional properties: `name`, `value`, `path`, `domain`, and `max-age`. The `name` and `value` properties are required, while the other properties are optional. \n\nThe `getCookie` function takes a `name` parameter and returns a `Cookie` object that describes the browser cookie with the specified name. The function first checks if the `document` object is defined (i.e., if the code is running in a browser environment). If it is, the function splits the `document.cookie` string into an array of individual cookies, filters the array to find the cookie with the specified name, and reduces the filtered array to a single `Cookie` object. If the `document` object is not defined, the function returns `undefined`.\n\nThe `setCookie` function takes a `Cookie` object as a parameter and sets a new cookie in the browser with the specified properties. The function uses the `document.cookie` property to set the cookie string with the `name`, `value`, `path`, `domain`, and `max-age` properties. \n\nThe `deleteCookie` function takes a `Cookie` object as a parameter and deletes the browser cookie with the specified name. The function sets the `document.cookie` property to a string that includes the `name`, `path`, and `domain` properties, as well as an `expires` property set to a date in the past. This causes the browser to delete the cookie. \n\nThese functions are likely used throughout the larger project to manage user authentication and session data. For example, the `setCookie` function may be used to create a cookie that stores a user's authentication token, while the `getCookie` function may be used to retrieve that token when the user navigates to a new page. The `deleteCookie` function may be used to log the user out by deleting the authentication token cookie.\n## Questions: \n 1. What is the purpose of the `Cookie` type and how is it used in this code?\n   \n   The `Cookie` type is a TypeScript interface that defines the structure of a browser cookie. It is used as the input and output type for the `getCookie`, `setCookie`, and `deleteCookie` functions.\n\n2. How does the `getCookie` function work and what does it return?\n   \n   The `getCookie` function takes a string `name` as input and returns a `Cookie` object that describes the browser cookie with the matching name. It does this by first checking if the `document` object is defined (i.e. if the code is running in a browser environment), then splitting the `document.cookie` string into an array of individual cookies, filtering that array to only include the cookie with the matching name, and finally reducing that filtered array into a single `Cookie` object.\n\n3. What is the purpose of the `max-age` property in the `setCookie` function and how is it used?\n   \n   The `max-age` property is an optional number that represents the maximum age of the cookie in seconds. It is used to set the `Max-Age` attribute of the cookie in the `document.cookie` string. If `maxAge` is defined, the `Max-Age` attribute is set to that value, otherwise it is omitted.","metadata":{"source":".autodoc/docs/markdown/lib/cookies.md"}}],["268",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/date.ts)\n\nThe code defines a custom hook `useDate` that returns a function that takes a `Date` object and a `DateFormat` enum value as arguments and returns a formatted string representing the date in the specified format. The `useDate` hook uses the `useLocale` and `useT` hooks from other modules to get the current locale and translation functions, respectively.\n\nThe `DateFormat` enum defines four possible values: `date`, `time`, `dateTime`, and `dayDateTime`. The `dateFormatPatternMap` object from the `../config/locales` module maps each `DateFormat` value to a locale-specific date format string. The `format` function from the `date-fns` library is used to format the date object using the appropriate format string.\n\nIf the `DateFormat` value is `dayDateTime`, the formatted date string is prefixed with the abbreviated weekday name (e.g. \"Mon.\") followed by a space. The weekday names are defined in the `weekdays` array of objects, where each object has a `name` property with `long` and `short` string values for the weekday name.\n\nThis hook can be used in other components to format dates according to the current locale and display them in a user-friendly way. For example, a list of events could use this hook to display the event dates in a format like \"Mon. 12/31/2022 7:00 PM\" or \"12/31/2022\". The `useDate` hook abstracts away the details of date formatting and localization, making it easier to maintain consistent date formatting across the application.\n## Questions: \n 1. What is the purpose of the `useDate` function?\n- The `useDate` function returns a function that takes a `Date` object and a `DateFormat` enum as arguments and returns a formatted string representation of the date according to the specified format and locale.\n\n2. What is the `weekdays` constant used for?\n- The `weekdays` constant is an array of objects that represent the names of the days of the week in long and short formats, which are used in the `useDate` function to format dates in the `dayDateTime` format.\n\n3. What are the dependencies of the `useDate` function?\n- The `useDate` function depends on the `useLocale` and `useT` hooks from the `./routing` and `./i18n` modules, respectively, as well as the `dateFormatPatternMap` constant from the `../config/locales` module and the `format` and `getDay` functions from the `date-fns` library.","metadata":{"source":".autodoc/docs/markdown/lib/date.md"}}],["269",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/format.ts)\n\nThe code above is a module that exports functions to format JSON data and generate HTML nodes for displaying the formatted data. The module uses the `dompurify` library to sanitize the generated HTML to prevent cross-site scripting (XSS) attacks.\n\nThe `JsonParts` enum defines the different parts of a JSON object that can be formatted, including keys, strings, numbers, booleans, null values, and symbols. The `generateSpan` function takes a `JsonParts` value and an optional string value and returns an HTML span element with a class corresponding to the `JsonParts` value and the string value as its content. The `createHtmlNodes` function takes a string value and determines its `JsonParts` type based on its content. It then calls `generateSpan` to create an HTML span element with the appropriate class and returns it as a string.\n\nThe `formatJSON` function takes an unknown value and converts it to a JSON string using `JSON.stringify`. It then uses a regular expression to split the string into its different parts and calls `generateSpan` and `createHtmlNodes` to format each part as an HTML span element. Finally, it uses `dompurify` to sanitize the generated HTML and returns it as a string.\n\nThis module can be used in the larger project to display JSON data in a formatted and readable way. It can be imported and used in any component that needs to display JSON data, such as a search results page or a details page for a cultural event. For example, a component that displays a list of events could use this module to format the event data as JSON and display it in a table or card format. The sanitized HTML can be safely inserted into the component's template using Angular's `innerHTML` binding.\n## Questions: \n 1. What is the purpose of the `formatJSON` function?\n- The `formatJSON` function takes in an unknown content and returns a prettified and sanitized JSON string with HTML nodes.\n\n2. What is the purpose of the `createHtmlNodes` function?\n- The `createHtmlNodes` function takes in a string value and returns an HTML span element with a class based on the type of the value (e.g. string, number, boolean, null).\n\n3. What is the purpose of the `JsonParts` enum?\n- The `JsonParts` enum defines the different types of JSON values (e.g. key, string, number, boolean, null, symbol) as constants with string values.","metadata":{"source":".autodoc/docs/markdown/lib/format.md"}}],["270",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/generalTypes.ts)\n\nThis code defines several types and enums that are used throughout the kulturdaten-frontend project. \n\nThe `StandardLinkType` enum defines two possible values for the `type` property of a `StandardLink`: `internal` and `external`. A `StandardLink` is a type that represents a link with a title and a URL, along with a type that indicates whether the link is internal (within the same website) or external (to a different website). \n\nThe `StandardLinkInternal` type is a subset of `StandardLink` that excludes the `type` property. This is useful when working with links that are guaranteed to be internal, since the `type` property is redundant in that case. \n\nThe `ComponentVariants` enum defines two possible values for the `variant` property of a `ComponentWithVariants`: `default` and `formList`. A `ComponentVariant` is a type that represents a string that can be either one of these two values or any other string. A `ComponentWithVariants` is an interface that defines an optional `variant` property that can be of type `ComponentVariant`. This is useful when defining components that can have different visual styles or behaviors depending on the value of the `variant` property. \n\nOverall, this code provides a set of reusable types and enums that can be used throughout the kulturdaten-frontend project to ensure consistency and reduce duplication. For example, a component that displays a list of links could use the `StandardLink` type to represent each link, and a component that can have different visual styles could use the `ComponentWithVariants` interface to define its `variant` property.\n## Questions: \n 1. What is the purpose of the `StandardLink` type and `StandardLinkType` enum?\n   - The `StandardLink` type defines an object with a title, href, and type property, while the `StandardLinkType` enum defines the possible values for the type property (either 'internal' or 'external').\n2. What is the `StandardLinkInternal` type and how is it different from `StandardLink`?\n   - The `StandardLinkInternal` type is a subset of `StandardLink` that excludes the `type` property. This suggests that there may be cases where a link object is needed without specifying its type.\n3. What is the purpose of the `ComponentVariants` enum and `ComponentWithVariants` interface?\n   - The `ComponentVariants` enum defines the possible variants for a component, while the `ComponentWithVariants` interface allows a component to have an optional `variant` property that can be set to one of the defined variants or a custom string. This allows for more flexible and customizable components.","metadata":{"source":".autodoc/docs/markdown/lib/generalTypes.md"}}],["271",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/genericForm.ts)\n\nThis file defines a set of types and interfaces that are used to define form fields and categories in the larger project. The purpose of this code is to provide a standardized way of defining form fields and categories that can be used across the project.\n\nThe `GenericFormField` interface defines a generic form field that can be of various types, such as `select`, `input`, `textarea`, `radioList`, `checkboxList`, `tags`, or `conditional`. Each form field has a `key` that is used to identify it, a `type` that specifies the type of the field, and a `data` object that contains additional information specific to the type of the field. For example, an `input` field has a `type` property that specifies the type of input (e.g. `url`, `number`, `email`, `text`, or `tel`), while a `select` field has an `options` property that specifies the available options.\n\nThe `GenericFormCategory` interface defines a category of form fields, which is a collection of `GenericFormFieldGroup` objects. Each group contains a set of form fields that are logically related, and can be collapsed or expanded depending on the user's preference.\n\nThe `GenericFormFieldConditional` interface defines a form field that is conditionally displayed based on the value of another field. It contains a `fields` property that is an array of form fields that are displayed when the condition is met.\n\nOverall, this code provides a flexible and extensible way of defining form fields and categories that can be used throughout the project. For example, a form for creating a new event could use these types to define the various fields and categories needed to collect information about the event.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines types and interfaces for form fields and categories in the kulturdaten-frontend project.\n\n2. What are some examples of form field types that are defined in this code?\n   Examples of form field types defined in this code include select, input, textarea, radioList, checkboxList, tags, and conditional.\n\n3. What is the purpose of the GenericFormCategory interface?\n   The GenericFormCategory interface defines a category of form fields, which can contain multiple groups of form fields and can be collapsible.","metadata":{"source":".autodoc/docs/markdown/lib/genericForm.md"}}],["272",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/i18n.ts)\n\nThe code above is a module that provides localization functionality for the kulturdaten-frontend project. It exports two functions: `t` and `useT`. \n\nThe `t` function is used to access localized content. It takes three parameters: `locale`, `key`, and `params`. The `locale` parameter specifies the requested locale, which is an enum defined in the `locales.ts` file. The `key` parameter is a string in dot-notation that specifies the key to the entry in the localization object. The `params` parameter is an optional object that contains parameters needed by the entry. The function returns a string or a rendered React element.\n\nThe `useT` function is a hook that returns the `t` function with the current locale already injected. It uses the `useLocale` hook from the `routing.ts` file to get the current locale. It then uses the `useMemo` hook to memoize the corrected locale, which is the current locale or the default locale if the current locale is undefined or the catch-all locale. Finally, it uses the `useCallback` hook to memoize the `t` function with the corrected locale already injected. The function returns the memoized `t` function or a function that returns undefined if the corrected locale is undefined.\n\nThe module also defines two types: `LocalizationParams` and `Localization`. The `LocalizationParams` type is an object that contains parameters needed by a localization entry. The `Localization` type is an object that contains localization entries. A localization entry can be either a `localizationFunction` or another `Localization` object. A `localizationFunction` is a function that takes a `LocalizationParams` object and returns a string or a rendered React element.\n\nOverall, this module provides a simple and flexible way to localize content in the kulturdaten-frontend project. Developers can use the `t` function to access localized content and the `useT` hook to access the `t` function with the current locale already injected. The module also provides types for localization parameters and entries, making it easier to write and maintain localized content.\n## Questions: \n 1. What is the purpose of the `t` function?\n   \n   The `t` function is used to access localized contents based on the requested locale, key, and optional parameters, and returns a string or rendered ReactElement.\n\n2. What is the purpose of the `useT` hook?\n   \n   The `useT` hook is used to provide the `t` function with the current locale without manually injecting it, and returns a callback function that can be used to access localized contents.\n\n3. What is the purpose of the `Localization` type?\n   \n   The `Localization` type is used to define a nested object structure that contains either a localization function or another `Localization` object, which is used to organize and access localized contents in a hierarchical manner.","metadata":{"source":".autodoc/docs/markdown/lib/i18n.md"}}],["273",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/number.ts)\n\nThe code above defines a custom hook called `useFormatNumber` that formats a given number according to the user's language and specified options. It uses another custom hook called `useLanguage` from the `routing` module to determine the user's language.\n\nThe `useFormatNumber` hook returns a function that takes in a number and an optional object of `Intl.NumberFormatOptions` and returns a formatted string. The `Intl.NumberFormat` constructor is used to create a new number formatter based on the user's language and the specified options. The `format` method of the number formatter is then called on the input number to produce the formatted string.\n\nThis hook can be used in various parts of the project where numbers need to be formatted based on the user's language and specific formatting options. For example, it can be used to format prices, ratings, or any other numerical data displayed on the user interface.\n\nHere is an example of how the `useFormatNumber` hook can be used in a React component:\n\n```\nimport { useFormatNumber } from './useFormatNumber';\n\nconst MyComponent = ({ price }) => {\n  const formatNumber = useFormatNumber();\n\n  return (\n    <div>\n      Price: {formatNumber(price, { style: 'currency', currency: 'EUR' })}\n    </div>\n  );\n};\n```\n\nIn the example above, the `useFormatNumber` hook is used to format the `price` prop as a currency in Euros. The `formatNumber` function returned by the hook is called with the `price` and the specified options, and the resulting formatted string is displayed in the component.\n## Questions: \n 1. What is the purpose of the `useLanguage` function imported from `./routing`?\n   - The `useLanguage` function is used to determine the language to be used for number formatting.\n2. What is the expected input for the `useFormatNumber` function?\n   - The `useFormatNumber` function expects a number and an optional object of `Intl.NumberFormatOptions`.\n3. What is the expected output of the `useFormatNumber` function?\n   - The `useFormatNumber` function returns a string representing the formatted number based on the input number and options.","metadata":{"source":".autodoc/docs/markdown/lib/number.md"}}],["274",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/random.ts)\n\nThe code above is a custom React hook called `useRandomInt` that generates a random integer between a minimum and maximum value. It uses the `useMemo` hook from React to memoize the result of the calculation and only recompute it when the dependencies (`min` and `max`) change.\n\nThe purpose of this hook is to provide a reusable way to generate random integers within a specific range. It can be used in various parts of the project where randomization is required, such as in generating unique IDs or randomizing the order of items in a list.\n\nTo use this hook, import it from the file where it is defined and call it with the desired minimum and maximum values. For example:\n\n```\nimport { useRandomInt } from './useRandomInt';\n\nconst randomId = useRandomInt(1000, 9999);\n```\n\nThis would generate a random integer between 1000 (inclusive) and 9999 (exclusive) and assign it to the `randomId` variable.\n\nOverall, this code provides a simple and reusable solution for generating random integers within a specific range in a React project.\n## Questions: \n 1. What is the purpose of the `useMemo` hook in this code?\n   - The `useMemo` hook is used to memoize the result of the random integer calculation, so that it is only recalculated when the `min` or `max` values change.\n\n2. What is the expected input for the `useRandomInt` function?\n   - The `useRandomInt` function expects two number parameters: `min` and `max`. `min` is the minimum value of the range (inclusive), and `max` is the maximum value of the range (exclusive).\n\n3. What is the expected output of the `useRandomInt` function?\n   - The expected output of the `useRandomInt` function is a random integer value that is greater than or equal to `min` and less than `max`.","metadata":{"source":".autodoc/docs/markdown/lib/random.md"}}],["275",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/routing.ts)\n\nThe code provided is a collection of React hooks and utility functions that are used to manage routing and localization in the kulturdaten-frontend project. \n\nThe `useIsRouteStringActive` hook takes a route string and returns a boolean indicating whether that route is currently active. It accomplishes this by comparing the route string to the current URL path using the `useRouter` hook from Next.js. \n\nThe `useIsRouteActive` hook takes a `Routes` enum identifier, a `Locale` object, and an optional query object and returns a boolean indicating whether the specified route is currently active. It uses the `isRouteActive` function to compare the current URL path to the specified route. \n\nThe `useActiveRoute` hook returns the currently active route as a `Routes` enum identifier. It uses the `getActiveRoute` function to determine the active route based on the current URL path and the specified locale and query parameters. \n\nThe `useLocale` hook returns the current locale as a `Locale` object. It uses the `useRouter` hook to access the current locale. \n\nThe `useLanguage` hook returns the current language as a `Language` object. It uses the `useLocale` hook to access the current locale and the `localeLanguageMap` object to map the locale to a language. \n\nThe `useSwitchLocale` hook returns a function that can be used to switch the current locale. It uses the `useRouter` and `useActiveRoute` hooks to determine the current route and then uses the `routes` object to generate a new URL path with the specified locale and query parameters. It then uses the `router.push` method to navigate to the new URL and sets a cookie to remember the user's locale preference. \n\nOverall, these hooks and utility functions provide a convenient way to manage routing and localization in the kulturdaten-frontend project. They can be used to determine the currently active route, switch the current locale, and more.\n## Questions: \n 1. What is the purpose of the `useIsRouteStringActive` function?\n   \n   The `useIsRouteStringActive` function is used to determine if a given route string represents the currently active route.\n\n2. What is the purpose of the `useSwitchLocale` function?\n   \n   The `useSwitchLocale` function provides a function to switch the locale in the frontend.\n\n3. What is the purpose of the `useLanguage` function?\n   \n   The `useLanguage` function is used to get the language based on the current locale.","metadata":{"source":".autodoc/docs/markdown/lib/routing.md"}}],["276",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/sortTranslations.ts)\n\nThe code provided is a TypeScript module that exports a function called `sortByTranslation`. This function takes an array of objects and sorts them based on a specified translation key and language. The function is used to sort entries in the Kulturdaten Frontend project, which is a web application that provides information about cultural events and venues in Berlin.\n\nThe `sortByTranslation` function takes four parameters: `entries`, `language`, `order`, and `key`. The `entries` parameter is an array of objects that have a `relations` property, which contains an array of `translations`. The `language` parameter is an enum that specifies the language to use for sorting. The `order` parameter is an enum that specifies the order of the sort (ascending or descending). The `key` parameter is a string that specifies the translation key to use for sorting.\n\nThe function first normalizes the translation strings by replacing special characters with their ASCII equivalents. It then uses the `getTranslation` function to retrieve the translation for the specified language and key for each object in the `entries` array. If a translation is not found, an empty string is used instead. The function then compares the normalized translation strings and returns the sorted array of objects.\n\nHere is an example usage of the `sortByTranslation` function:\n\n```typescript\nimport { sortByTranslation } from './utils';\n\nconst entries = [\n  { name: 'Bühne', relations: { translations: [{ attributes: { name: 'Stage' } }] } },\n  { name: 'Museum', relations: { translations: [{ attributes: { name: 'Museum' } }] } },\n  { name: 'Kino', relations: { translations: [{ attributes: { name: 'Cinema' } }] } },\n];\n\nconst sortedEntries = sortByTranslation(entries, Language.EN, Order.ASC, 'name');\nconsole.log(sortedEntries);\n// Output: [{ name: 'Bühne', ... }, { name: 'Kino', ... }, { name: 'Museum', ... }]\n```\n\nIn this example, the `entries` array contains three objects with different translations for the `name` key. The `sortByTranslation` function is called with the `entries` array, the `Language.EN` enum (which specifies English), the `Order.ASC` enum (which specifies ascending order), and the `name` key. The resulting `sortedEntries` array is then logged to the console, which outputs the objects sorted by their English translations of the `name` key.\n## Questions: \n 1. What is the purpose of the `normalizeTranslationString` function?\n- The `normalizeTranslationString` function is used to convert special characters in a string to their ASCII equivalents.\n\n2. What is the `sortByTranslation` function used for?\n- The `sortByTranslation` function is used to sort an array of objects based on a specified key and language, using the translations of that key in the specified language.\n\n3. What are the parameters of the `sortByTranslation` function?\n- The `sortByTranslation` function takes in an array of objects, a language enum, an optional order enum (defaulting to ascending), and an optional key string (defaulting to 'name').","metadata":{"source":".autodoc/docs/markdown/lib/sortTranslations.md"}}],["277",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/translations.ts)\n\nThe code above defines a function called `getTranslation` that is used to retrieve a translation object based on the specified language. The function takes in three parameters: `language`, `translations`, and `fallback`. \n\nThe `language` parameter is of type `Language` and represents the language code for the desired translation. The `translations` parameter is an array of objects that implement the `Translation` interface. The `fallback` parameter is a boolean that determines whether or not to fallback to the default language if the desired translation is not found.\n\nThe function first attempts to find the translation object that matches the specified language by using the `find` method on the `translations` array. It checks if the `language` property of the `attributes` object of each translation object matches the specified `language`. If a match is found, the function returns the corresponding translation object.\n\nIf a match is not found and `fallback` is set to `true`, the function attempts to find the translation object that matches the default language by using the `find` method again. It checks if the `language` property of the `attributes` object of each translation object matches the `defaultLanguage` constant imported from the `../config/locale` module. If a match is found, the function returns the corresponding translation object.\n\nIf neither a match for the specified language nor the default language is found, the function returns `undefined`.\n\nThis function is likely used throughout the larger project to retrieve translations for various UI elements based on the user's selected language. An example usage of this function might look like:\n\n```\nimport { getTranslation } from './translationUtils';\nimport { translations } from './translations';\n\nconst currentLanguage = 'de'; // or some other language code\nconst translation = getTranslation(currentLanguage, translations);\n\nconsole.log(translation); // outputs the translation object for the specified language or the default language if fallback is enabled\n```\n## Questions: \n 1. What is the purpose of the `getTranslation` function?\n   - The `getTranslation` function is used to retrieve a translation object based on the specified language and a list of translations.\n\n2. What is the `fallback` parameter used for?\n   - The `fallback` parameter is used to determine whether or not to return a default translation object if a translation for the specified language is not found.\n\n3. What is the `Translation` type used for?\n   - The `Translation` type is used to define the shape of a translation object, which includes an `attributes` property that contains information about the language and other translation-specific details.","metadata":{"source":".autodoc/docs/markdown/lib/translations.md"}}],["278",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/uid.ts)\n\nThe code above is a React hook that generates a pseudo unique ID. The purpose of this hook is to provide a unique identifier for non-critical functions within the larger project. \n\nThe `usePseudoUID` hook uses the `useMemo` hook from React to memoize the result of the `getPseudoUID` function. This means that the `getPseudoUID` function will only be called once and the result will be cached for future use. The `useMemo` hook takes two arguments: a function that returns a value and an array of dependencies. In this case, the function is `getPseudoUID` and the array of dependencies is an empty array, which means that the function will only be called once when the component is mounted.\n\nThe `getPseudoUID` function generates a random number between 0 and 10^13 and returns it as a string. This string is then concatenated with the string \"uid-\" to create a unique identifier in the form \"uid-000000000000\".\n\nThis hook can be used in any component that needs a unique identifier for non-critical functions. For example, it could be used to generate a unique key for a list of items in a React component:\n\n```\nimport { usePseudoUID } from './usePseudoUID';\n\nconst MyComponent = () => {\n  const items = ['apple', 'banana', 'orange'];\n  const keys = items.map(() => usePseudoUID());\n\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li key={keys[index]}>{item}</li>\n      ))}\n    </ul>\n  );\n};\n```\n\nIn this example, the `usePseudoUID` hook is used to generate a unique key for each item in the `items` array. The `keys` array is then used as the `key` prop for each `li` element in the list. This ensures that each item in the list has a unique identifier, which is important for performance reasons in React.\n## Questions: \n 1. **What is the purpose of this code?** \n\nThis code generates a pseudo unique ID for non-critical functions in a React project.\n\n2. **What is the difference between `usePseudoUID` and `getPseudoUID` functions?**\n\n`usePseudoUID` is a custom React hook that uses `getPseudoUID` to generate a pseudo unique ID and memoizes the result. `getPseudoUID` is a standalone function that generates a pseudo unique ID.\n\n3. **What is the format of the generated ID?**\n\nThe generated ID is in the form of a string that starts with \"uid-\" followed by 12 digits of random numbers (e.g. \"uid-123456789012\").","metadata":{"source":".autodoc/docs/markdown/lib/uid.md"}}],["279",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/useConfirmExit.ts)\n\nThe code defines a custom hook called `useConfirmExit` that is used to warn users before they leave a page. The hook takes in three arguments: `shouldWarn`, a boolean that determines whether the user should be warned before leaving the page; `message`, a string that contains the warning message to be displayed to the user; and `onAbort`, an optional callback function that is called when the user decides to stay on the page.\n\nThe hook uses several other hooks and context providers to determine whether the user should be warned before leaving the page. It uses the `useRouter` hook from the `next/router` package to get the current route and listen for route changes. It also uses the `useContext` hook to get the `UserContext` and `WindowContext` contexts, which contain information about the user and the current window.\n\nThe hook sets up several event listeners to detect when the user is about to leave the page. It listens for the `beforeunload` event, which is triggered when the user tries to close the window or navigate away from the page. It also listens for the `routeChangeStart` event, which is triggered when the user navigates to a new page within the app.\n\nWhen the user tries to leave the page, the hook checks whether the user is authenticated and whether they have already been warned about leaving the page. If the user is authenticated and has not been warned, the hook displays the warning message and waits for the user to confirm or cancel. If the user confirms, the hook calls the `onAbort` callback function (if provided) and allows the user to leave the page. If the user cancels, the hook prevents the user from leaving the page and continues to listen for further attempts to leave.\n\nOverall, this hook is used to provide a warning to users before they leave a page, which can be useful in preventing accidental navigation away from important information or unsaved changes. It can be used in any component that needs to provide this functionality, and can be customized with different warning messages and callback functions.\n## Questions: \n 1. What is the purpose of the `useConfirmExit` hook?\n- The `useConfirmExit` hook is used to warn the user before they navigate away from the current page if certain conditions are met, such as if the user is authenticated and the page has been rendered.\n\n2. What are the parameters of the `useConfirmExit` hook?\n- The `useConfirmExit` hook takes in three parameters: `shouldWarn` (a boolean indicating whether the user should be warned before navigating away), `message` (the message to display in the warning), and `onAbort` (an optional callback function to execute if the user chooses to abort the navigation).\n\n3. What React hooks are used in the `useConfirmExit` hook?\n- The `useConfirmExit` hook uses the `useRouter` and `useContext` hooks from the `next/router` and `react` packages, respectively, as well as the `useLocale` hook from a custom `routing` module and the `useContext` hook from a custom `WindowService` module. It also uses the `useEffect` hook to set up and clean up event listeners.","metadata":{"source":".autodoc/docs/markdown/lib/useConfirmExit.md"}}],["280",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/useDebounce.ts)\n\nThe code above is a custom React hook called `useDebounce` that allows for debouncing a function call. Debouncing is a technique used to limit the number of times a function is called by delaying its execution until a certain amount of time has passed without any further function calls. This can be useful in scenarios where a function is called frequently, such as in response to user input, but the function's execution is resource-intensive and should be limited to avoid performance issues.\n\nThe `useDebounce` hook takes an optional argument `timeInMs` that specifies the delay time in milliseconds. By default, the delay time is set to 250ms. The hook returns a function that takes a callback function as an argument. When the returned function is called, it will delay the execution of the callback function by the specified delay time. If the returned function is called again before the delay time has passed, the previous timeout is cleared and a new timeout is set.\n\nThe hook uses the `useState` hook to maintain a reference to the current timeout ID. It also uses the `useCallback` hook to memoize the returned function and prevent unnecessary re-renders.\n\nThis hook can be used in various scenarios, such as in search bars where the search function should only be called after the user has finished typing, or in auto-save features where the save function should only be called after a certain amount of time has passed since the last change. Here is an example of how the `useDebounce` hook can be used:\n\n```\nimport { useDebounce } from './useDebounce';\n\nfunction SearchBar() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const debounceSearch = useDebounce();\n\n  function handleSearch(event) {\n    const newSearchTerm = event.target.value;\n    setSearchTerm(newSearchTerm);\n    debounceSearch(() => {\n      // Call search function with new search term\n      search(newSearchTerm);\n    });\n  }\n\n  return (\n    <input type=\"text\" value={searchTerm} onChange={handleSearch} />\n  );\n}\n```\n\nIn this example, the `handleSearch` function is called every time the user types in the search bar. The `debounceSearch` function is used to delay the execution of the `search` function until the user has finished typing. This helps to avoid unnecessary calls to the `search` function and improve performance.\n## Questions: \n 1. What is the purpose of this code?\n   This code defines a custom hook called `useDebounce` that takes a callback function and returns a debounced version of it, which delays its execution by a specified amount of time.\n\n2. What dependencies does this code use?\n   This code uses the `useCallback` and `useState` hooks from the React library.\n\n3. What is the default debounce time for this hook?\n   The default debounce time is 250 milliseconds, but it can be overridden by passing a different value as an argument to the `useDebounce` hook.","metadata":{"source":".autodoc/docs/markdown/lib/useDebounce.md"}}],["281",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/useKeyboard.ts)\n\nThe code above is a custom React hook called `useKeyboard` that allows for listening to keyboard events. It takes in two parameters: a callback function to be executed when a key is pressed, and an optional array of keys that should exclusively trigger the callback. \n\nThe hook uses the `useCallback` and `useEffect` hooks from React. The `useCallback` hook memoizes the `keyboardCallback` function, which is the actual function that gets executed when a key is pressed. The `useEffect` hook sets up an event listener for the `keydown` event on the `window` object, and calls the `keyboardCallback` function when the event is triggered. The `useEffect` hook also returns a cleanup function that removes the event listener when the component unmounts.\n\nThe `keys` parameter is an optional array of strings that specifies which keys should trigger the callback. If `keys` is not provided, the callback will be executed for any key press. If `keys` is provided, the callback will only be executed if the pressed key is included in the `keys` array.\n\nThis hook can be used in any React component that needs to listen to keyboard events. For example, it could be used to implement keyboard shortcuts or to navigate through a list of items using arrow keys. Here's an example of how the hook could be used:\n\n```\nimport { useKeyboard } from './useKeyboard';\n\nconst MyComponent = () => {\n  const handleKeyDown = (e) => {\n    console.log(`Pressed key: ${e.key}`);\n  };\n\n  useKeyboard(handleKeyDown, ['ArrowUp', 'ArrowDown']);\n\n  return (\n    <div>\n      <p>Press the up and down arrow keys to trigger the callback</p>\n    </div>\n  );\n};\n```\n\nIn this example, the `handleKeyDown` function logs the pressed key to the console. The `useKeyboard` hook is called with `handleKeyDown` as the callback function and an array of two keys (`ArrowUp` and `ArrowDown`) that should trigger the callback. When the component renders, the hook sets up an event listener for the `keydown` event and executes the `handleKeyDown` function when the `ArrowUp` or `ArrowDown` key is pressed.\n## Questions: \n 1. What is the purpose of this code?\n- This code is a custom hook called `useKeyboard` that listens to keyboard events and triggers a callback function when a key is pressed.\n\n2. What is the significance of the `keys` parameter?\n- The `keys` parameter is an optional list of keys that can be passed to the hook. If `keys` is defined, only the keys in the list will trigger the callback function.\n\n3. How does this code ensure proper cleanup of event listeners?\n- This code uses the `useEffect` hook to add an event listener on mount and remove it on unmount. This ensures that the event listener is properly cleaned up and does not cause memory leaks.","metadata":{"source":".autodoc/docs/markdown/lib/useKeyboard.md"}}],["282",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/useOrganizer.tsx)\n\nThe code above is a collection of React hooks that are used to manage the active organizer in the Kulturdaten-frontend project. The hooks are used to retrieve and set the active organizer ID, as well as to handle the active organizer when a user logs in or out.\n\nThe `useOrganizerId` hook retrieves the active organizer ID from the `NavigationContext` and sets it based on the value of a cookie or a query parameter in the URL. If the user is in admin mode, the active organizer ID is set to the admin active organizer ID. The hook returns the active organizer ID.\n\nThe `useSetOrganizerId` hook sets the active organizer ID in the `NavigationContext` and in a cookie. If the organizer ID is undefined or the default organizer ID, the cookie is deleted and the active organizer ID is set to the default organizer ID.\n\nThe `useOrganizer` hook retrieves the organizer data for the active organizer using the `useEntry` hook from the `categories` module. If an error occurs while retrieving the organizer data, the hook sets the `hasError` state to true and returns an error message. Otherwise, the hook returns the organizer data.\n\nThe `useHandleActiveOrganizer` hook is used to handle the active organizer when a user logs in or out. If the user is logged in and not in admin mode, the hook checks if the user has access to the active organizer. If the user does not have access to the active organizer, the hook sets the active organizer ID to the first organizer ID in the user's list of organizers and redirects the user to the dashboard page for that organizer. If the user has no organizers, the hook sets the active organizer ID to the default organizer ID and redirects the user to the dashboard page for the default organizer.\n\nOverall, these hooks are used to manage the active organizer in the Kulturdaten-frontend project. They are used to retrieve and set the active organizer ID, retrieve the organizer data for the active organizer, and handle the active organizer when a user logs in or out.\n## Questions: \n 1. What is the purpose of the `useOrganizer` hook?\n- The `useOrganizer` hook is used to retrieve the organizer data based on the currently active organizer ID.\n\n2. What is the significance of the `activeOrganizerCookieName` variable?\n- The `activeOrganizerCookieName` variable is used to store the name of the cookie that holds the active organizer ID. If the `publicRuntimeConfig` object is defined, it retrieves the value of `activeOrganizerCookieName` from there, otherwise it defaults to `'ACTIVE_ORGANIZER_ID'`.\n\n3. What is the role of the `useHandleActiveOrganizer` hook?\n- The `useHandleActiveOrganizer` hook is responsible for handling the active organizer ID based on the user's authentication status and the organizer ID in the URL query parameter. It redirects the user to the appropriate dashboard page based on their access rights.","metadata":{"source":".autodoc/docs/markdown/lib/useOrganizer.md"}}],["283",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/useTags.ts)\n\nThe code above is a React hook that fetches a list of tags from an API endpoint using the `useSWR` library. The purpose of this hook is to provide a convenient way for other components in the project to access the list of tags without having to manually make API calls.\n\nThe `useTags` hook takes no arguments and returns an array of `Tag` objects. It first calls the `useApiCall` hook to get a function that can be used to make API calls. It then uses `useSWR` to fetch the tag list from the API endpoint specified by `ApiRoutes.tagList`. The `tagListFactory` function is used to parse the response from the API and return a `TagList` object. The `revalidateOnFocus` and `focusThrottleInterval` options are passed to `useSWR` to control how often the data should be refetched.\n\nIf the data has been successfully fetched, the hook returns the `data.body.data` property, which should contain an array of `Tag` objects. If the data has not been fetched yet, the hook returns `undefined`.\n\nHere is an example of how this hook might be used in a component:\n\n```\nimport { useTags } from './useTags';\n\nfunction TagList() {\n  const tags = useTags();\n\n  if (!tags) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ul>\n      {tags.map(tag => (\n        <li key={tag.id}>{tag.name}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\nIn this example, the `useTags` hook is used to fetch the list of tags and store them in the `tags` variable. If the data has not been fetched yet, the component displays a \"Loading...\" message. Otherwise, it renders an unordered list of tag names.\n## Questions: \n 1. What is the purpose of the `useTags` function?\n   - The `useTags` function is a custom hook that returns an array of `Tag` objects by making an API call using `useSWR` and `useApiCall`.\n\n2. What is the `TagList` type and where is it defined?\n   - The `TagList` type is defined in the `tagListFactory` function, which is imported from `./api/routes/tags/list`. It represents the response data structure for the API endpoint that returns a list of tags.\n\n3. What are the options passed to `useSWR` and what do they do?\n   - The options passed to `useSWR` are `{ revalidateOnFocus: false, focusThrottleInterval: 1000 * 60 * 5 }`. `revalidateOnFocus: false` disables automatic revalidation of the data when the window regains focus, and `focusThrottleInterval: 1000 * 60 * 5` sets a 5-minute interval for throttling revalidation requests when the window is refocused.","metadata":{"source":".autodoc/docs/markdown/lib/useTags.md"}}],["284",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/useUserIsOwner.tsx)\n\nThe code above defines a custom React hook called `useUserIsOwner`. This hook is used to determine whether the currently logged-in user is the owner of a particular entry in the application. \n\nThe hook imports several other hooks and types from other files in the project. The `useAdminMode` hook is used to determine whether the application is currently in admin mode. The `useUser` hook is used to retrieve information about the currently logged-in user. The `useOrganizer` hook is used to retrieve information about the entry that the user may or may not be the owner of. The `Role` and `RoleName` types are used to define the possible roles that a user can have in relation to an entry.\n\nThe `useMemo` hook is used to memoize the result of the function that determines whether the user is the owner of the entry. This function first checks whether the application is in admin mode and the logged-in user is a superuser. If so, the function returns `true`. Otherwise, the function checks whether the entry has any roles associated with it. If so, it checks whether any of those roles have the `owner` role and are active, and whether the user associated with that role is the same as the currently logged-in user. If so, the function returns `true`. Otherwise, the function returns `false`.\n\nThe `useUserIsOwner` hook can be used in other components throughout the application to conditionally render certain content or functionality based on whether the user is the owner of a particular entry. For example, a button to edit or delete an entry may only be visible to the owner of that entry. The hook can be used like this:\n\n```\nimport { useUserIsOwner } from './useUserIsOwner';\n\nconst MyComponent = () => {\n  const userIsOwner = useUserIsOwner();\n\n  return (\n    <div>\n      {userIsOwner ? (\n        <button>Edit Entry</button>\n      ) : (\n        <p>You do not have permission to edit this entry.</p>\n      )}\n    </div>\n  );\n};\n```\n\nOverall, the `useUserIsOwner` hook is a useful utility function that can be used to implement fine-grained access control in the application based on the roles of the currently logged-in user.\n## Questions: \n 1. What does this code do?\nThis code defines a custom hook called `useUserIsOwner` that returns a boolean indicating whether the current user is the owner of a certain entry, based on their role and permissions.\n\n2. What dependencies does this code rely on?\nThis code imports several dependencies from other files, including `useMemo` from React, `useAdminMode` and `useUser` from specific components, and `Role` and `User` types from an API types file. It also uses a custom hook called `useOrganizer`.\n\n3. What is the purpose of the `useMemo` hook in this code?\nThe `useMemo` hook is used to memoize the result of a complex calculation that determines whether the current user is the owner of a certain entry. This helps to optimize performance by avoiding unnecessary re-renders of the component that uses this hook.","metadata":{"source":".autodoc/docs/markdown/lib/useUserIsOwner.md"}}],["285",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/lib/validations.ts)\n\nThe code above defines a set of regular expressions and functions that are used to validate user input in a web application. The regular expressions are used to check whether a given string matches a specific pattern, while the functions use these regular expressions to determine whether a given input is valid or not.\n\nThe `urlRegExpString` constant defines a regular expression that matches URLs, including both HTTP and HTTPS protocols. The `urlRegExp` constant creates a new regular expression object based on this string. Similarly, the `emailRegExpString` and `telRegExpString` constants define regular expressions that match email addresses and phone numbers, respectively. The `emailRegExp` and `telRegExp` constants create new regular expression objects based on these strings.\n\nThe `isUrl`, `isEmail`, and `isPhoneNumber` functions take a string as input and return a boolean value indicating whether the input matches the corresponding regular expression. For example, `isUrl` returns `true` if the input is a valid URL and `false` otherwise.\n\nThe `getErrorString` function takes two arguments: an `inputType` and a `value`. The `inputType` argument is an enum value that specifies the type of input being validated (e.g. URL, email, phone number). The `value` argument is the actual user input that needs to be validated. The function uses a switch statement to determine which regular expression to use based on the `inputType` argument, and then calls the corresponding validation function (`isUrl`, `isEmail`, or `isPhoneNumber`) to check whether the input is valid. If the input is not valid, the function returns a string that corresponds to an error message. Otherwise, it returns `undefined`.\n\nThis code is likely used in the larger project to validate user input in various forms and input fields throughout the web application. By using regular expressions and functions to validate user input, the application can ensure that the data it receives is in the correct format and meets certain criteria (e.g. a valid email address). This can help prevent errors and improve the overall user experience. \n\nExample usage:\n\n```\nimport { InputType, isUrl, isEmail, isPhoneNumber, getErrorString } from \"./inputValidation\";\n\nconst urlInput = \"https://example.com\";\nconst emailInput = \"user@example.com\";\nconst phoneInput = \"+1 (555) 123-4567\";\n\nif (isUrl(urlInput)) {\n  console.log(\"Valid URL\");\n} else {\n  console.log(\"Invalid URL\");\n}\n\nif (isEmail(emailInput)) {\n  console.log(\"Valid email\");\n} else {\n  console.log(\"Invalid email\");\n}\n\nif (isPhoneNumber(phoneInput)) {\n  console.log(\"Valid phone number\");\n} else {\n  console.log(\"Invalid phone number\");\n}\n\nconst urlError = getErrorString(InputType.url, \"invalid-url\");\nconst emailError = getErrorString(InputType.email, \"invalid-email\");\nconst phoneError = getErrorString(InputType.tel, \"invalid-phone\");\n\nconsole.log(urlError); // \"forms.urlInvalid\"\nconsole.log(emailError); // \"forms.emailInvalid\"\nconsole.log(phoneError); // \"forms.phoneInvalid\"\n```\n## Questions: \n 1. What is the purpose of this code?\n   - This code exports functions and regular expressions for validating URLs, email addresses, and phone numbers, as well as a function for getting error strings based on input type and value.\n\n2. What input types are supported by the `getErrorString` function?\n   - The `getErrorString` function supports input types of `url`, `email`, and `tel`.\n\n3. What is the format of the regular expression used to validate phone numbers?\n   - The regular expression used to validate phone numbers matches strings that start with an optional plus sign, followed by an optional set of parentheses containing up to four digits, followed by any combination of digits, spaces, hyphens, periods, forward slashes, and zeroes.","metadata":{"source":".autodoc/docs/markdown/lib/validations.md"}}],["286",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/next-env.d.ts)\n\nThis file is a configuration file for the Next.js framework used in the Kulturdaten-frontend project. It includes two reference types, \"next\" and \"next/image-types/global\", which are used to provide type definitions for the Next.js framework and its image handling capabilities. \n\nThe file also includes a note stating that it should not be edited, and provides a link to the Next.js documentation for more information on how to use TypeScript with the framework. \n\nOverall, this file serves as a foundational piece of the Kulturdaten-frontend project, ensuring that the Next.js framework is properly configured and providing type definitions for the project's codebase. While it may not contain any specific functionality or code examples, it is an important part of the project's infrastructure and helps to ensure that the codebase is maintainable and scalable.\n## Questions: \n 1. What is the purpose of the \"reference types\" comments at the top of the file?\n   - These comments are used to reference external type definitions for the Next.js framework and its image types.\n\n2. Why is there a note stating that this file should not be edited?\n   - This note is included to indicate that any changes to this file could potentially cause issues with the Next.js framework and its TypeScript integration.\n\n3. Where can I find more information about using TypeScript with Next.js?\n   - The comment provides a link to the Next.js documentation, which offers more information about using TypeScript with the framework.","metadata":{"source":".autodoc/docs/markdown/next-env.d.md"}}],["287",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/next.config.js)\n\nThis code exports an object with various configuration options for the kulturdaten-frontend project. \n\nThe `publicRuntimeConfig` object contains configuration options that are available at runtime on the client-side. It includes the default locale, the API base URL, and the names of various cookies used in the project.\n\nThe `trailingSlash` option is set to `true`, which means that URLs with a trailing slash will be treated as equivalent to URLs without a trailing slash.\n\nThe `i18n` object contains configuration options for internationalization. It includes an array of supported locales and the default locale.\n\nThe `images` object contains a list of domains where images are hosted. This is used to configure the `next/image` component in the project.\n\nThe `typescript` object contains configuration options for TypeScript. In this case, `ignoreBuildErrors` is set to `true`, which means that build errors related to TypeScript will be ignored.\n\nThe `experimental` object contains experimental features that are not yet stable. In this case, `esmExternals` is set to `false`, which means that external dependencies will not be treated as ESM modules.\n\nFinally, the `async redirects()` function returns an array of redirect objects. These objects define URL redirects for various paths in the project. For example, the first redirect object maps the `/catchAll` path to the `/de-DE` path. The `permanent` option is set to `false` for some redirects, which means that they are temporary redirects. \n\nOverall, this code provides important configuration options for the kulturdaten-frontend project, including internationalization, image hosting, and URL redirects. These options help to ensure that the project is properly configured and functions as intended.\n## Questions: \n 1. What is the purpose of the `publicRuntimeConfig` object?\n   - The `publicRuntimeConfig` object contains configuration options that are accessible to the client-side code.\n2. What is the purpose of the `async redirects()` function?\n   - The `async redirects()` function defines a list of URL redirects for the application.\n3. What is the purpose of the `images` object?\n   - The `images` object specifies a list of domains from which the application can load images.","metadata":{"source":".autodoc/docs/markdown/next.config.md"}}],["288",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/[organizer]/[category]/404.tsx)\n\nThe code above is a React component that serves as a subpage for entries in a larger project. The purpose of this component is to display a 404 error message if the category of the entry is not found. \n\nThe component imports the `NextPage` component from the `next` library, which is used to define a page in a Next.js application. It also imports the `useCategory` hook from the `categories` module, which is a custom hook that retrieves the category of the current entry. Finally, it imports the `AppWrapper` component from the `wrappers` module, which is a higher-order component that wraps the content of the subpage with a common layout.\n\nThe `EntrySubPage` component checks if the category of the entry is defined by calling the `useCategory` hook. If the category is defined, it renders the `AppWrapper` component with the `subMenuKey` prop set to the sub-menu key of the category and the content set to \"404\". This will display a 404 error message with the common layout of the subpage. If the category is not defined, the component returns `null`, which means that nothing will be rendered.\n\nThis component is likely used in the larger project to handle errors when displaying entries. When a user navigates to an entry that does not have a valid category, this component will be rendered to display a 404 error message. The `AppWrapper` component ensures that the error message is displayed with a consistent layout across all subpages. \n\nHere is an example of how this component might be used in a larger project:\n\n```\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport EntrySubPage from './EntrySubPage';\n\nconst EntryPage = () => {\n  const router = useRouter();\n  const { id } = router.query;\n\n  // fetch entry data based on id\n\n  if (entryHasValidCategory) {\n    return (\n      <div>\n        <h1>{entryTitle}</h1>\n        <p>{entryContent}</p>\n      </div>\n    );\n  } else {\n    return <EntrySubPage />;\n  }\n};\n\nexport default EntryPage;\n```\n\nIn this example, the `EntryPage` component fetches data for a specific entry based on the `id` parameter in the URL. If the entry has a valid category, it renders the entry content. If the entry does not have a valid category, it renders the `EntrySubPage` component to display a 404 error message.\n## Questions: \n 1. What is the purpose of the `useCategory` hook imported from `../../../lib/categories`?\n- The `useCategory` hook is likely used to retrieve the category information for the current page.\n\n2. What is the `AppWrapper` component imported from `../../../components/wrappers/AppWrapper` used for?\n- The `AppWrapper` component is likely used to provide a consistent layout and styling for the page, and may include navigation or other common UI elements.\n\n3. Why does the `EntrySubPage` component return `null` if `category` is not defined?\n- It is unclear why the `EntrySubPage` component returns `null` if `category` is not defined, as there may be other logic or components that should be rendered in this case.","metadata":{"source":".autodoc/docs/markdown/pages/[organizer]/[category]/404.md"}}],["289",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/[organizer]/[category]/[id]/[sub].tsx)\n\nThe code above is a React component that serves as a subpage for entries in a larger project. It imports the NextPage component from the Next.js library, as well as the useRouter and useCategory hooks from the same library and the AppWrapper component from a local file. \n\nThe component defines a function called EntrySubPage that returns a JSX element. The function first uses the useRouter hook to get the current router object, which contains information about the current URL and query parameters. It also uses the useCategory hook to get information about the category of the current entry. \n\nThe function then extracts the \"sub\" query parameter from the router object and assigns it to a variable called subPath. \n\nNext, the function checks if the category variable is truthy (i.e. not null or undefined). If it is, the function returns an AppWrapper component with a subMenuKey prop set to the subMenuKey property of the category object. The AppWrapper component is a custom component that wraps the content of the subpage and provides a consistent layout and styling. \n\nInside the AppWrapper component, the function uses the React.createElement method to dynamically create a component based on the value of the subPath variable. It first checks if the category object has a property with the same name as the subPath variable. If it does, it creates a component using the value of that property and passes in the category and query props. If the category object does not have a property with the same name as the subPath variable, it creates a component using the \"404\" property of the category object, which is a fallback component for when a requested page is not found. \n\nIf the category variable is falsy, the function returns null, indicating that no content should be rendered. \n\nOverall, this component is responsible for rendering the content of a subpage for a specific entry in the larger project. It uses the useRouter and useCategory hooks to get information about the current URL and category, respectively, and dynamically creates a component based on the value of the \"sub\" query parameter. The AppWrapper component provides a consistent layout and styling for the subpage content.\n## Questions: \n 1. What is the purpose of the `useCategory` hook imported from `../../../../lib/categories`?\n   - The `useCategory` hook is used to retrieve category information for the current page.\n2. What is the `subPath` variable and where does it come from?\n   - The `subPath` variable is assigned the value of the `sub` property from the `query` object in the `router` variable.\n3. What is the purpose of the `AppWrapper` component from `../../../../components/wrappers/AppWrapper`?\n   - The `AppWrapper` component is used to wrap the content of the page and provide a consistent layout and styling across different pages in the application.","metadata":{"source":".autodoc/docs/markdown/pages/[organizer]/[category]/[id]/[sub].md"}}],["290",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/[organizer]/[category]/index.tsx)\n\nThe code above defines a Next.js page component called `EntryListPage`. This component is responsible for rendering a list of entries based on a selected category. The component imports the `NextPage` type from the `next` package, which is used to define the type of the component. It also imports the `React` library, which is used to create the component's UI.\n\nThe `EntryListPage` component uses the `AppWrapper` component from the `../../../components/wrappers/AppWrapper` module to wrap its content. This component provides a consistent layout and styling for the page.\n\nThe `useCategory` hook from the `../../../lib/categories` module is used to retrieve the currently selected category. If a category is found, the component creates an element using the `React.createElement` method, passing in the `category.pages.list` component and the `category` object as props. This `category.pages.list` component is responsible for rendering the list of entries for the selected category.\n\nIf no category is found, the component simply returns the string \"TBD\" wrapped in the `AppWrapper` component.\n\nOverall, this code is an important part of the larger project as it provides the functionality to display a list of entries based on a selected category. It is likely used in conjunction with other components and modules to create a complete user interface for the project. Here is an example of how this component might be used in a larger project:\n\n```jsx\nimport React from 'react';\nimport EntryListPage from './EntryListPage';\n\nconst HomePage = () => {\n  return (\n    <div>\n      <h1>Welcome to the Kulturdaten Frontend</h1>\n      <EntryListPage />\n    </div>\n  );\n};\n\nexport default HomePage;\n```\n\nIn this example, the `EntryListPage` component is used as a child component of the `HomePage` component to display a list of entries on the home page of the application.\n## Questions: \n 1. What is the purpose of the `useCategory` hook?\n   - The `useCategory` hook is used to retrieve the current category from the application's state.\n\n2. What is the significance of the `category.pages.list` property?\n   - The `category.pages.list` property is used to dynamically render the appropriate list page based on the current category.\n\n3. What is the purpose of the `AppWrapper` component?\n   - The `AppWrapper` component is a custom wrapper component that provides consistent styling and layout for the application's pages.","metadata":{"source":".autodoc/docs/markdown/pages/[organizer]/[category]/index.md"}}],["291",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/[organizer]/profile/[sub].tsx)\n\nThe code above is a React component that serves as a subpage for entries in the Kulturdaten-frontend project. It imports the NextPage component from the Next.js library, as well as the useRouter hook and the AppWrapper component from the project's components/wrappers directory. It also imports the useCategories function from the project's config/categories file.\n\nThe EntrySubPage component uses the useRouter hook to get the current route's query parameters, specifically the \"sub\" parameter. It then uses the useCategories function to get the project's categories configuration object, which contains information about the different categories of entries in the project. It specifically gets the \"organizer\" category object from the categories configuration.\n\nThe component then checks if the \"organizer\" category object exists. If it does, it renders the AppWrapper component with the \"subMenuKey\" property set to the \"organizer\" category's subMenuKey value. It also dynamically creates a React component based on the \"subPath\" query parameter. It does this by checking if the \"pages\" property of the \"organizer\" category object has a key that matches the \"subPath\" value. If it does, it creates the corresponding React component from the \"pages\" object. If it doesn't, it creates the \"404\" component from the \"pages\" object. It passes the \"category\" object and the current route's query parameters as props to the dynamically created component.\n\nIf the \"organizer\" category object doesn't exist, the component simply renders the AppWrapper component with a \"TBD\" placeholder.\n\nOverall, this component serves as a flexible and reusable way to render subpages for different categories of entries in the Kulturdaten-frontend project. It uses the project's categories configuration to dynamically create the appropriate React component based on the current route's query parameters.\n## Questions: \n 1. What is the purpose of the `useCategories` hook being imported?\n   - The `useCategories` hook is used to retrieve the categories configuration from the `categories.js` file in the `config` folder.\n\n2. What is the significance of the `subPath` variable?\n   - The `subPath` variable is used to retrieve the subpage path from the router query parameters.\n\n3. What is the purpose of the `AppWrapper` component being used?\n   - The `AppWrapper` component is a custom wrapper component that provides a consistent layout and styling for the application. It also accepts a `subMenuKey` prop to highlight the active sub-menu item.","metadata":{"source":".autodoc/docs/markdown/pages/[organizer]/profile/[sub].md"}}],["292",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/[organizer]/sitemap.tsx)\n\nThe code defines a Next.js page component called SitemapPage. This component is responsible for rendering the sitemap page of the application. \n\nThe component imports several modules from the application's codebase, including Next.js' NextPage component, the useRouter hook, and the useEffect hook from React. It also imports several custom components and hooks, including useLocale, useUser, useOrganizerId, AppWrapper, and SitemapContainer.\n\nThe useUser hook is called to ensure that the user is authenticated before rendering the sitemap page. The useLocale hook is used to determine the current locale of the application. The useOrganizerId hook is used to determine the current organizer of the application. The useRouter hook is used to access the current router object.\n\nThe useEffect hook is used to update the URL of the sitemap page when the organizer changes. If the current organizer is not the default organizer and is different from the organizer in the URL query parameter, the router is updated to include the new organizer ID in the URL. This ensures that the correct sitemap is displayed for the selected organizer.\n\nFinally, the component returns the AppWrapper component, which provides a consistent layout for the application, and the SitemapContainer component, which renders the actual sitemap content.\n\nOverall, this code is an important part of the application's routing and authentication logic. It ensures that the correct sitemap is displayed for the selected organizer and that the user is authenticated before accessing the sitemap page.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file defines a Next.js page component for the sitemap page of the Kulturdaten frontend application.\n\n2. What libraries and components are being imported and used in this code?\n- The code imports and uses Next.js, React, and several custom components and hooks from the Kulturdaten frontend application.\n\n3. What is the useEffect hook being used for in this code?\n- The useEffect hook is being used to check if the current organizer ID in the URL query parameters matches the default organizer ID, and if not, to replace the URL with a new URL that includes the current organizer ID. This ensures that the sitemap page always displays the correct data for the selected organizer.","metadata":{"source":".autodoc/docs/markdown/pages/[organizer]/sitemap.md"}}],["293",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/[organizer]/team.tsx)\n\nThe code above is a React component that renders the Organizer Team page of the Kulturdaten Frontend project. The purpose of this component is to provide a wrapper for the Organizer Team page and to pass the necessary props to it.\n\nThe component imports the NextPage component from the Next.js library, which is used to define a page in a Next.js application. It also imports the useRouter hook from Next.js, which provides access to the router object, and the AppWrapper component from the project's components/wrappers directory, which is a higher-order component that provides a layout for the page.\n\nThe component also imports the useCategories hook from the project's config/categories directory, which is used to retrieve the category object for the Organizer category. The category object contains information about the category, such as its name, slug, and sub-menu key.\n\nThe component then defines a functional component called TeamPage, which is a Next.js page component. The component uses the useRouter hook to retrieve the router object, which contains information about the current route, including the query parameters. It also uses the useCategories hook to retrieve the category object for the Organizer category.\n\nIf the category object exists, the component returns the AppWrapper component with the subMenuKey prop set to the sub-menu key of the Organizer category. The OrganizerTeamPage component is then rendered inside the AppWrapper component with the category and query props passed to it.\n\nIf the category object does not exist, the component returns null.\n\nOverall, this component is an important part of the Kulturdaten Frontend project as it provides a wrapper for the Organizer Team page and ensures that the necessary props are passed to it. It also demonstrates the use of Next.js page components, hooks, and higher-order components in the project.\n## Questions: \n 1. What is the purpose of this code file?\n   - This code file defines a React component for the team page of the organizer section of a website, wrapped in an AppWrapper component.\n\n2. What is the role of the useCategories hook?\n   - The useCategories hook is used to retrieve the categories configuration object, which contains information about the different sections of the website, including the organizer section.\n\n3. What is the purpose of the conditional statement in the component?\n   - The conditional statement checks if the category object exists, and if so, renders the OrganizerTeamPage component wrapped in the AppWrapper component with the subMenuKey property set to the subMenuKey of the organizer category. If the category object does not exist, it returns null.","metadata":{"source":".autodoc/docs/markdown/pages/[organizer]/team.md"}}],["294",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/_app.tsx)\n\nThe code above is a Next.js application that serves as the frontend for the Kulturdaten project. The purpose of this code is to provide a layout for the application and to manage the state of various components. \n\nThe code imports various components and contexts from other files in the project. These components and contexts are then used to wrap the `Component` and `pageProps` passed to the `App` function. \n\nThe `EmbeddedAppLayout` component is used to render the layout of the application. It takes a `content` prop, which is the `Component` passed to the `App` function. The `EmbeddedAppLayout` component uses the `useMenuStructure`, `useAppTitle`, `useNavigation`, and `useLayout` hooks to generate the header and sidebar for the application. It also uses the `useHandleActiveOrganizer` hook to handle the active organizer. \n\nThe `App` function is the main entry point for the application. It takes the `Component` and `pageProps` as props and returns a wrapped version of the `Component`. The `App` function wraps the `Component` with various contexts and providers, including `WindowContextProvider`, `NavigationContextProvider`, `LoadingContextProvider`, `ConfirmContextProvider`, `EntryListContextProvider`, `UserContextProvider`, `AdminContextProvider`, and `DownloadContextProvider`. These contexts and providers are used to manage the state of various components in the application. \n\nOverall, this code provides the layout and state management for the Kulturdaten frontend application. It uses various components and contexts to wrap the `Component` and `pageProps` passed to the `App` function. The `EmbeddedAppLayout` component is used to generate the header and sidebar for the application. The various contexts and providers are used to manage the state of various components in the application.\n## Questions: \n 1. What is the purpose of the `EmbeddedAppLayout` component?\n   - The `EmbeddedAppLayout` component is a functional component that renders the layout of the app with the header, sidebar, and content passed as props.\n\n2. What is the purpose of the `EntryListContextProvider` component?\n   - The `EntryListContextProvider` component is used to provide context for the `EntryList` component, which is used to display a list of entries for a specific category (e.g. organizer, location, offer).\n\n3. What is the purpose of the `useHandleActiveOrganizer` hook?\n   - The `useHandleActiveOrganizer` hook is used to handle the active organizer in the app, which is used to filter and display entries related to that organizer.","metadata":{"source":".autodoc/docs/markdown/pages/_app.md"}}],["295",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/_document.tsx)\n\nThe code above is a React component that extends the `Document` class from the `next/document` module. This component is responsible for rendering the HTML document that is sent to the client when a user requests a page from the server. \n\nThe `MyDocument` component overrides the `render` method of the `Document` class to define the structure of the HTML document. It returns a JSX expression that represents the HTML structure of the document. \n\nThe `Html` component is a built-in component from the `next/document` module that represents the root element of the HTML document. The `DocumentHead` component is another built-in component that represents the head section of the HTML document. The `Main` component is a custom component that represents the main content of the page, and the `NextScript` component is another built-in component that includes the necessary scripts for the page to function properly.\n\nBy default, Next.js automatically generates an HTML document for each page based on the components that are rendered. However, by creating a custom `MyDocument` component, developers can customize the structure of the HTML document and include additional elements in the head section, such as meta tags, stylesheets, and scripts.\n\nThis code is an essential part of the Next.js framework and is used in every Next.js project to generate the HTML document for each page. Developers can customize this component to add their own custom elements to the HTML document or modify the existing ones. \n\nHere is an example of how the `MyDocument` component can be customized to include a custom title in the head section:\n\n```\nimport Document, { Html, Head as DocumentHead, Main, NextScript } from 'next/document';\nimport { ReactElement } from 'react';\n\nclass MyDocument extends Document {\n  render(): ReactElement {\n    return (\n      <Html>\n        <DocumentHead>\n          <title>My Custom Title</title>\n        </DocumentHead>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\nIn this example, the `title` element is added to the head section of the HTML document with the text \"My Custom Title\". This is just one example of how the `MyDocument` component can be customized to meet the needs of a specific project.\n## Questions: \n 1. What is the purpose of this code file?\n- This code file is a custom document file for a Next.js project, which is used to modify the HTML document that is served to the client.\n\n2. What is the role of the `render` method in this code?\n- The `render` method is used to define the structure of the HTML document, which includes the `Html`, `Head`, `body`, `Main`, and `NextScript` components.\n\n3. What is the significance of the `export default MyDocument` statement at the end of the code?\n- This statement exports the `MyDocument` class as the default export of the file, which allows it to be imported and used in other parts of the project.","metadata":{"source":".autodoc/docs/markdown/pages/_document.md"}}],["296",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/admin/organizers.tsx)\n\nThe code above is a Next.js page component that renders an admin organizers page for the Kulturdaten Frontend project. The purpose of this code is to provide a high-level view of the organizers in the system and allow administrators to manage them. \n\nThe code imports two components from the project: `AdminOrganizersPage` and `AppWrapper`. `AdminOrganizersPage` is a custom component that renders the list of organizers and provides functionality for adding, editing, and deleting organizers. `AppWrapper` is another custom component that provides a wrapper for the entire application, including the header and footer.\n\nThe `OrganizersPage` component is a functional component that returns the `AppWrapper` component with the `AdminOrganizersPage` component nested inside. This means that when the `OrganizersPage` is rendered, it will display the `AdminOrganizersPage` component within the `AppWrapper` component.\n\nThis code is an important part of the Kulturdaten Frontend project because it provides a central location for administrators to manage organizers. By using the `AdminOrganizersPage` component, administrators can easily add, edit, and delete organizers, which is a critical part of the system's functionality. Additionally, by using the `AppWrapper` component, the page has a consistent look and feel with the rest of the application.\n\nHere is an example of how this component might be used in the larger project:\n\n```\nimport OrganizersPage from '../pages/admin/organizers';\n\nconst AdminDashboard = () => {\n  return (\n    <div>\n      <h1>Admin Dashboard</h1>\n      <OrganizersPage />\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n```\n\nIn this example, the `OrganizersPage` component is imported and rendered within an `AdminDashboard` component. This allows administrators to access the organizers page from the main dashboard of the application.\n## Questions: \n 1. What is the purpose of the `AdminOrganizersPage` component?\n   - The `AdminOrganizersPage` component is a page component for managing organizers in the admin section of the application.\n\n2. What is the `AppWrapper` component used for?\n   - The `AppWrapper` component is a wrapper component that provides a consistent layout and styling for all pages in the application.\n\n3. What is the significance of the `NextPage` type in the `OrganizersPage` component?\n   - The `NextPage` type is a type definition from the Next.js framework that indicates that the `OrganizersPage` component is a page component that can be rendered by the server or the client.","metadata":{"source":".autodoc/docs/markdown/pages/admin/organizers.md"}}],["297",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/auth/login.tsx)\n\nThe code above is a Next.js page component that renders the LoginPageComponent from the auth folder in the components directory. The purpose of this code is to provide a route for the login page of the Kulturdaten-frontend project. \n\nThe NextPage import is a type definition for a Next.js page component. It is used to define the type of the LoginPage component. The LoginPageComponent is imported from the Login file in the auth folder of the components directory. This component is responsible for rendering the login form and handling user authentication. \n\nThe LoginPage function is a Next.js page component that returns the LoginPageComponent. This function is exported as the default export of this module. This allows other modules to import this component and use it as a route in their application. \n\nHere is an example of how this component can be used in a larger project:\n\n```javascript\nimport LoginPage from './pages/auth/LoginPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/login\">\n          <LoginPage />\n        </Route>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n```\n\nIn this example, the LoginPage component is used as a route for the /login path. When a user navigates to this path, the LoginPage component will be rendered. This allows users to access the login form and authenticate themselves in the application. \n\nOverall, this code provides an important piece of functionality for the Kulturdaten-frontend project by allowing users to log in and access the application's features.\n## Questions: \n 1. What is the purpose of the `NextPage` import?\n   - The `NextPage` import is used to define the type of the `LoginPage` component as a Next.js page component.\n\n2. What is the `LoginPageComponent` import and where is it located?\n   - The `LoginPageComponent` import is a named import from the `LoginPage` file located in the `components/pages/auth` directory.\n\n3. Why is the `LoginPage` component being exported as the default export?\n   - The `LoginPage` component is being exported as the default export so that it can be imported and used in other parts of the application without needing to specify the component name in curly braces.","metadata":{"source":".autodoc/docs/markdown/pages/auth/login.md"}}],["298",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/auth/register.tsx)\n\nThe code above is a Next.js page component that renders the RegisterPageComponent from the project's auth folder. The purpose of this code is to provide a route for users to access the registration page of the application. \n\nThe NextPage import is used to define the type of the component as a Next.js page. This allows the component to be used as a route in the application. The RegisterPageComponent is imported from the auth folder and rendered in the return statement of the component. \n\nThis code is part of the larger kulturdaten-frontend project and is used to provide a user-friendly interface for users to register for the application. The RegisterPageComponent likely contains a form for users to input their registration information and submit it to the backend for processing. \n\nHere is an example of how this component may be used in the larger project:\n\n```\nimport Link from 'next/link';\nimport RegisterPage from '../pages/auth/Register';\n\nconst HomePage = () => {\n  return (\n    <div>\n      <h1>Welcome to Kulturdaten</h1>\n      <p>Please register to access the application:</p>\n      <RegisterPage />\n      <p>Already have an account? <Link href=\"/login\">Login here</Link></p>\n    </div>\n  );\n};\n\nexport default HomePage;\n```\n\nIn this example, the RegisterPage component is imported and rendered within the HomePage component. This provides a route for users to access the registration page and register for the application. The Link component is also used to provide a route for users to access the login page if they already have an account. \n\nOverall, this code plays an important role in the kulturdaten-frontend project by providing a user-friendly interface for users to register for the application.\n## Questions: \n 1. What is the purpose of the `NextPage` import?\n   - The `NextPage` import is used to define the type of the `RegisterPage` component as a Next.js page component.\n\n2. What is the `RegisterPageComponent` import and where is it located?\n   - The `RegisterPageComponent` import is a component located in the `../../components/pages/auth/Register` file. It is being used as the main component for the `RegisterPage`.\n\n3. Why is the `RegisterPage` component being exported as the default export?\n   - The `RegisterPage` component is being exported as the default export so that it can be easily imported and used in other parts of the application without needing to specify a specific export name.","metadata":{"source":".autodoc/docs/markdown/pages/auth/register.md"}}],["299",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/auth/resetPassword/[email].tsx)\n\nThe code above is a Next.js page component that renders the ResetPasswordPageComponent from the project's components directory. The purpose of this code is to provide a route for the user to reset their password. \n\nThe NextPage import is used to define the type of the ResetPasswordPage component. Next.js is a React framework that provides server-side rendering and other features to improve the performance and SEO of web applications. \n\nThe ResetPasswordPage component is a functional component that returns the ResetPasswordPageComponent. This component is responsible for rendering the UI for the password reset page. \n\nThis code is part of the larger kulturdaten-frontend project, which is a web application for cultural data management. The ResetPasswordPage component is likely used in conjunction with other components and pages to provide a complete user authentication and password management system. \n\nHere is an example of how this component might be used in the larger project:\n\n```\nimport { Router, Route, Switch } from 'react-router-dom';\nimport ResetPasswordPage from './pages/auth/ResetPasswordPage';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/reset-password\" component={ResetPasswordPage} />\n        {/* other routes */}\n      </Switch>\n    </Router>\n  );\n};\n```\n\nIn this example, the ResetPasswordPage component is imported and used as a route in the React Router. When the user navigates to the \"/reset-password\" path, the ResetPasswordPage component will be rendered, allowing the user to reset their password.\n## Questions: \n 1. What is the purpose of the `NextPage` import?\n   - The `NextPage` import is used to define the type of the `ResetPasswordPage` component as a Next.js page component.\n\n2. What is the `ResetPasswordPageComponent` import and where is it located?\n   - The `ResetPasswordPageComponent` import is located in the `../../../components/pages/auth/ResetPassword` file and is the component that is rendered by the `ResetPasswordPage` component.\n\n3. What is the purpose of the `export default ResetPasswordPage;` line?\n   - The `export default` line exports the `ResetPasswordPage` component as the default export of the file, allowing it to be imported and used in other parts of the application.","metadata":{"source":".autodoc/docs/markdown/pages/auth/resetPassword/[email].md"}}],["300",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/auth/resetPassword/index.tsx)\n\nThe code above is a Next.js page component that renders the RequestPasswordResetPageComponent from the components/pages/auth/ResetPassword file. The purpose of this code is to provide a route for the user to request a password reset. \n\nThe NextPage import is used to define the type of the component as a Next.js page. The RequestPasswordResetPageComponent is imported from the components/pages/auth/ResetPassword file and is rendered within the RequestPasswordResetPage component. \n\nThis code is part of the larger kulturdaten-frontend project and is used to provide a user interface for requesting a password reset. The component can be used in conjunction with other components and pages to create a complete user authentication system. \n\nHere is an example of how this component might be used in a larger project:\n\n```\nimport React from 'react';\nimport RequestPasswordResetPage from './pages/auth/RequestPasswordResetPage';\nimport LoginPage from './pages/auth/LoginPage';\n\nconst App: React.FC = () => {\n  const [loggedIn, setLoggedIn] = React.useState(false);\n\n  const handleLogin = () => {\n    setLoggedIn(true);\n  };\n\n  const handleLogout = () => {\n    setLoggedIn(false);\n  };\n\n  return (\n    <div>\n      {loggedIn ? (\n        <div>\n          <h1>Welcome!</h1>\n          <button onClick={handleLogout}>Logout</button>\n        </div>\n      ) : (\n        <div>\n          <LoginPage onLogin={handleLogin} />\n          <RequestPasswordResetPage />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the RequestPasswordResetPage component is used alongside the LoginPage component to provide a complete authentication system. The user can either log in or request a password reset. If the user is logged in, they will see a welcome message and a logout button. If the user is not logged in, they will see the login and password reset pages. \n\nOverall, the RequestPasswordResetPage component is a small but important part of the larger kulturdaten-frontend project. It provides a simple and intuitive way for users to request a password reset and can be used in conjunction with other components to create a complete authentication system.\n## Questions: \n 1. What is the purpose of the `NextPage` import?\n   - The `NextPage` import is used to define the type of the `RequestPasswordResetPage` component as a Next.js page component.\n\n2. What is the `RequestPasswordResetPageComponent` import and where is it located?\n   - The `RequestPasswordResetPageComponent` import is a component located at `../../../components/pages/auth/ResetPassword` that is used to render the page content.\n\n3. What is the purpose of exporting `RequestPasswordResetPage` as the default export?\n   - Exporting `RequestPasswordResetPage` as the default export allows other files to import and use this page component in their own code.","metadata":{"source":".autodoc/docs/markdown/pages/auth/resetPassword/index.md"}}],["301",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/auth/success.tsx)\n\nThe code above is a Next.js page component that renders a login page for the Kulturdaten-frontend project. The purpose of this code is to display a login form to users and provide feedback to the user after a successful login attempt. \n\nThe code imports the NextPage component from the Next.js library, which is used to define a page component. It also imports the InfoColor component from the project's components folder, which is used to set the color of the success message displayed after a successful login attempt. \n\nThe code then imports the LoginPage component from the project's components folder, which is a custom component that renders the login form. The useT hook is also imported from the project's i18n library, which is used to translate the success message displayed after a successful login attempt. \n\nThe LoginPage component is then rendered using the NextPage component. The LoginPage component takes an info prop, which is an object that contains the success message and its color. The success message is retrieved using the useT hook and passed as a child to the info prop. The color of the success message is set to green using the InfoColor component. \n\nThis code is used in the larger Kulturdaten-frontend project to render the login page and provide feedback to the user after a successful login attempt. The LoginPage component is a reusable component that can be used in other parts of the project that require a login form. The useT hook is used throughout the project to provide translations for different languages. The InfoColor component is used to set the color of different types of messages displayed to the user. \n\nExample usage of this code in the project would be to import the LoginPage component into a different page component and render it there. The success message displayed after a successful login attempt can also be customized by passing a different message to the info prop.\n## Questions: \n 1. What is the purpose of the `LoginPage` component?\n   - The `LoginPage` component is used to render the login page for the application.\n\n2. What is the `useT` hook used for?\n   - The `useT` hook is used to access the translation function for the application.\n\n3. What is the `InfoColor` component used for?\n   - The `InfoColor` component is used to define the color of the information message displayed on the login page.","metadata":{"source":".autodoc/docs/markdown/pages/auth/success.md"}}],["302",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/create-organizer.tsx)\n\nThe code above is a Next.js page component that renders a form for creating a new organizer. It imports the `NextPage` type from the `next` package and the `React` library. It also imports the `AppWrapper` component from the `../components/wrappers` directory and the `useCategories` hook from the `../config/categories` module.\n\nThe `CreateOrganizerPage` component is a functional component that returns a JSX element. It uses the `useCategories` hook to retrieve the categories object, which contains information about the different categories of data in the application. It then extracts the `organizer` category from the categories object and assigns it to the `category` variable.\n\nIf the `category` variable is truthy, the component creates an element using the `React.createElement` method. The first argument is the `create` page of the `organizer` category, which is a component that renders the form for creating a new organizer. The second argument is an object that contains the `category` property, which is set to the `organizer` category.\n\nIf the `category` variable is falsy, the component returns an `AppWrapper` component with the text \"TBD\" inside. This is a placeholder for when the `organizer` category is not available.\n\nThis component is used in the larger project to provide a user interface for creating new organizers. It relies on the `useCategories` hook to retrieve the necessary data and the `AppWrapper` component to provide a consistent layout for the page. Other components in the project may import and use this component as needed. For example, a navigation component may include a link to this page to allow users to create new organizers.\n## Questions: \n 1. What is the purpose of the `useCategories` hook?\n   - The `useCategories` hook is used to retrieve the categories configuration from the `../config/categories` file.\n\n2. What is the expected behavior if the `category` variable is falsy?\n   - If the `category` variable is falsy, the component will return the string \"TBD\" wrapped in an `AppWrapper` component.\n\n3. What is the expected behavior of the `create` property of the `category.pages` object?\n   - The `create` property of the `category.pages` object is expected to be a React component that will be created using `React.createElement` and passed the `category` prop.","metadata":{"source":".autodoc/docs/markdown/pages/create-organizer.md"}}],["303",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/error.tsx)\n\nThis code defines a React functional component called `TeamPage` that renders an error message. The component is exported as the default export of the module. \n\nThe component uses several styled components from the `@emotion/styled` library to define the layout and styling of the error message. The `StyledError` component is a container for the error message and has a padding of 5rem at the top and bottom. It is a flex container with a column direction and a gap of 1.5rem between its child elements. The `StyledErrorHeadline` component is an `h1` element with a font size of `var(--font-size-700)`, a line height of `var(--line-height-700)`, and a font weight of 700. The `StyledErrorText` component is a `p` element with a font size of `var(--font-size-500)` and a line height of `var(--line-height-500)`.\n\nThe `TeamPage` component uses the `useT` hook from the `../lib/i18n` module to get translations for the error message. The translations are passed as children to the `StyledErrorHeadline` and `StyledErrorText` components.\n\nThe `TeamPage` component is wrapped in the `AppWrapper`, `ContentWrapper`, and `ContentContainer` components from the `../components/wrappers` module. These components provide a consistent layout and styling for the entire application.\n\nOverall, this code defines a reusable error message component that can be used throughout the application. It also demonstrates the use of styled components and translation hooks in a Next.js application.\n## Questions: \n 1. What is the purpose of the `StyledError` component?\n   - The `StyledError` component is a styled div that displays an error message with a headline and text.\n\n2. What is the `TeamPage` component responsible for?\n   - The `TeamPage` component is a Next.js page component that renders an error message using the `StyledError` component.\n\n3. What is the `useT` hook used for?\n   - The `useT` hook is used to access translations from the i18n library in order to display localized error messages.","metadata":{"source":".autodoc/docs/markdown/pages/error.md"}}],["304",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/index.tsx)\n\nThe code above is a Next.js page component that redirects the user to the dashboard page of the Kulturdaten-frontend application. The purpose of this code is to ensure that the user is redirected to the correct dashboard page based on their locale and organizer ID.\n\nThe code imports several functions and components from other files in the project. The `NextPage` component is imported from the `next` package, which is used to define a Next.js page component. The `routes` and `useLocale` functions are imported from the `routing` module, which is used to define the application's routing logic. The `useUser` and `useOrganizerId` functions are imported from the `user` and `lib` modules, respectively, which are used to manage user authentication and organizer data. Finally, the `useRouter` hook is imported from the `next/router` module, which is used to access the Next.js router object.\n\nThe `AppIndexPage` component defines several variables using the imported functions and hooks. The `useUser` function is called to ensure that the user is authenticated before accessing the dashboard page. The `useLocale` function is called to determine the user's locale, which is used to construct the dashboard route. The `useOrganizerId` function is called to determine the user's organizer ID, which is also used to construct the dashboard route. Finally, the `useRouter` hook is called to access the Next.js router object.\n\nThe `router.replace` method is then called to redirect the user to the dashboard page. The `routes.dashboard` function is called to construct the dashboard route, passing in the user's locale and organizer ID as query parameters. If the user does not have an organizer ID, the `defaultOrganizerId` value is used instead. The `router.replace` method is used instead of `router.push` to ensure that the user is redirected without adding a new entry to the browser's history.\n\nFinally, the `AppIndexPage` component returns `null`, as it does not render any content to the page.\n\nOverall, this code is an important part of the Kulturdaten-frontend application, as it ensures that the user is redirected to the correct dashboard page based on their locale and organizer ID. It demonstrates the use of several important functions and hooks from other modules in the project, and highlights the importance of proper routing and authentication in web applications.\n## Questions: \n 1. What is the purpose of this file?\n   - This file is a Next.js page component that redirects the user to the dashboard route with the appropriate query parameters.\n\n2. What are the dependencies used in this file?\n   - This file imports Next.js components such as `NextPage` and `useRouter`, as well as custom components and functions such as `useLocale`, `useUser`, `useOrganizerId`, `routes`, and `defaultOrganizerId`.\n\n3. What is the expected behavior when this component is rendered?\n   - When this component is rendered, it will call the `useUser`, `useLocale`, and `useOrganizerId` hooks to retrieve the necessary data. It will then redirect the user to the dashboard route with the appropriate query parameters using the `router.replace` method. Finally, it will return `null` since it does not render any content.","metadata":{"source":".autodoc/docs/markdown/pages/index.md"}}],["305",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/user/deletion.tsx)\n\nThe code above is a Next.js page component that renders a user deletion page. It imports the `NextPage` component from the `next` package, which is used to define a Next.js page. It also imports the `UserDeletionPage` component from the `../../components/pages/user/deletion` file, which is the actual content of the page. Additionally, it imports the `AppWrapper` component from the `../../components/wrappers/AppWrapper` file, which is a higher-order component that wraps the `UserDeletionPage` component and provides some common functionality, such as a header and footer.\n\nThe `DeletionPage` component is defined as a function that returns a JSX element. It uses the `AppWrapper` component to wrap the `UserDeletionPage` component, which is rendered inside it. The purpose of this component is to provide a consistent layout and styling for the user deletion page, as well as any other pages that use the `AppWrapper` component.\n\nThis code is part of the larger `kulturdaten-frontend` project, which is a web application for cultural data management. The `DeletionPage` component is just one of many pages in the application, and it is used to allow users to delete their accounts. By using the `AppWrapper` component, the page has a consistent look and feel with the rest of the application, which improves the user experience.\n\nHere is an example of how this component might be used in the larger project:\n\n```\nimport DeletionPage from '../pages/user/deletion';\n\nconst App = () => {\n  return (\n    <div>\n      <header>...</header>\n      <main>\n        <DeletionPage />\n      </main>\n      <footer>...</footer>\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `DeletionPage` component is imported and rendered inside the `App` component, which is the main entry point for the application. The `App` component provides a header and footer, and the `DeletionPage` component is wrapped in the `AppWrapper` component, which provides additional layout and styling.\n## Questions: \n 1. What is the purpose of the `NextPage` import?\n   - The `NextPage` import is used to define the type of the `DeletionPage` component as a Next.js page component.\n\n2. What is the `UserDeletionPage` component?\n   - The `UserDeletionPage` component is a custom component located in the `components/pages/user/deletion` directory that is being rendered within the `DeletionPage` component.\n\n3. What is the `AppWrapper` component?\n   - The `AppWrapper` component is a custom wrapper component located in the `components/wrappers` directory that is being used to wrap the `UserDeletionPage` component and provide common layout and functionality to the page.","metadata":{"source":".autodoc/docs/markdown/pages/user/deletion.md"}}],["306",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/user/developer.tsx)\n\nThe code above is a Next.js page component that renders the UserDeveloperPage component wrapped in an AppWrapper component. The purpose of this code is to provide a route for developers to access their user-specific developer information. \n\nThe NextPage import is used to define the type of the DeveloperPage component as a Next.js page. The UserDeveloperPage import is used to render the user-specific developer information. The AppWrapper import is used to wrap the UserDeveloperPage component with the necessary layout and styling for the application.\n\nThe DeveloperPage component is exported as the default export of this file, which means it can be imported and used in other parts of the application. For example, it could be used as a route in the application's routing system to allow developers to access their information.\n\nHere is an example of how the DeveloperPage component could be used in a routing system:\n\n```\nimport { Router } from 'next/router';\nimport DeveloperPage from '../pages/developer';\n\nconst routes = {\n  '/developer': DeveloperPage,\n  // other routes\n};\n\nconst handleRouteChange = (url: string) => {\n  // do something on route change\n};\n\nconst router = Router({ routes });\nrouter.events.on('routeChangeStart', handleRouteChange);\n```\n\nIn this example, the DeveloperPage component is imported and used as a route in the application's routing system. The handleRouteChange function is used to perform some action when the route changes, such as updating the page title or sending analytics data.\n\nOverall, the DeveloperPage component is a small but important part of the larger kulturdaten-frontend project, providing a route for developers to access their user-specific information.\n## Questions: \n 1. What is the purpose of the `UserDeveloperPage` component?\n   - The `UserDeveloperPage` component is likely a custom component that is used to display information specific to a user who is a developer.\n\n2. What is the `AppWrapper` component used for?\n   - The `AppWrapper` component is likely a custom wrapper component that is used to provide consistent styling and layout across multiple pages in the application.\n\n3. What is the significance of the `NextPage` type in the `DeveloperPage` component?\n   - The `NextPage` type is likely a type definition provided by the Next.js framework, and it indicates that the `DeveloperPage` component is a page component that can be rendered by the Next.js server.","metadata":{"source":".autodoc/docs/markdown/pages/user/developer.md"}}],["307",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/user/notifications.tsx)\n\nThe code above is a Next.js page component that renders a notifications page for the Kulturdaten Frontend project. The page is wrapped in an `AppWrapper` component that provides a consistent layout and styling across all pages of the application. \n\nThe `NextPage` type is imported from the Next.js library and is used to define the type of the component. It indicates that this component is a Next.js page component, which means it can be rendered on both the server and the client side. \n\nThe `NotificationsPage` component is a functional component that returns JSX. The JSX code is wrapped in the `AppWrapper` component, which is imported from the `../../components/wrappers/AppWrapper` file. The `AppWrapper` component is responsible for rendering the header, footer, and other common elements of the application. \n\nThe `NotificationsPage` component currently displays \"TBD\" (To Be Determined) as a placeholder for the actual content that will be displayed on the notifications page. This component can be modified to display actual notifications data by fetching data from an API or a database. \n\nThis component is just one of many page components in the Kulturdaten Frontend project. Each page component is responsible for rendering a specific page of the application. The `AppWrapper` component is used to provide a consistent layout and styling across all pages of the application. \n\nHere is an example of how this component can be used in the larger project:\n\n```jsx\nimport NotificationsPage from '../pages/notifications';\n\nconst App = () => {\n  return (\n    <div>\n      <header>Header</header>\n      <main>\n        <NotificationsPage />\n      </main>\n      <footer>Footer</footer>\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn the example above, the `NotificationsPage` component is imported and rendered inside the `main` element of the `App` component. The `AppWrapper` component is automatically included in the `NotificationsPage` component, providing a consistent layout and styling across all pages of the application.\n## Questions: \n 1. What is the purpose of the `NextPage` import?\n   - The `NextPage` import is used to define the type of the `NotificationsPage` component as a Next.js page component.\n\n2. What is the `AppWrapper` component used for?\n   - The `AppWrapper` component is a custom wrapper component that is used to provide a consistent layout and styling for the application.\n\n3. What does the `TBD` placeholder represent in the `NotificationsPage` component?\n   - The `TBD` placeholder represents content that is \"To Be Determined\" and will be replaced with actual content in a future update to the application.","metadata":{"source":".autodoc/docs/markdown/pages/user/notifications.md"}}],["308",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/user/profile.tsx)\n\nThe code above is a React component that renders a user profile page. It imports the `useEffect` and `useState` hooks from the `react` library and the `NextPage` type from the `next` library. It also imports the `Profile` component from the `components/user` directory and the `AppWrapper` component from the `components/wrappers` directory.\n\nThe `ProfilePage` component is a functional component that returns a JSX element. It uses the `useState` hook to define a state variable called `loaded` and initializes it to `false`. It also uses the `useEffect` hook to update the `loaded` state variable to `true` after the component has mounted. The `useEffect` hook takes a callback function and an array of dependencies as arguments. In this case, the callback function sets the `loaded` state variable to `true` and the dependency array contains only the `setLoaded` function, which is the only function that is used inside the callback.\n\nThe `ProfilePage` component renders an `AppWrapper` component that wraps either a `Profile` component or a loading message, depending on the value of the `loaded` state variable. If `loaded` is `true`, the `Profile` component is rendered. If `loaded` is `false`, a loading message is rendered.\n\nThis component is used in the larger project to display a user's profile page. The `Profile` component contains the user's information and can be customized to display different types of information depending on the project's requirements. The `AppWrapper` component provides a consistent layout and styling for the profile page and can be reused throughout the project to wrap other components. The `useEffect` hook is used to ensure that the `Profile` component is not rendered until the necessary data has been loaded, improving the user experience.\n## Questions: \n 1. What is the purpose of the ProfilePage component?\n   - The ProfilePage component is a Next.js page component that renders the Profile component wrapped in an AppWrapper component after a loading state has been set to true using the useEffect hook.\n\n2. What is the significance of the loaded state variable and how is it used?\n   - The loaded state variable is a boolean value that is initially set to false using the useState hook. It is used to conditionally render the Profile component or a loading message based on its value.\n\n3. What are the dependencies of the useEffect hook and why are they necessary?\n   - The useEffect hook has a single dependency, setLoaded, which is a function that updates the loaded state variable. This dependency is necessary to prevent an infinite loop of re-renders since the useEffect hook would otherwise be called on every render.","metadata":{"source":".autodoc/docs/markdown/pages/user/profile.md"}}],["309",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/pages/user/settings.tsx)\n\nThe code above is a Next.js page component that renders the user settings page of the Kulturdaten Frontend application. The page is composed of two main components: the `AppWrapper` and the `UserSettingsPage`.\n\nThe `AppWrapper` component is a higher-order component that wraps the entire application and provides common functionality such as authentication, navigation, and error handling. It is imported from the `../../components/wrappers/AppWrapper` module.\n\nThe `UserSettingsPage` component is a custom component that contains the user settings form and logic. It is imported from the `../../components/pages/user/settings` module.\n\nThe `SettingsPage` component is a functional component that returns the `AppWrapper` component with the `UserSettingsPage` component as its child. It is exported as the default export of the module.\n\nThis code is used in the larger Kulturdaten Frontend project to render the user settings page. It is likely that this page is accessible only to authenticated users, and that the `AppWrapper` component handles the authentication logic. The `UserSettingsPage` component is responsible for rendering the user settings form and handling user input.\n\nHere is an example of how this component might be used in a Next.js application:\n\n```jsx\nimport SettingsPage from '../pages/user/settings';\n\nconst UserSettings = () => {\n  return <SettingsPage />;\n};\n\nexport default UserSettings;\n```\n\nIn this example, the `SettingsPage` component is imported and rendered as a child of a custom `UserSettings` component. This component can be used to define any additional logic or functionality specific to the user settings page.\n## Questions: \n 1. What is the purpose of the `UserSettingsPage` component?\n   - The `UserSettingsPage` component is responsible for rendering the user settings page.\n\n2. What is the `AppWrapper` component used for?\n   - The `AppWrapper` component is a wrapper component that provides a consistent layout and styling for the entire application.\n\n3. What is the significance of the `NextPage` type in the `SettingsPage` component?\n   - The `NextPage` type is a type definition provided by the Next.js framework that indicates that the `SettingsPage` component is a Next.js page component.","metadata":{"source":".autodoc/docs/markdown/pages/user/settings.md"}}],["310",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/renovate.json)\n\nThis code is a configuration file for the Renovate bot, which is a tool used for automating dependency updates in a project. The file is located in the root directory of the project and is named `renovate.json`. \n\nThe `$schema` property specifies the JSON schema that the file adheres to, which is the Renovate schema. The `extends` property specifies the preset configuration that the file should inherit from, which in this case is the `@inpyjamas` preset. The `enabled` property is set to `false`, which means that Renovate is currently disabled for this project.\n\nThe purpose of this file is to configure Renovate to automatically update dependencies in the project. By specifying a preset configuration, the file ensures that Renovate adheres to a consistent set of rules and guidelines for updating dependencies. The `enabled` property allows the project maintainers to turn Renovate on or off as needed.\n\nHere is an example of how this file might be used in the larger project:\n\n1. A new dependency is added to the project.\n2. The project maintainer updates the `renovate.json` file to enable Renovate and specify the `@inpyjamas` preset.\n3. Renovate scans the project's dependencies and identifies that a new version of the added dependency is available.\n4. Renovate creates a pull request with the updated dependency version.\n5. The project maintainer reviews and merges the pull request, updating the project's dependencies.\n\nOverall, this file plays an important role in ensuring that the project's dependencies are kept up-to-date and secure. By automating the dependency update process, Renovate helps to reduce the risk of security vulnerabilities and compatibility issues in the project.\n## Questions: \n 1. What is the purpose of the `renovate-schema.json` file?\n   - The `renovate-schema.json` file is used by the Renovate bot to determine how to update dependencies in the project.\n\n2. What does the `extends` property do in this code?\n   - The `extends` property is used to inherit configuration settings from another preset, in this case the `@inpyjamas` preset.\n\n3. Why is the `enabled` property set to `false`?\n   - The `enabled` property is used to enable or disable the Renovate bot for this project, and in this case it is set to `false` which means the bot is currently disabled.","metadata":{"source":".autodoc/docs/markdown/renovate.md"}}],["311",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/0.b6fcf793dbd9d5f9c663.manager.bundle.js.LICENSE.txt)\n\nThe code provided is a JavaScript library called Prism, which is used for syntax highlighting. It is licensed under the MIT license and was created by Lea Verou. The library is designed to be lightweight, robust, and elegant, making it a popular choice for developers who need to display code snippets on their websites or applications.\n\nPrism is a namespace that contains various functions and properties that can be used to highlight code. The library supports a wide range of programming languages, including HTML, CSS, JavaScript, PHP, Python, Ruby, and many more. It also includes support for markup languages like Markdown and LaTeX.\n\nOne of the key features of Prism is its ability to highlight code in real-time as the user types. This is achieved using a feature called \"Autoloader\", which automatically detects and highlights code blocks on a page. This feature can be enabled by including the \"prism-autoloader\" script in your HTML file.\n\nHere is an example of how to use Prism to highlight code:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <link href=\"prism.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n    <pre><code class=\"language-javascript\">\n      function helloWorld() {\n        console.log(\"Hello, world!\");\n      }\n    </code></pre>\n    <script src=\"prism.js\"></script>\n  </body>\n</html>\n```\n\nIn this example, we include the Prism CSS file and then define a code block with the class \"language-javascript\". We then include the Prism JavaScript file, which will automatically detect and highlight the code block.\n\nOverall, Prism is a powerful and flexible library that can be used to add syntax highlighting to any website or application. Its lightweight design and support for a wide range of programming languages make it a popular choice for developers.\n## Questions: \n 1. What is the purpose of this code?\n- This code is a comment block that provides information about the Prism library, which is a syntax highlighting tool.\n\n2. Who is the author of this code?\n- The author of this code is Lea Verou, as indicated in the comment block.\n\n3. What license is this code released under?\n- This code is released under the MIT license, as indicated in the comment block.","metadata":{"source":".autodoc/docs/markdown/storybook-static/0.b6fcf793dbd9d5f9c663.manager.bundle.js.LICENSE.md"}}],["312",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/1.88ab1041.iframe.bundle.js.LICENSE.txt)\n\nThe code provided is a JavaScript library called Prism, which is used for syntax highlighting. It is licensed under the MIT license and was created by Lea Verou. The library is designed to be lightweight, robust, and elegant, making it a popular choice for developers who want to add syntax highlighting to their projects.\n\nPrism is a namespace that contains a number of public methods and properties that can be used to customize the syntax highlighting behavior. These methods and properties can be accessed by including the Prism library in your project and then calling them as needed.\n\nOne of the key features of Prism is its ability to automatically detect the language of the code being highlighted. This is done using a process called language detection, which involves analyzing the code to determine its syntax and then applying the appropriate highlighting rules.\n\nPrism also supports a wide range of languages and syntaxes, including HTML, CSS, JavaScript, PHP, Ruby, Python, and many others. This makes it a versatile tool that can be used in a variety of different projects.\n\nHere is an example of how to use Prism to highlight code:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Prism Example</title>\n  <link rel=\"stylesheet\" href=\"prism.css\">\n  <script src=\"prism.js\"></script>\n</head>\n<body>\n  <pre><code class=\"language-javascript\">\n    function helloWorld() {\n      console.log(\"Hello, world!\");\n    }\n  </code></pre>\n</body>\n</html>\n```\n\nIn this example, we include the Prism CSS and JavaScript files in the head of our HTML document. We then use the `pre` and `code` tags to wrap our code, and we add the `language-javascript` class to tell Prism which language to highlight. When the page is loaded, Prism will automatically detect the language and apply the appropriate highlighting rules.\n\nOverall, Prism is a powerful and flexible tool for adding syntax highlighting to your projects. Its lightweight design and support for a wide range of languages make it a popular choice among developers.\n## Questions: \n 1. What is the purpose of this code?\n   This code is a comment block that provides information about the Prism library, including its license, author, and namespace.\n\n2. What is the Prism library used for?\n   The code does not provide information about how the Prism library is used in the project, so a developer may need to investigate further to determine its purpose.\n\n3. Are there any dependencies required for the Prism library to work?\n   The code does not provide information about any dependencies required for the Prism library to work, so a developer may need to consult the project documentation or source code to determine this.","metadata":{"source":".autodoc/docs/markdown/storybook-static/1.88ab1041.iframe.bundle.js.LICENSE.md"}}],["313",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/1.88ab1041.iframe.bundle.js.map)\n\nThe code snippet provided is a JSON object that contains information about a specific file in the kulturdaten-frontend project. The object has four key-value pairs: \"version\", \"file\", \"sources\", and \"mappings\". \n\nThe \"version\" key indicates the version of the source map format being used. In this case, it is version 3. \n\nThe \"file\" key specifies the name of the file that this source map corresponds to. In this case, it is \"1.88ab1041.iframe.bundle.js\". \n\nThe \"sources\" key is an array that lists the original source files that were used to generate the bundled file. However, in this case, the array is empty, which means that the original source files are not available. \n\nFinally, the \"mappings\" key contains a string that maps the generated code back to the original source files. This is useful for debugging purposes, as it allows developers to see where errors in the generated code originated from. \n\nOverall, this code is part of the build process for the kulturdaten-frontend project. It generates a source map that can be used to debug the generated code and trace errors back to their original source files. \n\nHere is an example of how this source map might be used in the project:\n\n```javascript\nconst fs = require('fs');\nconst sourceMap = JSON.parse(fs.readFileSync('1.88ab1041.iframe.bundle.js.map', 'utf8'));\n\n// Use the source map to find the original source file and line number of an error\nconst error = {\n  generated: { line: 10, column: 5 },\n  source: null,\n  original: null\n};\n\nfor (let i = 0; i < sourceMap.mappings.length; i++) {\n  const mapping = sourceMap.mappings[i];\n  if (mapping.generated.line === error.generated.line && mapping.generated.column === error.generated.column) {\n    error.source = sourceMap.sources[mapping.source];\n    error.original = { line: mapping.original.line, column: mapping.original.column };\n    break;\n  }\n}\n\nconsole.log(`Error in ${error.source} at line ${error.original.line}, column ${error.original.column}`);\n``` \n\nIn this example, we read the source map file into a JavaScript object using the `fs` module. We then use the source map to find the original source file and line number of an error that occurred in the generated code. We loop through the `mappings` array until we find a mapping that matches the location of the error in the generated code. We then use the `sources` array to find the original source file, and the `original` property of the mapping to find the original line and column numbers. Finally, we log the location of the error in the original source file to the console.\n## Questions: \n 1. What is the purpose of this code?\n   This code is a JSON object that contains information about the version, file name, sources, mappings, and source root of a bundled JavaScript file.\n\n2. Where is the bundled JavaScript file located?\n   The location of the bundled JavaScript file is not provided in this code snippet. It would need to be referenced elsewhere in the project.\n\n3. What is the significance of the \"mappings\" property in this code?\n   The \"mappings\" property contains information about how the original source code maps to the bundled code, which can be useful for debugging and optimizing the code. However, the specific format of the mappings string is not clear from this code snippet.","metadata":{"source":".autodoc/docs/markdown/storybook-static/1.88ab1041.iframe.bundle.js.md"}}],["314",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/3.7bb2ac45.iframe.bundle.js)\n\nThe code is defining two functions, `renderDocs` and `unmountDocs`, which are used to render and unmount documentation for a selected story in a Storybook instance. \n\nThe `renderDocs` function takes in four parameters: `story`, `docsContext`, `element`, and `callback`. `story` is an object that represents the selected story, `docsContext` is an object that contains context information for the documentation, `element` is the DOM element where the documentation will be rendered, and `callback` is a function that will be called after the documentation is rendered. The function returns a promise that resolves when the documentation is rendered.\n\nThe `unmountDocs` function takes in one parameter, `element`, which is the DOM element where the documentation is currently rendered. The function unmounts the documentation from the DOM.\n\nThe code also defines a component called `NoDocs_NoDocs`, which is used to display a message when there is no documentation available for the selected story. The component is rendered using the `renderDocs` function.\n\nOverall, these functions are used to provide documentation for the selected story in a Storybook instance. The `renderDocs` function is called when the user selects a story, and the documentation is rendered in the specified DOM element. The `unmountDocs` function is called when the user navigates away from the selected story, and the documentation is removed from the DOM. The `NoDocs_NoDocs` component is used to display a message when there is no documentation available for the selected story.\n## Questions: \n 1. What is the purpose of this code?\n- This code exports two functions, `renderDocs` and `unmountDocs`, which are used for rendering and unmounting documentation for a selected story in Storybook.\n\n2. What dependencies does this code use?\n- This code uses several dependencies, including `regenerator-runtime`, `core-js`, `react`, and `react-dom`.\n\n3. What is the error message that can be thrown if `docs.container` is not set?\n- The error message that can be thrown if `docs.container` is not set is \"No `docs.container` set, did you run `addon-docs/preset`?\" This suggests that the `addon-docs` preset needs to be installed and configured in order to use this code.","metadata":{"source":".autodoc/docs/markdown/storybook-static/3.7bb2ac45.iframe.bundle.md"}}],["315",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/6.9e122922a3ef4135c9f1.manager.bundle.js.LICENSE.txt)\n\nThe code above is a header comment for the OverlayScrollbars library, which is a third-party library used in the kulturdaten-frontend project. The purpose of this library is to provide custom scrollbars for web pages that can be styled and customized to match the design of the website. \n\nThe header comment provides information about the version of the library, the author, and the license under which it is released. This information is important for developers who want to use the library in their own projects, as it ensures that they are using a stable and reliable version of the library that is licensed appropriately.\n\nIn the kulturdaten-frontend project, the OverlayScrollbars library is likely used to provide custom scrollbars for various components of the website, such as dropdown menus, modals, and other UI elements. The library can be configured with various options to customize the appearance and behavior of the scrollbars, such as the size, color, and position of the scrollbar track and thumb.\n\nHere is an example of how the OverlayScrollbars library might be used in the kulturdaten-frontend project:\n\n```javascript\nimport OverlayScrollbars from 'overlayscrollbars';\n\nconst element = document.querySelector('.my-element');\n\nOverlayScrollbars(element, {\n  className: 'os-theme-light',\n  sizeAutoCapable: true,\n  paddingAbsolute: true,\n  scrollbars: {\n    visibility: 'auto',\n    autoHide: 'move',\n    autoHideDelay: 800,\n    dragScrolling: true,\n  },\n});\n```\n\nIn this example, the `OverlayScrollbars` function is imported from the library and called with a DOM element and an options object. The `className` option sets the theme of the scrollbar to a light color scheme, while the `sizeAutoCapable` and `paddingAbsolute` options ensure that the scrollbar is sized and positioned correctly. The `scrollbars` option configures the visibility and behavior of the scrollbar, such as whether it should auto-hide and how quickly it should fade in and out. \n\nOverall, the OverlayScrollbars library is an important tool for creating custom scrollbars in the kulturdaten-frontend project, and the header comment provides important information about the library's version, author, and license.\n## Questions: \n 1. What is OverlayScrollbars and what does it do?\n   - OverlayScrollbars is a library that provides customizable scrollbars for HTML elements. It allows for styling and functionality beyond the default browser scrollbars.\n2. Who is the author of OverlayScrollbars and when was the latest version released?\n   - The author of OverlayScrollbars is KingSora | Rene Haas. The latest version, 1.13.0, was released on February 8th, 2020.\n3. What license is OverlayScrollbars released under?\n   - OverlayScrollbars is released under the MIT license, which allows for free use, modification, and distribution of the code as long as the original license and copyright notice are included.","metadata":{"source":".autodoc/docs/markdown/storybook-static/6.9e122922a3ef4135c9f1.manager.bundle.js.LICENSE.md"}}],["316",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/8.55e9697c.iframe.bundle.js.LICENSE.txt)\n\nThis code is a header comment for the OverlayScrollbars library, which is a third-party library used in the Kulturdaten-frontend project. The purpose of this library is to provide custom scrollbars for web pages that can be styled and customized to fit the design of the website. \n\nThe header comment provides information about the version of the library, the author, and the license under which it is released. The MIT license is a permissive open-source license that allows users to modify and distribute the code with few restrictions.\n\nIn the context of the Kulturdaten-frontend project, this library is likely used to enhance the user experience of scrolling through content on the website. By using custom scrollbars, the website can provide a more cohesive and visually appealing design. \n\nHere is an example of how the OverlayScrollbars library might be used in the Kulturdaten-frontend project:\n\n```javascript\nimport OverlayScrollbars from 'overlayscrollbars';\n\nconst options = {\n  className: 'os-theme-light',\n  scrollbars: {\n    autoHide: 'move',\n    autoHideDelay: 500\n  }\n};\n\nconst element = document.querySelector('.scrollable-content');\n\nOverlayScrollbars(element, options);\n```\n\nIn this example, the `OverlayScrollbars` function is imported from the library and called on a DOM element with the class `scrollable-content`. The `options` object is passed as a second argument to customize the appearance and behavior of the scrollbars. The resulting scrollbars will have a light theme and will automatically hide after 500 milliseconds of inactivity.\n## Questions: \n 1. What is OverlayScrollbars and what does it do?\n   - OverlayScrollbars is a library that provides customizable scrollbars for HTML elements. It allows for styling and functionality beyond the default browser scrollbars.\n2. Who is the author of OverlayScrollbars?\n   - The author of OverlayScrollbars is KingSora, also known as Rene Haas. Their GitHub profile can be found at https://github.com/KingSora.\n3. What license is OverlayScrollbars released under?\n   - OverlayScrollbars is released under the MIT license, which allows for free use, modification, and distribution of the code as long as the original license and copyright notice are included.","metadata":{"source":".autodoc/docs/markdown/storybook-static/8.55e9697c.iframe.bundle.js.LICENSE.md"}}],["317",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/8.55e9697c.iframe.bundle.js.map)\n\nThe code snippet provided is a JSON object that contains information about a specific file in the `kulturdaten-frontend` project. The object has four key-value pairs: `version`, `file`, `sources`, and `mappings`. \n\nThe `version` key indicates the version of the source map format used in this file. In this case, it is version 3. \n\nThe `file` key specifies the name of the file that this source map corresponds to. In this case, it is `8.55e9697c.iframe.bundle.js`. \n\nThe `sources` key is an array that lists the original source files that were used to generate the code in the `file` key. However, in this case, the array is empty, which suggests that the code in `8.55e9697c.iframe.bundle.js` was not generated from any other source files. \n\nFinally, the `mappings` key contains a string that maps the code in the `file` key to the original source files listed in the `sources` key. However, in this case, the string is simply a semicolon followed by the letter \"A\", which suggests that there is no mapping information available. \n\nOverall, this code is not particularly useful on its own, but it provides important metadata about a specific file in the `kulturdaten-frontend` project. This information can be used by developers to debug and optimize the project, as well as to understand how different files are related to each other. For example, if a developer encounters an error in `8.55e9697c.iframe.bundle.js`, they can use this source map to trace the error back to its original source file and fix the issue.\n## Questions: \n 1. What is the purpose of this code?\n   This code is a JSON object that contains information about the version, file name, sources, and mappings for a specific bundle of JavaScript code.\n\n2. Where is this code used in the project?\n   It is unclear where this code is used in the project without additional context or information.\n\n3. What is the significance of the \"mappings\" property?\n   The \"mappings\" property is a string that maps the generated code back to the original source code, allowing for easier debugging and source mapping. However, without additional context or information, it is unclear how this specific mapping is being used in the project.","metadata":{"source":".autodoc/docs/markdown/storybook-static/8.55e9697c.iframe.bundle.js.md"}}],["318",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/8.57ed0ec070d705562ff6.manager.bundle.js)\n\nThe code provided is a function that returns a Promise object that makes an HTTP request to a specified URL. The function takes two parameters: the URL to request and an optional object containing additional request options. \n\nThe function uses the XMLHttpRequest API to create a new HTTP request object. It then sets the request method (defaulting to \"get\" if not specified in the options), the URL, and whether or not to use credentials (defaulting to false if not specified in the options). It also sets any additional headers specified in the options object. \n\nOnce the request is sent, the function sets up event listeners for the response. If the response is successful (status code 2xx), it extracts the response headers and body and returns them as a Promise object. If the response is unsuccessful, it calls the error callback function specified in the options object. \n\nThis function can be used in the larger project to make HTTP requests to the backend API and retrieve data to display on the frontend. It can be called from other functions or components in the project that need to fetch data from the server. \n\nExample usage:\n\n```\nimport makeRequest from './makeRequest';\n\nconst fetchData = async () => {\n  try {\n    const response = await makeRequest('https://example.com/api/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfetchData();\n```\n\nIn this example, the `fetchData` function uses `makeRequest` to fetch data from the specified URL. It then parses the response body as JSON and logs it to the console. If an error occurs, it logs the error to the console.\n## Questions: \n 1. What does this code do?\n    \n    This code exports a function that takes in a URL and an optional configuration object, and returns a Promise that resolves with an XMLHttpRequest object that can be used to make an HTTP request to the specified URL with the specified configuration.\n\n2. What is the purpose of the configuration object?\n    \n    The configuration object is optional and can be used to specify additional options for the HTTP request, such as the HTTP method, request body, headers, and credentials.\n\n3. How can this code be used in a web application?\n    \n    This code can be used in a web application to make HTTP requests to a server and retrieve data asynchronously. The returned Promise can be used to handle the response data and any errors that may occur during the request.","metadata":{"source":".autodoc/docs/markdown/storybook-static/8.57ed0ec070d705562ff6.manager.bundle.md"}}],["319",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/index.html)\n\nThis code is an HTML file that serves as the entry point for the kulturdaten-frontend project. It sets up the basic structure of the web page and includes several scripts that are necessary for the project to run.\n\nThe HTML file includes a meta tag that sets the character encoding and viewport of the page. It also includes a style tag that sets the height, width, and margin of the page to 0, and a box-sizing property that ensures that the padding and border of elements are included in their total width and height.\n\nThe script tag at the bottom of the file includes several JavaScript files that are necessary for the project to run. These files are generated by Webpack, a module bundler that is used to package the project's JavaScript code and its dependencies into a single file. The files include a runtime file, a vendors file, and a main file.\n\nThe runtime file contains code that is necessary for the project to run, such as polyfills for features that may not be supported by all browsers. The vendors file contains code from third-party libraries that the project depends on, such as React and Emotion. The main file contains the project's own JavaScript code.\n\nThe script tag in the head of the file includes some additional JavaScript code that sets a global variable called CONFIG_TYPE to \"PRODUCTION\", which indicates that the project is running in a production environment. It also sets a global variable called LOGLEVEL to \"info\", which determines the level of logging that is output by the project. Finally, it sets a global variable called FEATURES to an object that contains various configuration options for the project.\n\nOverall, this code sets up the basic structure of the kulturdaten-frontend project and includes the necessary scripts to run it. It is an important part of the project's infrastructure and is used by all other files in the project.\n## Questions: \n 1. What is the purpose of the try-catch block in the script tag?\n    \n    The try-catch block is used to check if the current window is the top window and if not, it sets the `__REACT_DEVTOOLS_GLOBAL_HOOK__` to the top window's `__REACT_DEVTOOLS_GLOBAL_HOOK__`.\n\n2. What is the purpose of the `window.onerror` function in the script tag?\n    \n    The `window.onerror` function is used to catch runtime errors and send a POST request to `/runtime-error` with the error details in JSON format.\n\n3. What is the purpose of the `FEATURES` object in the script tag?\n    \n    The `FEATURES` object is used to enable or disable certain features in the application, such as `postcss`, `emotionAlias`, and `warnOnLegacyHierarchySeparator`.","metadata":{"source":".autodoc/docs/markdown/storybook-static/index.md"}}],["320",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/main.5280e59d19ae205350a2.manager.bundle.js)\n\nThe code snippet is responsible for loading various modules and dependencies required for the `kulturdaten-frontend` project. It uses the `webpackJsonp` function to push an array of module IDs and their corresponding code into the `window` object. \n\nThe `webpackJsonp` function is a part of the Webpack module bundler and is responsible for loading and executing modules in the correct order. It takes an array of module IDs and their corresponding code as arguments and pushes them into the `window` object. This allows the modules to be accessed globally and used by other parts of the application.\n\nThe array of module IDs and their corresponding code is generated by Webpack during the build process. Each module is assigned a unique ID, and its code is bundled together with other modules that it depends on. This ensures that the code is loaded in the correct order and that all dependencies are resolved before the module is executed.\n\nThe `module.exports` statement at the end of the code snippet exports a module that is required by other parts of the application. This allows the module to be used as a dependency by other modules.\n\nOverall, this code is an essential part of the `kulturdaten-frontend` project as it loads and executes the required modules and dependencies. It ensures that the application runs smoothly and that all dependencies are resolved before the code is executed.\n## Questions: \n 1. What is the purpose of this code?\n   - This code is related to webpack and is likely responsible for loading and bundling various modules and dependencies for the kulturdaten-frontend project.\n\n2. What do the numbers in the `push` method represent?\n   - The numbers in the `push` method likely represent the IDs of the modules being loaded and bundled by webpack.\n\n3. What is the significance of the `module.exports` statement?\n   - The `module.exports` statement is likely used to export the bundled modules and dependencies for use in other parts of the kulturdaten-frontend project.","metadata":{"source":".autodoc/docs/markdown/storybook-static/main.5280e59d19ae205350a2.manager.bundle.md"}}],["321",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/runtime~main.6c506e25.iframe.bundle.js)\n\nThe code provided is a minified version of the webpack runtime code. Webpack is a module bundler for JavaScript applications that allows developers to bundle their code and assets into a single file. The purpose of this code is to handle the loading and execution of modules in the browser.\n\nThe code defines a function called `webpackJsonpCallback` that is responsible for loading and executing modules. It takes an array of data as an argument, which contains information about the modules to be loaded. The function loops through the array and checks if the modules have already been loaded. If a module has not been loaded, it is added to a list of deferred modules to be loaded later.\n\nThe function then checks the list of deferred modules and loads them if all their dependencies have been loaded. Once a module is loaded, its code is executed and added to the list of installed modules. The function returns the result of the last loaded module.\n\nThe code also defines several helper functions, such as `__webpack_require__` which is used to load modules, and `__webpack_require__.e` which is used to load chunks of code asynchronously.\n\nOverall, this code is an essential part of the webpack runtime and is used to load and execute modules in the browser. It is not meant to be modified directly by developers, but rather serves as a foundational piece of the larger project.\n## Questions: \n 1. What is the purpose of this code?\n   - This code is a webpack runtime that handles module loading and chunk splitting for the kulturdaten-frontend project.\n\n2. What does the `webpackJsonpCallback` function do?\n   - The `webpackJsonpCallback` function is called when a chunk is loaded and it updates the `installedChunks` object and resolves any promises waiting for the chunk to load.\n\n3. What is the role of the `__webpack_require__` function?\n   - The `__webpack_require__` function is the main function used to load modules in the webpack runtime. It checks if a module is already loaded, loads it if it's not, and returns the module's exports.","metadata":{"source":".autodoc/docs/markdown/storybook-static/runtime~main.6c506e25.iframe.bundle.md"}}],["322",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/runtime~main.e6ade2549c60c139e689.manager.bundle.js)\n\nThe code provided is a minified version of the webpack runtime code. Webpack is a module bundler that takes modules with dependencies and generates static assets representing those modules. The purpose of this code is to handle the loading and execution of modules in the browser. \n\nThe code defines a function called `webpackJsonpCallback` that is called when a new chunk of code is loaded. The function takes an array of data that contains information about the chunk, including the module ID, chunk ID, and the code to execute. The function then loops through the chunk IDs and checks if the chunk has already been installed. If it has, the function pushes the installed chunk to an array of resolved chunks. If it hasn't, the function creates a new promise and adds it to the array of promises for the chunk. It then creates a new script element and sets its source to the URL of the chunk. Once the script is loaded, the promise is resolved and the code is executed.\n\nThe code also defines several helper functions for loading and executing modules, including `__webpack_require__`, `__webpack_require__.e`, `__webpack_require__.t`, and `__webpack_require__.n`. These functions are used to load and execute modules and their dependencies.\n\nOverall, this code is an essential part of the webpack runtime and is used to load and execute modules in the browser. It is not meant to be modified directly, but rather is generated by webpack during the build process.\n## Questions: \n 1. What is the purpose of this code?\n   \n   This code is a webpack runtime that handles module loading and chunk splitting for the kulturdaten-frontend project.\n\n2. What does the `webpackJsonpCallback` function do?\n   \n   The `webpackJsonpCallback` function is called when a chunk is loaded and it updates the `installedChunks` object and resolves any promises waiting for that chunk.\n\n3. What is the role of the `__webpack_require__` function?\n   \n   The `__webpack_require__` function is the main function used to load modules in the webpack runtime. It checks if a module is already loaded and if not, it loads it using the `modules` object and the `webpackJsonp` function.","metadata":{"source":".autodoc/docs/markdown/storybook-static/runtime~main.e6ade2549c60c139e689.manager.bundle.md"}}],["323",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/vendors~main.bcca4c4a65db63301c66.manager.bundle.js.LICENSE.txt)\n\nThis file contains a list of external dependencies used in the kulturdaten-frontend project. Each dependency is listed with its name, version, and license. \n\nThe purpose of this file is to provide transparency and clarity on the external libraries and code used in the project. It allows developers and users to easily see what third-party code is being used and under what license it is distributed. This is important for legal and security reasons, as well as for understanding the functionality and behavior of the project as a whole.\n\nFor example, one of the dependencies listed is React Router DOM v6.2.1, which is a library for routing in React applications. This library allows developers to define routes and navigation in their application, making it easier to manage complex user interfaces. By including this library in the project, the developers of kulturdaten-frontend are able to take advantage of this functionality without having to write it themselves.\n\nAnother dependency listed is Fuse.js v3.6.1, which is a lightweight fuzzy-search library. This library allows developers to implement search functionality in their application that can handle misspellings and partial matches. By including this library in the project, the developers of kulturdaten-frontend are able to provide a more robust search experience for users.\n\nOverall, this file serves as a reference for the external dependencies used in the kulturdaten-frontend project and highlights the importance of understanding and managing third-party code in software development.\n## Questions: \n 1. What is the purpose of this file?\n- This file is a collection of licenses for various libraries and dependencies used in the project.\n\n2. What licenses are being used for React and its related libraries?\n- The licenses for React, React DOM, and React Router are all MIT licenses.\n\n3. What is the license for Fuse.js?\n- The license for Fuse.js is the Apache Software License 2.0.","metadata":{"source":".autodoc/docs/markdown/storybook-static/vendors~main.bcca4c4a65db63301c66.manager.bundle.js.LICENSE.md"}}],["324",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/vendors~main.d47567c4.iframe.bundle.js.LICENSE.txt)\n\nThis file contains a list of external dependencies used in the kulturdaten-frontend project. Each dependency is listed with its name, version, and license. \n\nSome of the dependencies listed include:\n- JS File Downloader: a library for downloading files in JavaScript\n- escape-html: a library for escaping HTML characters\n- es5-shim: a library that provides compatibility shims for ES5 features that are not available in older browsers\n- es6-shim: a library that provides compatibility shims for ES6 features that are not available in older browsers\n- is-plain-object: a library for checking if an object is a plain object\n- isobject: a library for checking if a value is an object\n- rrule.js: a library for working with recurrence rules for calendar dates\n\nThese dependencies are used throughout the project to provide additional functionality and ensure compatibility with older browsers. They are not specific to any one part of the project and are used globally. \n\nDevelopers working on the kulturdaten-frontend project should be aware of these dependencies and their licenses, as they may affect the licensing of the project as a whole. They should also be familiar with the functionality provided by each dependency, as they may be useful in implementing certain features.\n## Questions: \n 1. What is the purpose of this file?\n- This file contains license information for various third-party libraries used in the project.\n\n2. What are some of the third-party libraries used in this project?\n- Some of the third-party libraries used in this project include JS File Downloader, escape-html, rrule.js, and React.\n\n3. Are there any specific licensing requirements for using these third-party libraries?\n- Yes, each third-party library has its own licensing requirements, which are specified in the comments above each library's code.","metadata":{"source":".autodoc/docs/markdown/storybook-static/vendors~main.d47567c4.iframe.bundle.js.LICENSE.md"}}],["325",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/storybook-static/vendors~main.d47567c4.iframe.bundle.js.map)\n\nThe code provided is a JSON object that contains information about a specific file in the kulturdaten-frontend project. The file is called `vendors~main.d47567c4.iframe.bundle.js` and the JSON object provides details about its version, sources, and mappings.\n\nThis information is useful for developers who are working on the project and need to keep track of different versions of the file. The version number can be used to identify which version of the file is currently being used, while the sources array can be used to track changes made to the file over time.\n\nThe mappings property is a string that contains information about how the code in the file is mapped to the original source code. This is useful for debugging purposes, as it allows developers to trace errors back to the original source code and identify where the problem occurred.\n\nOverall, this code is a small but important part of the kulturdaten-frontend project, as it provides valuable information about a specific file that is used in the project. While it may not be directly used in the larger project, it is an essential component for developers who are working on the project and need to keep track of different versions of the file.\n## Questions: \n 1. What is the purpose of this code?\n   - This code appears to be a JSON object with a version number, file name, and source mapping information. It is unclear what the specific purpose of this object is without additional context.\n\n2. What is the significance of the file name \"vendors~main.d47567c4.iframe.bundle.js\"?\n   - The file name suggests that this code is part of a larger project that includes multiple vendors and a main bundle, possibly for a web application. The specific hash value in the file name may be used for versioning or caching purposes.\n\n3. What is the format of the source mapping information in the \"mappings\" field?\n   - The source mapping information appears to be in a specific format that maps generated code to original source code locations. Without additional context or documentation, it is unclear how this mapping is used or what tools are used to generate it.","metadata":{"source":".autodoc/docs/markdown/storybook-static/vendors~main.d47567c4.iframe.bundle.js.md"}}],["326",{"pageContent":"[View code on GitHub](https://github.com/technologiestiftung/kulturdaten-frontend/blob/master/tsconfig.json)\n\nThis code is a configuration file for the TypeScript compiler used in the kulturdaten-frontend project. The file is named `tsconfig.json` and is located in the root directory of the project. \n\nThe `compilerOptions` object specifies various options for the TypeScript compiler. \n\n- `target` specifies the ECMAScript version that the compiled code should be compatible with. In this case, it is set to `es5`, which means that the compiled code will be compatible with ECMAScript 5. \n- `lib` specifies the libraries that should be included in the compilation process. In this case, it includes the `dom`, `dom.iterable`, and `esnext` libraries. \n- `allowJs` allows JavaScript files to be compiled alongside TypeScript files. \n- `skipLibCheck` skips type checking of declaration files. \n- `strict` enables strict type checking options. \n- `forceConsistentCasingInFileNames` ensures that file names are consistent across platforms. \n- `noEmit` prevents the compiler from emitting compiled files. \n- `esModuleInterop` enables compatibility with modules that use `export =`. \n- `module` specifies the module format for the compiled code. In this case, it is set to `esnext`. \n- `moduleResolution` specifies how modules should be resolved. In this case, it is set to `node`, which means that Node.js module resolution will be used. \n- `resolveJsonModule` allows importing JSON files as modules. \n- `isolatedModules` enables incremental compilation. \n- `jsx` specifies the syntax for JSX. In this case, it is set to `preserve`. \n- `downlevelIteration` enables iteration for targets that do not support `for...of` loops. \n- `incremental` enables incremental compilation. \n\nThe `include` array specifies the files that should be included in the compilation process. In this case, it includes all `.ts` and `.tsx` files in the project, as well as a file named `next-env.d.ts`. \n\nThe `exclude` array specifies the files that should be excluded from the compilation process. In this case, it excludes the `node_modules` directory. \n\nOverall, this configuration file ensures that the TypeScript compiler is set up correctly for the kulturdaten-frontend project, and specifies various options for the compilation process.\n## Questions: \n 1. What is the purpose of this code?\n   This code is a configuration file for the TypeScript compiler used in the kulturdaten-frontend project.\n\n2. What version of ECMAScript is being targeted?\n   The \"target\" property is set to \"es5\".\n\n3. What files are included and excluded from compilation?\n   The \"include\" property specifies that all TypeScript and TypeScript React files should be compiled, while the \"exclude\" property specifies that files in the \"node_modules\" directory should be excluded.","metadata":{"source":".autodoc/docs/markdown/tsconfig.md"}}]]